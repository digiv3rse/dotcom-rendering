{"version":3,"file":"TweetBlockComponent-importable.modern.6d4287de7575387c869f.js","mappings":"uIAmBA,SAASA,EAAWC,EAAaC,EAAcC,GAC9C,OAAOF,EAAIE,QAAQ,IAAIC,OALxB,SAAsBH,GACrB,OAAOA,EAAIE,QAAQ,4BAA6B,OACjD,CAG+BE,CAAaH,GAAO,KAAMC,EACzD,C,iBAEO,MAQMG,EAAgBC,IAC5B,IAAIC,EAAYD,EAIhB,OAHAC,EAAYR,EAAWQ,EAAW,SAAU,WAC5CA,EAAYR,EAAWQ,EAAW,YAAa,WAC/CA,EAAYR,EAAWQ,EAAW,aAAc,YACzCA,CAAS,C,m0BCzBjB,MAAMC,GAAcC,EAAAA,EAAAA,KAAGA,IAEDC,EAAAA,GAAAA,UAKlBC,EAAAA,GAAAA,SA+CSC,EAAuB,I,IAAA,QAAEC,GAAgB,EAOrD,OANAC,EAAAA,EAAAA,YAAU,KApBO,CAACD,IAClB,MAAME,EAAiBC,SAASC,eAC/B,mBAAqC,OAAlBJ,EAAQK,YAEtBC,EAAQH,SAASI,cACtB,oBAAsC,OAAlBP,EAAQK,UAAU,6BAGnCH,GAAkBI,GAA0B,oBAAVE,QAIrCF,EAAMG,UAAUC,IAAI,iBACpBF,MAAMG,OAAOC,IACZA,EAAQC,QAAQC,KAAKZ,EAAe,IAEtC,EAOCa,CAAUf,EAAQ,GAChB,CAACA,KAGH,SAACgB,MAAAA,CACAC,GAAI,mBAAqC,OAAlBjB,EAAQK,WAC/BT,IAAKD,EACLuB,wBAAyB,CAAEC,QAAQ3B,EAAAA,EAAAA,GAAaQ,EAAQoB,Q","sources":["webpack://@guardian/dotcom-rendering/./src/lib/escapeData.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/TweetBlockComponent.importable.tsx"],"sourcesContent":["/**\n * Create an escapedData string that can be safely placed inside script tags on the page\n *\n * The level of sanitisation here is limited to escaping script tags to prevent\n * errors when embedded html string contain their own script tags.\n *\n * See: https://www.w3.org/TR/html52/semantics-scripting.html#restrictions-for-contents-of-script-elements\n *\n *  > The easiest and safest way to avoid the rather strange restrictions described in this section is to\n *  > always escape \"&lt;!--\" as \"&lt;\\!--\", \"&lt;script\" as \"&lt;\\script\", and \"&lt;/script\" as \"&lt;\\/script\"\n *\n * TODO: This could be extended\n */\n\n// See: https://stackoverflow.com/a/1144788\nfunction escapeRegExp(str: string): string {\n\treturn str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, '\\\\$1');\n}\n\nfunction replaceAll(str: string, find: string, replace: string): string {\n\treturn str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\nexport const escapeData = (data: string): string => {\n\tlet escaped = data;\n\tescaped = replaceAll(escaped, '<!--', '<\\\\!--');\n\tescaped = replaceAll(escaped, '<script', '<\\\\script');\n\tescaped = replaceAll(escaped, '</script', '<\\\\/script');\n\treturn escaped;\n};\n\nexport const unescapeData = (data: string): string => {\n\tlet unescaped = data;\n\tunescaped = replaceAll(unescaped, '<\\\\!--', '<!--');\n\tunescaped = replaceAll(unescaped, '<\\\\script', '<script');\n\tunescaped = replaceAll(unescaped, '<\\\\/script', '</script');\n\treturn unescaped;\n};\n","import { css } from '@emotion/react';\nimport { body, border } from '@guardian/source-foundations';\nimport { useEffect } from 'react';\nimport { unescapeData } from '../../lib/escapeData';\nimport type { TweetBlockElement } from '../../types/content';\n\ntype Props = {\n\telement: TweetBlockElement;\n};\n\n// fallback styling for when JS is disabled\nconst noJSStyling = css`\n\t.nojs-tweet:not(.nojs-tweet-rendered) {\n\t\tborder: 1px solid ${border.secondary};\n\t\tborder-radius: 4px;\n\t\tpadding: 20px;\n\t\twidth: 100%;\n\t\tmargin-bottom: 16px;\n\t\t${body.small()};\n\t}\n\n\t.nojs-tweet iframe {\n\t\t/* Unfortunately due to how Twitter embeds work setting !important is the only way to overwrite tweet CSS */\n\t\t/* stylelint-disable-next-line declaration-no-important */\n\t\twidth: 100% !important;\n\t}\n\n\t.nojs-tweet p {\n\t\tpadding-bottom: 10px;\n\t}\n\n\ta {\n\t\t/* stylelint-disable-next-line color-no-hex */\n\t\tcolor: #2b7bb9;\n\t}\n`;\n\n/**\n * loadTweet takes the nojs default version of a Twitter tweet embed\n * and enhances it using Twitter's platform api script\n *\n * This code should only execute if switches.enhanceTweets is true (see\n * renderElements)\n *\n * @param element TweetBlockElement - The tweet element we want to enhance\n */\nconst loadTweet = (element: TweetBlockElement) => {\n\tconst tweetContainer = document.getElementById(\n\t\t`tweet-container-${element.elementId}`,\n\t);\n\tconst tweet = document.querySelector(\n\t\t`#tweet-container-${element.elementId} > blockquote.nojs-tweet`,\n\t);\n\n\tif (tweetContainer && tweet && typeof twttr !== 'undefined') {\n\t\t// We need this classname to exist as this is what Twitter uses\n\t\t// to find the tweet on the page. We *remove* this class in\n\t\t// enhanceTweets()\n\t\ttweet.classList.add('twitter-tweet');\n\t\ttwttr.ready((twitter) => {\n\t\t\ttwitter.widgets.load(tweetContainer);\n\t\t});\n\t}\n};\n\nexport const TweetBlockComponent = ({ element }: Props) => {\n\tuseEffect(() => {\n\t\t// This code only runs if this component is hydrated, which\n\t\t// only happens if the enhanceTweets switch is on\n\t\tloadTweet(element);\n\t}, [element]);\n\n\treturn (\n\t\t<div\n\t\t\tid={`tweet-container-${element.elementId}`}\n\t\t\tcss={noJSStyling}\n\t\t\tdangerouslySetInnerHTML={{ __html: unescapeData(element.html) }}\n\t\t/>\n\t);\n};\n"],"names":["replaceAll","str","find","replace","RegExp","escapeRegExp","unescapeData","data","unescaped","noJSStyling","css","border","body","TweetBlockComponent","element","useEffect","tweetContainer","document","getElementById","elementId","tweet","querySelector","twttr","classList","add","ready","twitter","widgets","load","loadTweet","div","id","dangerouslySetInnerHTML","__html","html"],"sourceRoot":""}