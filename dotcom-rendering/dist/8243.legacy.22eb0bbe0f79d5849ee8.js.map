{"version":3,"file":"8243.legacy.22eb0bbe0f79d5849ee8.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../../../libs/@guardian/libs/src/format/ArticleDisplay.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/checkbox/LabelText.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/checkbox/SupportingText.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/checkbox/Checkbox.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/checkbox/CheckboxGroup.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/checkbox/theme.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/checkbox/styles.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/label/Label.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/select/theme.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/select/styles.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/select/Select.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/text-area/styles.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/text-area/TextArea.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/text-input/theme.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/text-input/styles.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/text-input/TextInput.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/src/user-feedback/InlineSuccess.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/vendor/icons/SvgChevronDownSingle.tsx","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/source-react-components/vendor/icons/SvgTickRound.tsx"],"sourcesContent":["export enum ArticleDisplay {\n\tStandard,\n\tImmersive,\n\tShowcase,\n\tNumberedList,\n}\n","import type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport type { ReactNode } from 'react';\nimport type { Theme } from '../@types/Theme';\nimport { labelText, labelTextWithSupportingText } from './styles';\n\nexport const LabelText = ({\n\thasSupportingText,\n\tchildren,\n}: {\n\thasSupportingText?: boolean;\n\tchildren: ReactNode;\n}): EmotionJSX.Element => {\n\treturn (\n\t\t<div\n\t\t\tcss={(theme: Theme) => [\n\t\t\t\tlabelText(theme.checkbox),\n\t\t\t\thasSupportingText ? labelTextWithSupportingText : '',\n\t\t\t]}\n\t\t>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n","import type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport type { ReactNode } from 'react';\nimport type { Theme } from '../@types/Theme';\nimport { supportingText } from './styles';\n\nexport const SupportingText = ({\n\tchildren,\n}: {\n\tchildren: ReactNode;\n}): EmotionJSX.Element => {\n\treturn (\n\t\t<div css={(theme: Theme) => supportingText(theme.checkbox)}>{children}</div>\n\t);\n};\n","import type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { generateSourceId } from '@guardian/source-foundations';\nimport type { InputHTMLAttributes, ReactNode } from 'react';\nimport type { Props } from '../@types/Props';\nimport type { Theme } from '../@types/Theme';\nimport { LabelText } from './LabelText';\nimport {\n\tcheckbox,\n\tcheckboxContainer,\n\tcheckboxContainerWithSupportingText,\n\terrorCheckbox,\n\tlabel,\n\ttick,\n\ttickWithLabelText,\n\ttickWithSupportingText,\n} from './styles';\nimport { SupportingText } from './SupportingText';\n\nexport interface CheckboxProps\n\textends InputHTMLAttributes<HTMLInputElement>,\n\t\tProps {\n\tid?: string;\n\t/**\n\t * Whether checkbox is checked. This is necessary when using the\n\t * [controlled approach](https://reactjs.org/docs/forms.html#controlled-components)\n\t * (recommended) to form state management.\n\t *\n\t * _Note: if you pass the `checked` prop, you MUST also pass an `onChange`\n\t * handler, or the field will be rendered as read-only._\n\t */\n\tchecked?: boolean;\n\t/**\n\t * When using the [uncontrolled approach](https://reactjs.org/docs/uncontrolled-components.html),\n\t * use defaultChecked to indicate the whether the checkbox is checked intially.\n\t */\n\tdefaultChecked?: boolean;\n\t/**\n\t * Appears to the right of the checkbox. If a visible label is\n\t * undesirable (e.g. for layout reasons) use `aria-label` instead.\n\t *\n\t * If label is omitted, supporting text will not appear either.\n\t */\n\tlabel?: ReactNode;\n\t/**\n\t * Additional text or a component that appears below the label\n\t */\n\tsupporting?: ReactNode;\n\t/**\n\t * Whether checkbox is in an indeterminate (\"mixed\") state\n\t */\n\tindeterminate?: boolean;\n\t/**\n\t * @ignore passed down by the parent\n\t */\n\terror?: boolean;\n}\n\n/**\n * [Storybook](https://guardian.github.io/csnx/?path=/story/source-react-components_checkbox--default-default-theme) •\n * [Design System](https://theguardian.design/2a1e5182b/p/466fad-checkbox/b/33fc2f) •\n * [GitHub](https://github.com/guardian/csnx/tree/main/libs/@guardian/source-react-components/src/checkbox/Checkbox.tsx) •\n * [NPM](https://www.npmjs.com/package/@guardian/source-react-components)\n *\n * Checkboxes allow users to select multiple options from a list of individual\n * items or to indicate agreement of terms and  services.\n *\n * The following themes are supported: `default`, `brand`\n */\nexport const Checkbox = ({\n\tid,\n\tlabel: labelContent,\n\tchecked,\n\tsupporting,\n\tdefaultChecked,\n\terror,\n\tindeterminate,\n\tcssOverrides,\n\t...props\n}: CheckboxProps): EmotionJSX.Element => {\n\tconst checkboxId = id ?? generateSourceId();\n\tconst isChecked = (): boolean => {\n\t\tif (checked != null) {\n\t\t\treturn checked;\n\t\t}\n\n\t\treturn !!defaultChecked;\n\t};\n\tconst setIndeterminate = (el: HTMLInputElement | null): void => {\n\t\tif (el) {\n\t\t\tel.indeterminate = !!indeterminate;\n\t\t}\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tcss={(theme: Theme) => [\n\t\t\t\tcheckboxContainer(theme.checkbox, error),\n\t\t\t\tsupporting ? checkboxContainerWithSupportingText : '',\n\t\t\t]}\n\t\t>\n\t\t\t<input\n\t\t\t\tid={checkboxId}\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tcss={(theme: Theme) => [\n\t\t\t\t\tcheckbox(theme.checkbox, error),\n\t\t\t\t\terror ? errorCheckbox(theme.checkbox) : '',\n\t\t\t\t\tcssOverrides,\n\t\t\t\t]}\n\t\t\t\taria-invalid={!!error}\n\t\t\t\tref={setIndeterminate}\n\t\t\t\tdefaultChecked={defaultChecked != null ? defaultChecked : undefined}\n\t\t\t\tchecked={checked != null ? isChecked() : undefined}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t<span\n\t\t\t\tcss={(theme: Theme) => [\n\t\t\t\t\ttick(theme.checkbox),\n\t\t\t\t\tlabelContent || supporting ? tickWithLabelText : '',\n\t\t\t\t\tsupporting ? tickWithSupportingText : '',\n\t\t\t\t]}\n\t\t\t/>\n\n\t\t\t<label htmlFor={checkboxId} css={label}>\n\t\t\t\t{supporting ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<LabelText hasSupportingText={true}>{labelContent}</LabelText>\n\t\t\t\t\t\t<SupportingText>{supporting}</SupportingText>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<LabelText>{labelContent}</LabelText>\n\t\t\t\t)}\n\t\t\t</label>\n\t\t</div>\n\t);\n};\n","import type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { descriptionId, generateSourceId } from '@guardian/source-foundations';\nimport { Children, cloneElement } from 'react';\nimport type { Props } from '../@types/Props';\nimport { Legend } from '../label/Legend';\nimport { InlineError } from '../user-feedback/InlineError';\nimport { fieldset } from './styles';\n\nexport interface CheckboxGroupProps extends Props {\n\tid?: string;\n\t/**\n\t * Gets passed as the name attribute for each checkbox\n\t */\n\tname: string;\n\t/**\n\t * Appears as a legend at the top of the checkbox group\n\t */\n\tlabel?: string;\n\t/**\n\t * Adds the word \"Optional\" after the label\n\t */\n\toptional?: boolean;\n\t/**\n\t * Appears as a legend at the top of the checkbox group\n\t */\n\thideLabel?: boolean;\n\t/**\n\t * Visually hides the label.\n\t */\n\tsupporting?: string;\n\t/**\n\t * If passed, error styling should apply to this group. The string appears\n\t * as an inline error message\n\t */\n\terror?: string;\n\tchildren: JSX.Element | JSX.Element[];\n}\n\n/**\n * [Storybook](https://guardian.github.io/csnx/?path=/story/source-react-components_checkboxgroup--default-default-theme) •\n * [Design System](https://theguardian.design/2a1e5182b/p/466fad-checkbox/b/33fc2f) •\n * [GitHub](https://github.com/guardian/csnx/tree/main/libs/@guardian/source-react-components/src/checkbox/CheckboxGroup.tsx) •\n * [NPM](https://www.npmjs.com/package/@guardian/source-react-components)\n *\n * Checkboxes allow users to select multiple options from a list of individual\n * items or to indicate agreement of terms and  services.\n *\n * The following themes are supported: `default`, `brand`\n */\nexport const CheckboxGroup = ({\n\tid,\n\tname,\n\tlabel,\n\thideLabel,\n\toptional = false,\n\tsupporting,\n\terror,\n\tcssOverrides,\n\tchildren,\n\t...props\n}: CheckboxGroupProps): EmotionJSX.Element => {\n\tconst groupId = id ?? generateSourceId();\n\tconst legend = label ? (\n\t\t<Legend\n\t\t\ttext={label}\n\t\t\tsupporting={supporting}\n\t\t\thideLabel={hideLabel}\n\t\t\toptional={optional}\n\t\t/>\n\t) : (\n\t\t''\n\t);\n\n\tconst message =\n\t\ttypeof error === 'string' ? (\n\t\t\t<InlineError id={descriptionId(groupId)}>{error}</InlineError>\n\t\t) : (\n\t\t\t''\n\t\t);\n\n\treturn (\n\t\t<fieldset css={[fieldset, cssOverrides]} id={groupId} {...props}>\n\t\t\t{legend}\n\t\t\t{message}\n\t\t\t{Children.map(children, (child) => {\n\t\t\t\treturn cloneElement(\n\t\t\t\t\tchild,\n\t\t\t\t\tObject.assign(\n\t\t\t\t\t\terror\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t\t\t'aria-describedby': descriptionId(groupId),\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t},\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t})}\n\t\t</fieldset>\n\t);\n};\n","import { palette } from '@guardian/source-foundations';\nimport { labelThemeBrand, labelThemeDefault } from '../label/theme';\nimport {\n\tuserFeedbackThemeBrand,\n\tuserFeedbackThemeDefault,\n} from '../user-feedback/theme';\n\nexport const checkboxThemeDefault = {\n\tcheckbox: {\n\t\tborder: palette.neutral[46],\n\t\tborderHover: palette.brand[500],\n\t\tborderChecked: palette.brand[500],\n\t\tborderError: palette.error[400],\n\t\tbackgroundChecked: palette.brand[500],\n\t\ttextLabel: palette.neutral[7],\n\t\ttextLabelSupporting: palette.neutral[46],\n\t\ttextIndeterminate: palette.neutral[46],\n\t},\n\t...userFeedbackThemeDefault,\n\t...labelThemeDefault,\n};\n\nexport const checkboxThemeBrand = {\n\tcheckbox: {\n\t\tborder: palette.brand[800],\n\t\tborderHover: palette.neutral[100],\n\t\tborderChecked: palette.neutral[100],\n\t\tborderError: palette.error[500],\n\t\tbackgroundChecked: palette.neutral[100],\n\t\ttextLabel: palette.neutral[100],\n\t\ttextLabelSupporting: palette.brand[800],\n\t\ttextIndeterminate: palette.brand[800],\n\t},\n\t...userFeedbackThemeBrand,\n\t...labelThemeBrand,\n};\n","import type { SerializedStyles } from '@emotion/react';\nimport { css } from '@emotion/react';\nimport {\n\tappearance,\n\tfocusHalo,\n\theight,\n\tresets,\n\tspace,\n\ttextSans,\n\ttransitions,\n\twidth,\n} from '@guardian/source-foundations';\nimport { checkboxThemeDefault } from './theme';\n\nexport const fieldset = css`\n\t${resets.fieldset};\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex-direction: column;\n`;\n\nexport const checkboxContainer = (\n\tcheckbox = checkboxThemeDefault.checkbox,\n\terror = false,\n): SerializedStyles => css`\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: center;\n\tmin-height: ${height.inputMedium}px;\n\tcursor: pointer;\n\n\t&:hover {\n\t\tinput {\n\t\t\tborder-color: ${error ? checkbox.borderError : checkbox.borderHover};\n\t\t}\n\t}\n\t&:active {\n\t\tinput {\n\t\t\tborder-color: ${checkbox.borderHover};\n\t\t}\n\t}\n`;\n\nexport const label: SerializedStyles = css`\n\tcursor: pointer;\n`;\n\nexport const checkboxContainerWithSupportingText = css`\n\talign-items: flex-start;\n\tmargin-bottom: ${space[3]}px;\n`;\n\nexport const checkbox = (\n\tcheckbox = checkboxThemeDefault.checkbox,\n\terror = false,\n): SerializedStyles => css`\n\tflex: 0 0 auto;\n\tbox-sizing: border-box;\n\tdisplay: inline-block;\n\tcursor: pointer;\n\twidth: ${width.inputXsmall}px;\n\theight: ${height.inputXsmall}px;\n\tmargin: 0 ${space[2]}px 0 0;\n\n\tborder: 2px solid currentColor;\n\tposition: relative;\n\ttransition: box-shadow ${transitions.short};\n\ttransition-delay: 0.08s;\n\tcolor: ${checkbox.border};\n\n\t&:focus {\n\t\t${focusHalo};\n\t}\n\n\t@supports (${appearance}) {\n\t\tappearance: none;\n\t\t&:checked {\n\t\t\tborder: ${error\n\t\t\t\t? `4px solid ${checkbox.borderError}`\n\t\t\t\t: `2px solid ${checkbox.borderChecked}`};\n\t\t\t& ~ span:before {\n\t\t\t\tright: 0;\n\t\t\t}\n\t\t\t& ~ span:after {\n\t\t\t\ttop: 0;\n\t\t\t}\n\t\t}\n\n\t\t&:indeterminate {\n\t\t\t&:after {\n\t\t\t\t${textSans.xlarge()};\n\t\t\t\tcolor: ${checkbox.textIndeterminate};\n\t\t\t\tcontent: '-';\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: -${space[2]}px;\n\t\t\t\tleft: 5px;\n\t\t\t\tz-index: 5;\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport const labelText = (\n\tcheckbox = checkboxThemeDefault.checkbox,\n): SerializedStyles => css`\n\t${textSans.medium()};\n\tcolor: ${checkbox.textLabel};\n\twidth: 100%;\n`;\n\nexport const labelTextWithSupportingText = css`\n\t${textSans.medium()};\n`;\n\nexport const supportingText = (\n\tcheckbox = checkboxThemeDefault.checkbox,\n): SerializedStyles => css`\n\t${textSans.small()};\n\tcolor: ${checkbox.textLabelSupporting};\n`;\n\nexport const tick = (\n\tcheckbox = checkboxThemeDefault.checkbox,\n): SerializedStyles => css`\n\t@supports (\n\t\t(appearance: none) or (-webkit-appearance: none) or (-moz-appearance: none)\n\t) {\n\t\t/* overall positional properties */\n\t\tposition: absolute;\n\t\twidth: 6px;\n\t\theight: 12px;\n\t\ttransform: rotate(45deg);\n\t\t/*\n\t\t\tthese properties are very sensitive and are overridden\n\t\t\tif the checkbox has a label or supporting text\n\t\t*/\n\t\ttop: 14px;\n\t\tleft: 9px;\n\t\t/*\n\t\t\tthis prevents simulated click events to the checkbox, eg from Selenium tests\n\t\t\tfrom being intercepted by the tick\n\t\t*/\n\t\tpointer-events: none;\n\n\t\t/* the checkmark ✓ */\n\t\t&:after,\n\t\t&:before {\n\t\t\tposition: absolute;\n\t\t\tdisplay: block;\n\t\t\tbackground-color: ${checkbox.backgroundChecked};\n\t\t\ttransition: all ${transitions.short} ease-in-out;\n\t\t\tcontent: '';\n\t\t}\n\n\t\t/* the short side */\n\t\t&:before {\n\t\t\theight: 2px;\n\t\t\tbottom: 0;\n\t\t\tleft: 0;\n\t\t\tright: 100%;\n\t\t\ttransition-delay: 0.05s;\n\t\t}\n\n\t\t/* the long side */\n\t\t&:after {\n\t\t\tbottom: 0;\n\t\t\tright: 0;\n\t\t\ttop: 100%;\n\t\t\twidth: 2px;\n\t\t\ttransition-delay: 0.1s;\n\t\t}\n\t}\n`;\n\nexport const tickWithLabelText = css`\n\t@supports (${appearance}) {\n\t\ttop: 15px;\n\t\tleft: 9px;\n\t}\n`;\n\nexport const tickWithSupportingText = css`\n\t@supports (${appearance}) {\n\t\ttop: 5px;\n\t}\n`;\n\nexport const errorCheckbox = (\n\tcheckbox = checkboxThemeDefault.checkbox,\n): SerializedStyles => css`\n\tborder: 4px solid ${checkbox.borderError};\n\n\t&:not(:checked):hover,\n\t&:active {\n\t\tborder: 2px solid ${checkbox.borderHover};\n\t}\n`;\n","import type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { SupportingText } from './SupportingText';\nimport { Text } from './Text';\nimport type { LabelProps } from './types';\n\n/**\n * [Storybook](https://guardian.github.io/csnx/?path=/story/source-react-components_label--default-default-theme) •\n * [Design System](https://theguardian.design/2a1e5182b/p/40151e-label/b/86af7d) •\n * [GitHub](https://github.com/guardian/csnx/tree/main/libs/@guardian/source-react-components/src/label/Label.tsx) •\n * [NPM](https://www.npmjs.com/package/@guardian/source-react-components)\n *\n * A label describes a user input field.\n *\n * Label is used by other Source components, such as TextInput. Only use Label\n * if you are building your own form components.\n *\n * The following themes are supported: `light`, `brand`.\n * */\nexport const Label = ({\n\ttext,\n\tsupporting,\n\toptional = false,\n\thideLabel = false,\n\tcssOverrides,\n\tchildren,\n\t...props\n}: LabelProps): EmotionJSX.Element => {\n\treturn (\n\t\t<label css={cssOverrides} {...props}>\n\t\t\t<Text hideLabel={hideLabel} text={text} optional={optional} />\n\t\t\t{supporting ? (\n\t\t\t\t<SupportingText hideLabel={hideLabel}>{supporting}</SupportingText>\n\t\t\t) : (\n\t\t\t\t''\n\t\t\t)}\n\t\t\t{children}\n\t\t</label>\n\t);\n};\n","import { palette } from '@guardian/source-foundations';\nimport { userFeedbackThemeDefault } from '../user-feedback/theme';\n\nexport const selectThemeDefault = {\n\tselect: {\n\t\ttextUserInput: palette.neutral[7],\n\t\ttextLabel: palette.neutral[7],\n\t\ttextLabelOptional: palette.neutral[46],\n\t\ttextLabelSupporting: palette.neutral[46],\n\t\ttextError: palette.neutral[7],\n\t\ttextSuccess: palette.success[400],\n\t\tbackgroundInput: palette.neutral[100],\n\t\tborder: palette.neutral[46],\n\t\tborderActive: palette.focus[400],\n\t\tborderError: palette.error[400],\n\t\tborderSuccess: palette.success[400],\n\t},\n\t...userFeedbackThemeDefault,\n};\n","import type { SerializedStyles } from '@emotion/react';\nimport { css } from '@emotion/react';\nimport {\n\tappearance,\n\tfocusHalo,\n\theight,\n\tspace,\n\ttextSans,\n\twidth,\n} from '@guardian/source-foundations';\nimport { selectThemeDefault } from './theme';\n\nexport const errorInput = (\n\tselect = selectThemeDefault.select,\n): SerializedStyles => css`\n\tborder: 4px solid ${select.borderError};\n\tcolor: ${select.textError};\n\t/* When select is active and in an error state, we want the border to remain the same. */\n\t&:active {\n\t\tborder: 4px solid ${select.borderError};\n\t}\n`;\n\nexport const successInput = (\n\tselect = selectThemeDefault.select,\n): SerializedStyles => css`\n\tborder: 4px solid ${select.borderSuccess};\n\tcolor: ${select.textSuccess};\n\t/* When select is active and in an success state, we want the border to remain the same. */\n\t&:active {\n\t\tborder: 4px solid ${select.borderSuccess};\n\t}\n`;\n\nexport const errorChevron = (\n\tselect = selectThemeDefault.select,\n): SerializedStyles => css`\n\tsvg {\n\t\tfill: ${select.textError};\n\t}\n`;\n\nexport const successChevron = (\n\tselect = selectThemeDefault.select,\n): SerializedStyles => css`\n\tsvg {\n\t\tfill: ${select.textSuccess};\n\t}\n`;\n\nexport const selectWrapper = (\n\tselect = selectThemeDefault.select,\n): SerializedStyles => css`\n\tposition: relative;\n\n\tsvg {\n\t\tdisplay: none;\n\t\tposition: absolute;\n\t\tright: ${space[3]}px;\n\t\ttop: ${space[2]}px;\n\t\twidth: ${width.iconMedium}px;\n\t\theight: ${height.iconMedium}px;\n\t\tfill: ${select.textUserInput};\n\t\tpointer-events: none;\n\t}\n`;\n\nexport const select = (select = selectThemeDefault.select): SerializedStyles =>\n\tcss`\n\t\tcolor: ${select.textUserInput};\n\t\tbox-sizing: border-box;\n\t\theight: ${height.inputMedium}px;\n\t\twidth: 100%;\n\t\t${textSans.medium()};\n\t\tbackground-color: ${select.backgroundInput};\n\t\tborder: 2px solid ${select.border};\n\t\tpadding-left: ${space[2]}px;\n\n\t\t@supports (${appearance}) {\n\t\t\tappearance: none;\n\t\t\tpadding-right: ${space[2]}px;\n\n\t\t\t& ~ svg {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t}\n\n\t\t&:focus {\n\t\t\tborder: 2px solid ${select.borderActive};\n\t\t\t${focusHalo};\n\t\t}\n\n\t\t&:invalid {\n\t\t\t${errorInput(select)};\n\t\t}\n\t`;\n","import type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { descriptionId, generateSourceId } from '@guardian/source-foundations';\nimport type { SelectHTMLAttributes } from 'react';\nimport { SvgChevronDownSingle } from '../../vendor/icons/SvgChevronDownSingle';\nimport type { Props } from '../@types/Props';\nimport type { Theme } from '../@types/Theme';\nimport { Label } from '../label/Label';\nimport { InlineError } from '../user-feedback/InlineError';\nimport { InlineSuccess } from '../user-feedback/InlineSuccess';\nimport {\n\terrorChevron,\n\terrorInput,\n\tselect,\n\tselectWrapper,\n\tsuccessChevron,\n\tsuccessInput,\n} from './styles';\n\nexport interface SelectProps\n\textends SelectHTMLAttributes<HTMLSelectElement>,\n\t\tProps {\n\tid?: string;\n\t/**\n\t * Appears above the select box\n\t */\n\tlabel: string;\n\t/**\n\t * Adds the word \"Optional\" after the label\n\t */\n\toptional?: boolean;\n\t/**\n\t * Visually hides the label and the \"Optional\" text set by the `optional` flag.\n\t */\n\thideLabel?: boolean;\n\t/**\n\t * Additional text that appears below the label\n\t */\n\tsupporting?: string;\n\t/**\n\t * Whether error styling should apply to this select box. The string appears as an inline error message.\n\t */\n\terror?: string;\n\t/**\n\t * Whether success styling should apply to this select box. The string appears as an inline success message. This prop should not have a value set at the same time as the error prop. In the event that both are set, errors take precedence.\n\t */\n\tsuccess?: string;\n\tchildren: JSX.Element | JSX.Element[];\n}\n\n/**\n * [Storybook](https://guardian.github.io/csnx/?path=/story/source-react-components_select--default-default-theme) •\n * [Design System](https://theguardian.design/2a1e5182b/p/663879-select-box/b/10875c) •\n * [GitHub](https://github.com/guardian/csnx/tree/main/libs/@guardian/source-react-components/src/select/Select.tsx) •\n * [NPM](https://www.npmjs.com/package/@guardian/source-react-components)\n *\n * Select boxes allow the user to make a choice from a long list of similar options.\n *\n * The following themes are supported: `light`\n */\nexport const Select = ({\n\tid,\n\tlabel: labelText,\n\toptional = false,\n\thideLabel = false,\n\tsupporting,\n\terror,\n\tsuccess,\n\tcssOverrides,\n\tchildren,\n\t...props\n}: SelectProps): EmotionJSX.Element => {\n\tconst selectId = id ?? generateSourceId();\n\treturn (\n\t\t<>\n\t\t\t<Label\n\t\t\t\ttext={labelText}\n\t\t\t\toptional={!!optional}\n\t\t\t\tsupporting={supporting}\n\t\t\t\thideLabel={hideLabel}\n\t\t\t\thtmlFor={selectId}\n\t\t\t>\n\t\t\t\t{error && (\n\t\t\t\t\t<InlineError id={descriptionId(selectId)}>{error}</InlineError>\n\t\t\t\t)}\n\t\t\t\t{!error && success && (\n\t\t\t\t\t<InlineSuccess id={descriptionId(selectId)}>{success}</InlineSuccess>\n\t\t\t\t)}\n\t\t\t</Label>\n\t\t\t<div\n\t\t\t\tcss={(theme: Theme) => [\n\t\t\t\t\tselectWrapper(theme.select),\n\t\t\t\t\terror ? errorChevron(theme.select) : '',\n\t\t\t\t\t!error && success ? successChevron(theme.select) : '',\n\t\t\t\t]}\n\t\t\t>\n\t\t\t\t<select\n\t\t\t\t\tcss={(theme: Theme) => [\n\t\t\t\t\t\tselect(theme.select),\n\t\t\t\t\t\terror ? errorInput(theme.select) : '',\n\t\t\t\t\t\t!error && success ? successInput(theme.select) : '',\n\t\t\t\t\t\tcssOverrides,\n\t\t\t\t\t]}\n\t\t\t\t\taria-required={!optional}\n\t\t\t\t\taria-invalid={!!error}\n\t\t\t\t\taria-describedby={error || success ? descriptionId(selectId) : ''}\n\t\t\t\t\tid={selectId}\n\t\t\t\t\t{...props}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</select>\n\t\t\t\t<SvgChevronDownSingle />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n","import { css } from '@emotion/react';\nimport {\n\tfocusHalo,\n\tpalette,\n\tspace,\n\ttextSans,\n} from '@guardian/source-foundations';\n\nexport const errorInput = css`\n\tborder: 4px solid ${palette.error[400]};\n\tcolor: ${palette.neutral[7]};\n\tmargin-top: 0;\n`;\n\nexport const successInput = css`\n\tborder: 4px solid ${palette.success[400]};\n\tcolor: ${palette.success[400]};\n\tmargin-top: 0;\n`;\n\nexport const textArea = css`\n\tbox-sizing: border-box;\n\t${textSans.medium()};\n\tcolor: ${palette.neutral[7]};\n\tbackground-color: ${palette.neutral[100]};\n\tborder: 2px solid ${palette.neutral[46]};\n\tpadding: ${space[2]}px ${space[2]}px 0 ${space[2]}px;\n\n\t&:focus {\n\t\tborder: 2px solid ${palette.brand[500]};\n\t\t${focusHalo};\n\t}\n\n\t&:invalid {\n\t\t/* Remove styling of invalid input elements that gets applied in Firefox */\n\t\tbox-shadow: none;\n\n\t\t/*\n\t\tWe automatically apply error styling to fields in an invalid state,\n\t\tbut stop short of applying it to empty required fields.\n\n\t\tNote: the following class will only be applied to a controlled\n\t\tcomponent: https://reactjs.org/docs/forms.html#controlled-components\n\t\t*/\n\t\t.src-has-value {\n\t\t\t${errorInput}\n\t\t}\n\t}\n`;\n\nexport const labelMargin = css`\n\tmargin-top: ${space[1]}px;\n`;\n\nexport const supportingTextMargin = css`\n\tmargin-top: 6px;\n`;\n\nexport const inlineMessageMargin = css`\n\tmargin-top: 2px;\n`;\n\nexport const widthFluid = css`\n\twidth: 100%;\n`;\n","import type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { descriptionId, generateSourceId } from '@guardian/source-foundations';\nimport type { InputHTMLAttributes } from 'react';\nimport type { Props } from '../@types/Props';\nimport { Label } from '../label/Label';\nimport { InlineError } from '../user-feedback/InlineError';\nimport { InlineSuccess } from '../user-feedback/InlineSuccess';\nimport {\n\terrorInput,\n\tinlineMessageMargin,\n\tlabelMargin,\n\tsuccessInput,\n\tsupportingTextMargin,\n\ttextArea,\n\twidthFluid,\n} from './styles';\n\nexport interface TextAreaProps\n\textends InputHTMLAttributes<HTMLTextAreaElement>,\n\t\tProps {\n\tid?: string;\n\t/**\n\t * The contents of the text area. This is necessary when using the [controlled approach](https://reactjs.org/docs/forms.html#controlled-components) to form state management.\n\t *\n\t * _Note: if you pass the `value` prop, you MUST also pass an `onChange` handler, or the field will be rendered as read-only._\n\t */\n\tvalue?: string;\n\t/**\n\t * Appears above the text area\n\t */\n\tlabel: string;\n\t/**\n\t * Adds the word \"Optional\" after the label. Non-optional fields are rendered with the `required` attribute.\n\t */\n\toptional?: boolean;\n\t/**\n\t * Visually hides the label and the \"Optional\" text set by the `optional` flag.\n\t */\n\thideLabel?: boolean;\n\t/**\n\t * Additional text that appears below the label\n\t */\n\tsupporting?: string;\n\t/**\n\t * Appears as an inline error message.\n\t */\n\terror?: string;\n\t/**\n\t * Appears as an inline success message.\n\t * This prop should not have a value set at the same time as the error prop. In the event that both are set, errors take precedence.\n\t */\n\tsuccess?: string;\n\t/**\n\t * Specify the number of rows the component should display by default.\n\t */\n\trows?: number;\n}\n\n/**\n * [Storybook](https://guardian.github.io/csnx/?path=/story/source-react-components_textarea--default-default-theme) •\n * [Design System](https://theguardian.design/2a1e5182b/p/567182-text-area/b/42916b) •\n * [GitHub](https://github.com/guardian/csnx/tree/main/libs/@guardian/source-react-components/src/text-area/TextArea.tsx) •\n * [NPM](https://www.npmjs.com/package/@guardian/source-react-components)\n *\n * The following themes are supported: `light`\n */\nexport const TextArea = ({\n\tid,\n\tlabel: labelText,\n\toptional = false,\n\thideLabel = false,\n\tsupporting,\n\terror,\n\tsuccess,\n\tcssOverrides,\n\trows = 3,\n\tclassName,\n\tvalue,\n\t...props\n}: TextAreaProps): EmotionJSX.Element => {\n\tconst textAreaId = id ?? generateSourceId();\n\tconst getClassName = () => {\n\t\tconst HAS_VALUE_CLASS = 'src-has-value';\n\n\t\tif (className) {\n\t\t\treturn `${className}${value ? ` ${HAS_VALUE_CLASS}` : ''}`;\n\t\t}\n\n\t\tif (value) {\n\t\t\treturn HAS_VALUE_CLASS;\n\t\t}\n\n\t\treturn undefined;\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Label\n\t\t\t\ttext={labelText}\n\t\t\t\tsupporting={supporting}\n\t\t\t\toptional={!!optional}\n\t\t\t\thideLabel={hideLabel}\n\t\t\t\thtmlFor={textAreaId}\n\t\t\t>\n\t\t\t\t{error && (\n\t\t\t\t\t<div css={inlineMessageMargin}>\n\t\t\t\t\t\t<InlineError id={descriptionId(textAreaId)}>{error}</InlineError>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{!error && success && (\n\t\t\t\t\t<div css={inlineMessageMargin}>\n\t\t\t\t\t\t<InlineSuccess id={descriptionId(textAreaId)}>\n\t\t\t\t\t\t\t{success}\n\t\t\t\t\t\t</InlineSuccess>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Label>\n\t\t\t<textarea\n\t\t\t\tcss={[\n\t\t\t\t\twidthFluid,\n\t\t\t\t\ttextArea,\n\t\t\t\t\tsupporting ? supportingTextMargin : labelMargin,\n\t\t\t\t\terror ? errorInput : '',\n\t\t\t\t\t!error && success ? successInput : '',\n\t\t\t\t\tcssOverrides,\n\t\t\t\t]}\n\t\t\t\tid={textAreaId}\n\t\t\t\taria-required={!optional}\n\t\t\t\taria-invalid={!!error}\n\t\t\t\taria-describedby={error || success ? descriptionId(textAreaId) : ''}\n\t\t\t\trequired={!optional}\n\t\t\t\trows={rows}\n\t\t\t\tclassName={getClassName()}\n\t\t\t\tvalue={value}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t</>\n\t);\n};\n","import { palette } from '@guardian/source-foundations';\nimport { userFeedbackThemeDefault } from '../user-feedback/theme';\n\nexport const textInputThemeDefault = {\n\ttextInput: {\n\t\ttextUserInput: palette.neutral[7],\n\t\ttextLabel: palette.neutral[7],\n\t\ttextLabelOptional: palette.neutral[46],\n\t\ttextLabelSupporting: palette.neutral[46],\n\t\ttextError: palette.neutral[7],\n\t\ttextSuccess: palette.success[400],\n\t\tbackgroundInput: palette.neutral[100],\n\t\tborder: palette.neutral[46],\n\t\tborderActive: palette.focus[400],\n\t\tborderError: palette.error[400],\n\t\tborderSuccess: palette.success[400],\n\t},\n\t...userFeedbackThemeDefault,\n};\n","import type { SerializedStyles } from '@emotion/react';\nimport { css } from '@emotion/react';\nimport {\n\tfocusHalo,\n\theight,\n\tspace,\n\ttextSans,\n} from '@guardian/source-foundations';\nimport { textInputThemeDefault } from './theme';\n\nexport const errorInput = (\n\ttextInput = textInputThemeDefault.textInput,\n): SerializedStyles => css`\n\tborder: 4px solid ${textInput.borderError};\n\tcolor: ${textInput.textError};\n\tmargin-top: 0;\n`;\n\nexport const successInput = (\n\ttextInput = textInputThemeDefault.textInput,\n): SerializedStyles => css`\n\tborder: 4px solid ${textInput.borderSuccess};\n\tcolor: ${textInput.textSuccess};\n\tmargin-top: 0;\n`;\n\nexport const textInput = (\n\ttextInput = textInputThemeDefault.textInput,\n): SerializedStyles =>\n\tcss`\n\t\tbox-sizing: border-box;\n\t\theight: ${height.inputMedium}px;\n\t\t${textSans.medium()};\n\t\tcolor: ${textInput.textUserInput};\n\t\tbackground-color: ${textInput.backgroundInput};\n\t\tborder: 2px solid ${textInput.border};\n\t\tpadding: 0 ${space[2]}px;\n\n\t\t&:focus {\n\t\t\tborder: 2px solid ${textInput.borderActive};\n\t\t\t${focusHalo};\n\t\t}\n\n\t\t&:invalid {\n\t\t\t/* Remove styling of invalid input elements that gets applied in Firefox */\n\t\t\tbox-shadow: none;\n\n\t\t\t/*\n\t\t\tWe automatically apply error styling to fields in an invalid state,\n\t\t\tbut stop short of applying it to empty required fields.\n\t\t\t*/\n\t\t\t&[value]:not([value='']) {\n\t\t\t\t${errorInput(textInput)};\n\t\t\t}\n\t\t}\n\t`;\n\nexport const labelMargin = css`\n\tmargin-top: ${space[1]}px;\n`;\n\nexport const supportingTextMargin = css`\n\tmargin-top: 6px;\n`;\n\nexport const inlineMessageMargin = css`\n\tmargin-top: 2px;\n`;\n\nexport const widthFluid = css`\n\twidth: 100%;\n`;\n\nexport const width30 = css`\n\twidth: 40ex;\n\tmax-width: 100%; /* prevent overflow on narrow viewports */\n`;\n\nexport const width10 = css`\n\twidth: 18ex;\n`;\n\nexport const width4 = css`\n\twidth: 9ex;\n`;\n","import type { SerializedStyles } from '@emotion/react';\nimport type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { descriptionId, generateSourceId } from '@guardian/source-foundations';\nimport type { InputHTMLAttributes } from 'react';\nimport type { Props } from '../@types/Props';\nimport type { Theme } from '../@types/Theme';\nimport { Label } from '../label/Label';\nimport { InlineError } from '../user-feedback/InlineError';\nimport { InlineSuccess } from '../user-feedback/InlineSuccess';\nimport {\n\terrorInput,\n\tinlineMessageMargin,\n\tlabelMargin,\n\tsuccessInput,\n\tsupportingTextMargin,\n\ttextInput,\n\twidth10,\n\twidth30,\n\twidth4,\n\twidthFluid,\n} from './styles';\n\nexport type Width = 30 | 10 | 4;\n\nconst widths: {\n\t[key in Width]: SerializedStyles;\n} = {\n\t30: width30,\n\t10: width10,\n\t4: width4,\n};\n\nexport interface TextInputProps\n\textends Omit<InputHTMLAttributes<HTMLInputElement>, 'value'>,\n\t\tProps {\n\tid?: string;\n\t/**\n\t * Appears above the text input\n\t */\n\tlabel: string;\n\t/**\n\t * Adds the word \"Optional\" after the label. Non-optional fields are rendered with the `required` attribute.\n\t */\n\toptional?: boolean;\n\t/**\n\t * Visually hides the label and the \"Optional\" text set by the `optional` flag.\n\t */\n\thideLabel?: boolean;\n\t/**\n\t * Additional text that appears below the label\n\t */\n\tsupporting?: string;\n\t/**\n\t * Determines the width of a fixed-length field, based on the specified character length of the user input. If unspecified,\n\t * the width will default to 100% of the field's container.\n\t */\n\twidth?: Width;\n\t/**\n\t * Appears as an inline error message.\n\t */\n\terror?: string;\n\t/**\n\t * Appears as an inline success message.\n\t * This prop should not have a value set at the same time as the error prop. In the event that both are set, errors take precedence.\n\t */\n\tsuccess?: string;\n\t/**\n\t * The contents of the text input field. This is necessary when using the [controlled approach](https://reactjs.org/docs/forms.html#controlled-components) to form state management.\n\t *\n\t * _Note: if you pass the `value` prop, you MUST also pass an `onChange` handler, or the field will be rendered as read-only_\n\t */\n\tvalue?: string;\n}\n\n/**\n * [Storybook](https://guardian.github.io/csnx/?path=/story/source-react-components_textinput--default-default-theme) •\n * [Design System](https://theguardian.design/2a1e5182b/p/097455-text-input-field/b/050445) •\n * [GitHub](https://github.com/guardian/csnx/tree/main/libs/@guardian/source-react-components/src/text-input/TextInput.tsx) •\n * [NPM](https://www.npmjs.com/package/@guardian/source-react-components)\n *\n * Single line fields that allow users to enter freeform data.\n *\n * The following themes are supported: `light`\n */\nexport const TextInput = ({\n\tid,\n\tlabel: labelText,\n\toptional = false,\n\thideLabel = false,\n\tsupporting,\n\twidth,\n\terror,\n\tsuccess,\n\tcssOverrides,\n\t...props\n}: TextInputProps): EmotionJSX.Element => {\n\tconst textInputId = id ?? generateSourceId();\n\treturn (\n\t\t<>\n\t\t\t<Label\n\t\t\t\ttext={labelText}\n\t\t\t\toptional={!!optional}\n\t\t\t\thideLabel={hideLabel}\n\t\t\t\tsupporting={supporting}\n\t\t\t\thtmlFor={textInputId}\n\t\t\t>\n\t\t\t\t{error && (\n\t\t\t\t\t<div css={inlineMessageMargin}>\n\t\t\t\t\t\t<InlineError id={descriptionId(textInputId)}>{error}</InlineError>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{!error && success && (\n\t\t\t\t\t<div css={inlineMessageMargin}>\n\t\t\t\t\t\t<InlineSuccess id={descriptionId(textInputId)}>\n\t\t\t\t\t\t\t{success}\n\t\t\t\t\t\t</InlineSuccess>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Label>\n\t\t\t<input\n\t\t\t\tcss={(theme: Theme) => [\n\t\t\t\t\twidth ? widths[width] : widthFluid,\n\t\t\t\t\ttextInput(theme.textInput),\n\t\t\t\t\tsupporting ? supportingTextMargin : labelMargin,\n\t\t\t\t\terror ? errorInput(theme.textInput) : '',\n\t\t\t\t\t!error && success ? successInput(theme.textInput) : '',\n\t\t\t\t\tcssOverrides,\n\t\t\t\t]}\n\t\t\t\ttype=\"text\"\n\t\t\t\tid={textInputId}\n\t\t\t\taria-required={!optional}\n\t\t\t\taria-invalid={!!error}\n\t\t\t\taria-describedby={error || success ? descriptionId(textInputId) : ''}\n\t\t\t\trequired={!optional}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t</>\n\t);\n};\n","import type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { SvgTickRound } from '../../vendor/icons/SvgTickRound';\nimport type { Theme } from '../@types/Theme';\nimport { inlineSuccess } from './styles';\nimport type { UserFeedbackProps } from './types';\n\n/**\n * [Storybook](https://guardian.github.io/csnx/?path=/story/source-react-components_inlinesuccess--inline-success-default-theme) •\n * [Design System](https://theguardian.design/2a1e5182b/p/108ed3-user-feedback/b/3803b4) •\n * [GitHub](https://github.com/guardian/csnx/tree/main/libs/@guardian/source-react-components/src/user-feedback/InlineSuccess.tsx) •\n * [NPM](https://www.npmjs.com/package/@guardian/source-react-components)\n *\n * Success messages acknowledge a user's action and do not require further action. They inform the user of processes happening in the background. For example, \"Your account details have been saved.\"\n *\n * The following themes are supported: `default`, `brand`\n */\nexport const InlineSuccess = ({\n\tchildren,\n\tcssOverrides,\n\t...props\n}: UserFeedbackProps): EmotionJSX.Element => (\n\t<span\n\t\tcss={(theme: Theme) => [inlineSuccess(theme.userFeedback), cssOverrides]}\n\t\trole=\"alert\"\n\t\t{...props}\n\t>\n\t\t<SvgTickRound />\n\t\t{children}\n\t</span>\n);\n","// DO NOT EDIT\n// this file is auto-generated by packages/@guardian/source-react-components/scripts/create-icons/index.ts\nimport { css } from '@emotion/react';\nimport type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { iconSize, visuallyHidden } from '@guardian/source-foundations';\nimport type { IconProps } from '../../src/@types/Icons';\n\nconst Svg = ({ size }: IconProps): EmotionJSX.Element => (\n\t<svg\n\t\twidth={size ? iconSize[size] : undefined}\n\t\theight={undefined}\n\t\tviewBox=\"-3 -3 30 30\"\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\tfocusable={false}\n\t\taria-hidden={true}\n\t>\n\t\t<path\n\t\t\tfillRule=\"evenodd\"\n\t\t\tclipRule=\"evenodd\"\n\t\t\td=\"m1 7.224 10.498 10.498h1.004L23 7.224l-.98-.954L12 14.708 1.98 6.27 1 7.224Z\"\n\t\t/>\n\t</svg>\n);\n\nexport const SvgChevronDownSingle = ({\n\tsize,\n\tisAnnouncedByScreenReader = false,\n}: IconProps): EmotionJSX.Element => (\n\t<>\n\t\t<Svg size={size} />\n\t\t{isAnnouncedByScreenReader ? (\n\t\t\t<span\n\t\t\t\tcss={css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\tExpand to show more\n\t\t\t</span>\n\t\t) : (\n\t\t\t''\n\t\t)}\n\t</>\n);\n","// DO NOT EDIT\n// this file is auto-generated by packages/@guardian/source-react-components/scripts/create-icons/index.ts\nimport { css } from '@emotion/react';\nimport type { EmotionJSX } from '@emotion/react/types/jsx-namespace';\nimport { iconSize, visuallyHidden } from '@guardian/source-foundations';\nimport type { IconProps } from '../../src/@types/Icons';\n\nconst Svg = ({ size }: IconProps): EmotionJSX.Element => (\n\t<svg\n\t\twidth={size ? iconSize[size] : undefined}\n\t\theight={undefined}\n\t\tviewBox=\"-3 -3 30 30\"\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\tfocusable={false}\n\t\taria-hidden={true}\n\t>\n\t\t<path\n\t\t\tfillRule=\"evenodd\"\n\t\t\tclipRule=\"evenodd\"\n\t\t\td=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Zm-1.773-7.853-2.27-2.17-.8.8 2.709 3.791h.454l7.455-7.716-.82-.8-6.728 6.095Z\"\n\t\t/>\n\t</svg>\n);\n\nexport const SvgTickRound = ({\n\tsize,\n\tisAnnouncedByScreenReader = false,\n}: IconProps): EmotionJSX.Element => (\n\t<>\n\t\t<Svg size={size} />\n\t\t{isAnnouncedByScreenReader ? (\n\t\t\t<span\n\t\t\t\tcss={css`\n\t\t\t\t\t${visuallyHidden}\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\tTicked\n\t\t\t</span>\n\t\t) : (\n\t\t\t''\n\t\t)}\n\t</>\n);\n"],"names":["ArticleDisplay","_jsx","checkbox","hasSupportingText","jsx","css","supportingText","checkboxId","id","generateSourceId","jsxs","_jsxs","supporting","error","errorCheckbox","cssOverrides","setIndeterminate","el","checked","tick","labelContent","tickWithSupportingText","groupId","legend","label","text","message","InlineError","fieldset","children","child","border","borderHover","palette","borderChecked","borderError","backgroundChecked","textLabel","textLabelSupporting","neutral","textIndeterminate","userFeedbackThemeDefault","labelThemeDefault","checkboxThemeBrand","userFeedbackThemeBrand","labelThemeBrand","resets","checkboxContainer","checkboxContainerWithSupportingText","height","space","labelText","textSans","labelTextWithSupportingText","transitions","tickWithLabelText","appearance","props","Text","select","textUserInput","textLabelOptional","textError","textSuccess","backgroundInput","borderActive","borderSuccess","successInput","errorChevron","successChevron","selectWrapper","width","iconMedium","focusHalo","selectId","Label","_Fragment","success","errorInput","theme","textArea","labelMargin","supportingTextMargin","inlineMessageMargin","widthFluid","HAS_VALUE_CLASS","className","textInput","width30","width10","width4","textInputId","SvgChevronDownSingle","size","isAnnouncedByScreenReader","visuallyHidden","SvgTickRound"],"sourceRoot":""}