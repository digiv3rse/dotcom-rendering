{"version":3,"file":"ShowHideContainers-importable.legacy.0a2f238daa2bf95977e7.js","mappings":"sOAkBaA,EAAqB,WAkC9B,OAjCAC,EAAAA,EAAAA,IAAQ,WACJ,IAPEC,EAOIC,EAjBY,SAACD,GACvB,SAAKE,EAAAA,EAAAA,GAASF,MAETG,OAAOC,KAAKJ,GAAMK,MAAMC,EAAAA,MAExBH,OAAOI,OAAOP,GAAMK,MAAMC,EAAAA,EAGnC,CAGSE,CADCR,EAAOS,EAAAA,EAAAA,MAAAA,IAAkB,8BAGxBT,EADI,CAAC,EAMFU,EAAkB,SAACC,EAAWC,GAChC,IAAMC,EAAuD,SAA1CD,EAAQE,aAAa,iBAClCC,EAAUC,OAAOC,SAASC,eAAeP,GAC3CE,GACAZ,EAAgBU,GAAa,SAC7BI,SAAAA,EAASI,UAAUC,IAAI,UACvBR,EAAQS,UAAY,OACpBT,EAAQU,aAAa,gBAAiB,SACtCV,EAAQU,aAAa,iBAAkB,UAGvCrB,EAAgBU,GAAa,SAC7BI,SAAAA,EAASI,UAAUI,OAAO,UAC1BX,EAAQS,UAAY,OACpBT,EAAQU,aAAa,gBAAiB,QACtCV,EAAQU,aAAa,iBAAkB,SAE3Cb,EAAAA,EAAAA,MAAAA,IAAkB,4BAA6BR,EACnD,EACAe,OAAOC,SACFO,iBAAiB,2BACjBC,SAAQ,SAACC,GACV,IAAMf,EAAYe,EAAEZ,aAAa,yBAC5BH,IAELe,EAAEC,QAAU,kBAAMjB,EAAgBC,EAAWe,EAAG,EACb,WAA/BzB,EAAgBU,IAChBD,EAAgBC,EAAWe,GAEnC,GACJ,GAAG,KACIE,EAAAA,EAAAA,KAAKC,EAAAA,SAAW,CAAC,EAC5B,C,0DC/Ca9B,EAAU,SAAC+B,EAAMC,GAC1B,OAAoCC,EAAAA,EAAAA,WAAS,GAAM,eAA5CC,EAAU,KAAEC,EAAa,KAC1BC,EAAUJ,EAAQ1B,OAAM,SAAC+B,GAAG,YAAaC,IAARD,CAAiB,KACxDE,EAAAA,EAAAA,YAAU,YACDL,GAAcE,IACfL,IACAI,GAAc,GAEtB,GAAG,CAACD,EAAYE,EAASL,GAC7B,C","sources":["webpack://@guardian/dotcom-rendering/./src/web/components/ShowHideContainers.importable.tsx","webpack://@guardian/dotcom-rendering/./src/web/lib/useOnce.ts"],"sourcesContent":["import { Fragment as _Fragment, jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { isObject, isString, storage } from '@guardian/libs';\nimport { useOnce } from '../lib/useOnce';\nconst isContainerStates = (item) => {\n    if (!isObject(item))\n        return false;\n    if (!Object.keys(item).every(isString))\n        return false;\n    if (!Object.values(item).every(isString))\n        return false;\n    return true;\n};\nconst getContainerStates = () => {\n    const item = storage.local.get(`gu.prefs.container-states`);\n    if (!isContainerStates(item))\n        return {};\n    return item;\n};\nexport const ShowHideContainers = () => {\n    useOnce(() => {\n        const containerStates = getContainerStates();\n        const toggleContainer = (sectionId, element) => {\n            const isExpanded = element.getAttribute('aria-expanded') === 'true';\n            const section = window.document.getElementById(sectionId);\n            if (isExpanded) {\n                containerStates[sectionId] = 'closed';\n                section?.classList.add('hidden');\n                element.innerHTML = 'Show';\n                element.setAttribute('aria-expanded', 'false');\n                element.setAttribute('data-link-name', 'Show');\n            }\n            else {\n                containerStates[sectionId] = 'opened';\n                section?.classList.remove('hidden');\n                element.innerHTML = 'Hide';\n                element.setAttribute('aria-expanded', 'true');\n                element.setAttribute('data-link-name', 'Hide');\n            }\n            storage.local.set(`gu.prefs.container-states`, containerStates);\n        };\n        window.document\n            .querySelectorAll('[data-show-hide-button]')\n            .forEach((e) => {\n            const sectionId = e.getAttribute('data-show-hide-button');\n            if (!sectionId)\n                return;\n            e.onclick = () => toggleContainer(sectionId, e);\n            if (containerStates[sectionId] === 'closed') {\n                toggleContainer(sectionId, e);\n            }\n        });\n    }, []);\n    return _jsx(_Fragment, {});\n};\n","import { useEffect, useState } from 'react';\n/**\n * Ensures that the given task is only run once and only after all items in waitFor are defined\n * @param {Function} task - The task to execute once\n * @param {Array} waitFor - An array of variables that must be defined before the task is executed\n * */\nexport const useOnce = (task, waitFor) => {\n    const [alreadyRun, setAlreadyRun] = useState(false);\n    const isReady = waitFor.every((dep) => dep !== undefined);\n    useEffect(() => {\n        if (!alreadyRun && isReady) {\n            task();\n            setAlreadyRun(true);\n        }\n    }, [alreadyRun, isReady, task]);\n};\n"],"names":["ShowHideContainers","useOnce","item","containerStates","isObject","Object","keys","every","isString","values","isContainerStates","storage","toggleContainer","sectionId","element","isExpanded","getAttribute","section","window","document","getElementById","classList","add","innerHTML","setAttribute","remove","querySelectorAll","forEach","e","onclick","_jsx","_Fragment","task","waitFor","useState","alreadyRun","setAlreadyRun","isReady","dep","undefined","useEffect"],"sourceRoot":""}