{"version":3,"file":"Metrics-importable.modern.1055aedb836ad136896a.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/@guardian/core-web-vitals/esm/roundWithDecimals.js","webpack://@guardian/dotcom-rendering/../node_modules/@guardian/core-web-vitals/esm/index.js","webpack://@guardian/dotcom-rendering/./src/web/components/Metrics.importable.tsx","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/integrate-ima.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useAB.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useAdBlockInUse.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useOnce.ts"],"sourcesContent":["const roundWithDecimals = (value, precision = 6) => {\n    const power = Math.pow(10, precision);\n    return Math.round(value * power) / power;\n};\n\nexport { roundWithDecimals };\n//# sourceMappingURL=roundWithDecimals.js.map\n","import { log } from '@guardian/libs';\nimport { roundWithDecimals } from './roundWithDecimals.js';\n\nvar Endpoints;\n(function (Endpoints) {\n    Endpoints[\"PROD\"] = \"https://performance-events.guardianapis.com/core-web-vitals\";\n    Endpoints[\"CODE\"] = \"https://performance-events.code.dev-guardianapis.com/core-web-vitals\";\n})(Endpoints || (Endpoints = {}));\nconst coreWebVitalsPayload = {\n    browser_id: null,\n    page_view_id: null,\n    fid: null,\n    cls: null,\n    lcp: null,\n    fcp: null,\n    ttfb: null,\n};\nconst teamsForLogging = new Set();\nlet endpoint;\nlet initialised = false;\nconst setEndpoint = (isDev) => {\n    endpoint = isDev ? Endpoints.CODE : Endpoints.PROD;\n};\nlet queued = false;\nconst sendData = () => {\n    if (queued)\n        return;\n    // If we’re missing FCP, the data is unusable in the lake,\n    // So we’re not sending anything.\n    if (coreWebVitalsPayload.fcp === null)\n        return;\n    queued = navigator.sendBeacon(endpoint, JSON.stringify(coreWebVitalsPayload));\n    if (teamsForLogging.size > 0) {\n        teamsForLogging.forEach((team) => {\n            log(team, queued\n                ? 'Core Web Vitals payload successfully queued for transfer'\n                : 'Failed to queue Core Web Vitals payload for transfer');\n        });\n    }\n};\nconst onReport = (metric) => {\n    switch (metric.name) {\n        case 'FCP':\n            // Browser support: Chromium, Firefox, Safari Technology Preview\n            coreWebVitalsPayload.fcp = roundWithDecimals(metric.value);\n            break;\n        case 'CLS':\n            // Browser support: Chromium,\n            coreWebVitalsPayload.cls = roundWithDecimals(metric.value);\n            break;\n        case 'LCP':\n            // Browser support: Chromium\n            coreWebVitalsPayload.lcp = roundWithDecimals(metric.value);\n            break;\n        case 'FID':\n            // Browser support: Chromium, Firefox, Safari, Internet Explorer (with the polyfill)\n            coreWebVitalsPayload.fid = roundWithDecimals(metric.value);\n            break;\n        case 'TTFB':\n            // Browser support: Chromium, Firefox, Safari, Internet Explorer\n            coreWebVitalsPayload.ttfb = roundWithDecimals(metric.value);\n            break;\n    }\n};\nconst listener = (e) => {\n    switch (e.type) {\n        case 'visibilitychange':\n            if (document.visibilityState === 'hidden')\n                sendData();\n            return;\n        case 'pagehide':\n            sendData();\n            return;\n    }\n};\nconst getCoreWebVitals = async () => {\n    const webVitals = await import('web-vitals');\n    const { getCLS, getFCP, getFID, getLCP, getTTFB } = webVitals;\n    getCLS(onReport, { reportAllChanges: false });\n    getFID(onReport);\n    getLCP(onReport);\n    getFCP(onReport);\n    getTTFB(onReport);\n    // Report all available metrics when the page is unloaded or in background.\n    addEventListener('visibilitychange', listener);\n    // Safari does not reliably fire the `visibilitychange` on page unload.\n    addEventListener('pagehide', listener);\n};\n/**\n * Initialise sending Core Web Vitals metrics to a logging endpoint.\n *\n * @param {InitCoreWebVitalsOptions} init - the initialisation options\n * @param init.isDev - used to determine whether to use CODE or PROD endpoints.\n * @param init.browserId - identifies the browser. Usually available via `getCookie({ name: 'bwid' })`. Defaults to `null`\n * @param init.pageViewId - identifies the page view. Usually available on `guardian.config.ophan.pageViewId`. Defaults to `null`\n *\n * @param init.sampling - sampling rate for sending data. Defaults to `0.01`.\n *\n * @param init.team - Optional team to trigger a log event once metrics are queued.\n */\nconst initCoreWebVitals = async ({ browserId = null, pageViewId = null, sampling = 1 / 100, // 1% of page view by default\nisDev, team, }) => {\n    if (initialised) {\n        console.warn('initCoreWebVitals already initialised', 'use the bypassCoreWebVitalsSampling method instead');\n        return;\n    }\n    initialised = true;\n    if (team)\n        teamsForLogging.add(team);\n    setEndpoint(isDev);\n    coreWebVitalsPayload.browser_id = browserId;\n    coreWebVitalsPayload.page_view_id = pageViewId;\n    if (!browserId || !pageViewId) {\n        console.warn('browserId or pageViewId missing from Core Web Vitals.', 'Resulting data cannot be joined to page view tables', { browserId, pageViewId });\n    }\n    if (sampling < 0 || sampling > 1) {\n        console.warn('Core Web Vitals sampling is outside the 0 to 1 range: ', sampling);\n    }\n    if (sampling === 0)\n        console.warn('Core Web Vitals are sampled at 0%');\n    if (sampling === 1)\n        console.warn('Core Web Vitals are sampled at 100%');\n    const pageViewInSample = Math.random() < sampling;\n    const bypassWithHash = window.location.hash === '#bypassCoreWebVitalsSampling';\n    if (pageViewInSample || bypassWithHash)\n        return getCoreWebVitals();\n};\n/**\n * A method to asynchronously send web vitals after initialization.\n * @param team - Optional team to trigger a log event once metrics are queued.\n */\nconst bypassCoreWebVitalsSampling = async (team) => {\n    if (!initialised) {\n        console.warn('initCoreWebVitals not yet initialised');\n        return;\n    }\n    if (team)\n        teamsForLogging.add(team);\n    return getCoreWebVitals();\n};\nconst _ = {\n    coreWebVitalsPayload,\n    sendData,\n    reset: () => {\n        initialised = false;\n        teamsForLogging.clear();\n        queued = false;\n        Object.keys(coreWebVitalsPayload).map((key) => {\n            coreWebVitalsPayload[key] = null;\n        });\n        removeEventListener('visibilitychange', listener);\n        removeEventListener('pagehide', listener);\n    },\n    Endpoints,\n};\n\nexport { _, bypassCoreWebVitalsSampling, initCoreWebVitals };\n//# sourceMappingURL=index.js.map\n","import type { ABTest, ABTestAPI } from '@guardian/ab-core';\nimport {\n\tbypassCommercialMetricsSampling,\n\tinitCommercialMetrics,\n} from '@guardian/commercial-core';\nimport {\n\tbypassCoreWebVitalsSampling,\n\tinitCoreWebVitals,\n} from '@guardian/core-web-vitals';\nimport { getCookie } from '@guardian/libs';\nimport { integrateIma } from '../experiments/tests/integrate-ima';\nimport { useAB } from '../lib/useAB';\nimport { useAdBlockInUse } from '../lib/useAdBlockInUse';\nimport { useOnce } from '../lib/useOnce';\n\ntype Props = {\n\tcommercialMetricsEnabled: boolean;\n};\n\nconst sampling = 1 / 100;\n/** defining this here allows to share this with other metrics */\nconst willRecordCoreWebVitals = Math.random() < sampling;\n\n// For these tests switch off sampling and collect metrics for 100% of views\nconst clientSideTestsToForceMetrics: ABTest[] = [\n\t/* keep array multi-line */\n\tintegrateIma,\n];\n\nexport const Metrics = ({ commercialMetricsEnabled }: Props) => {\n\tconst abTestApi = useAB()?.api;\n\tconst adBlockerInUse = useAdBlockInUse();\n\n\tconst browserId = getCookie({ name: 'bwid', shouldMemoize: true });\n\tconst { pageViewId } = window.guardian.config.ophan;\n\n\tconst isDev =\n\t\t!!window.guardian.config.page.isDev ||\n\t\twindow.location.hostname === 'm.code.dev-theguardian.com' ||\n\t\twindow.location.hostname === (process.env.HOSTNAME ?? 'localhost') ||\n\t\twindow.location.hostname === 'preview.gutools.co.uk';\n\n\tconst userInServerSideTest =\n\t\tObject.keys(window.guardian.config.tests).length > 0;\n\n\tconst shouldBypassSampling = (api: ABTestAPI) =>\n\t\twillRecordCoreWebVitals ||\n\t\tuserInServerSideTest ||\n\t\tclientSideTestsToForceMetrics.some((test) => api.runnableTest(test));\n\n\tuseOnce(\n\t\tfunction coreWebVitals() {\n\t\t\t// abTestApi should be defined inside useOnce\n\t\t\tconst bypassSampling = abTestApi\n\t\t\t\t? shouldBypassSampling(abTestApi)\n\t\t\t\t: false;\n\n\t\t\t/**\n\t\t\t * We rely on `bypassSampling` rather than the built-in sampling,\n\t\t\t * but set the value to greater than 0 to avoid console warnings.\n\t\t\t */\n\t\t\tconst nearZeroSampling = Number.MIN_VALUE;\n\n\t\t\tvoid initCoreWebVitals({\n\t\t\t\tbrowserId,\n\t\t\t\tpageViewId,\n\t\t\t\tisDev,\n\t\t\t\tsampling: nearZeroSampling,\n\t\t\t\tteam: 'dotcom',\n\t\t\t});\n\n\t\t\tif (bypassSampling || isDev)\n\t\t\t\tvoid bypassCoreWebVitalsSampling('commercial');\n\t\t},\n\t\t[abTestApi],\n\t);\n\n\tuseOnce(\n\t\tfunction commercialMetrics() {\n\t\t\t// Only send metrics if the switch is enabled\n\t\t\tif (!commercialMetricsEnabled) return;\n\n\t\t\t// abTestApi should be defined inside useOnce\n\t\t\tconst bypassSampling = abTestApi\n\t\t\t\t? shouldBypassSampling(abTestApi)\n\t\t\t\t: false;\n\n\t\t\tinitCommercialMetrics({\n\t\t\t\tpageViewId,\n\t\t\t\tbrowserId: browserId ?? undefined,\n\t\t\t\tisDev,\n\t\t\t\tadBlockerInUse,\n\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tif (bypassSampling || isDev) {\n\t\t\t\t\t\tvoid bypassCommercialMetricsSampling();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((e) =>\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Error initialising commercial metrics: ${String(e)}`,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t},\n\t\t[abTestApi, adBlockerInUse, commercialMetricsEnabled],\n\t);\n\n\t// We don’t render anything\n\treturn null;\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const integrateIma: ABTest = {\n\tid: 'IntegrateIma',\n\tstart: '2022-07-14',\n\texpiry: '2023-04-04',\n\tauthor: 'Zeke Hunter-Green',\n\tdescription:\n\t\t'Test the commercial impact of replacing YouTube ads with Interactive Media Ads on first-party videos',\n\taudience: 0,\n\taudienceOffset: 0,\n\taudienceCriteria: 'Opt in',\n\tsuccessMeasure:\n\t\t'IMA integration works as expected without adversely affecting pages with videos',\n\tcanRun: () => true,\n\tvariants: [\n\t\t{ id: 'control', test: (): void => {} },\n\t\t{ id: 'variant', test: (): void => {} },\n\t],\n};\n","import type { ABTestAPI, Participations } from '@guardian/ab-core';\nimport { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\n\ntype ABTests = {\n\tapi: ABTestAPI;\n\tparticipations: Participations;\n};\n\nconst apiPromise = new Promise<ABTests>(() => {});\nconst key = 'ab-tests';\n\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = (): ABTests | undefined => {\n\tconst { data } = useSWRImmutable(key, () => apiPromise);\n\treturn data;\n};\n\nexport const setABTests = ({ api, participations }: ABTests): void => {\n\tvoid mutate(key, { api, participations }, false);\n};\n","import { isAdBlockInUse } from '@guardian/commercial-core';\nimport { useEffect, useState } from 'react';\n\n/**\n * @description\n * useAdBlockInUse provides a custom hook to integrate the isAdBlockInUse\n * promise into a react component\n * */\nexport const useAdBlockInUse = (): boolean | undefined => {\n\tconst [isInUse, setIsInUse] = useState<boolean | undefined>();\n\tuseEffect(() => {\n\t\t// eslint-disable-next-line @typescript-eslint/no-floating-promises\n\t\tisAdBlockInUse().then((blockerDetected) => {\n\t\t\tsetIsInUse(blockerDetected);\n\t\t});\n\t}, []);\n\n\treturn isInUse;\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Ensures that the given task is only run once and only after all items in waitFor are defined\n * @param {Function} task - The task to execute once\n * @param {Array} waitFor - An array of variables that must be defined before the task is executed\n * */\nexport const useOnce = (task: () => void, waitFor: unknown[]): void => {\n\tconst [alreadyRun, setAlreadyRun] = useState(false);\n\tconst isReady = waitFor.every((dep) => dep !== undefined);\n\tuseEffect(() => {\n\t\tif (!alreadyRun && isReady) {\n\t\t\ttask();\n\t\t\tsetAlreadyRun(true);\n\t\t}\n\t}, [alreadyRun, isReady, task]);\n};\n"],"names":["roundWithDecimals","value","precision","power","Math","pow","round","Endpoints","coreWebVitalsPayload","browser_id","page_view_id","fid","cls","lcp","fcp","ttfb","teamsForLogging","Set","endpoint","initialised","queued","sendData","navigator","sendBeacon","JSON","stringify","size","forEach","team","log","onReport","metric","name","listener","e","type","document","visibilityState","getCoreWebVitals","async","webVitals","getCLS","getFCP","getFID","getLCP","getTTFB","reportAllChanges","addEventListener","willRecordCoreWebVitals","random","clientSideTestsToForceMetrics","integrateIma","Metrics","commercialMetricsEnabled","useAB","abTestApi","api","adBlockerInUse","useAdBlockInUse","browserId","getCookie","shouldMemoize","pageViewId","window","guardian","config","ophan","isDev","page","location","hostname","userInServerSideTest","Object","keys","tests","length","shouldBypassSampling","some","test","runnableTest","useOnce","bypassSampling","nearZeroSampling","Number","MIN_VALUE","sampling","console","warn","add","CODE","PROD","setEndpoint","pageViewInSample","bypassWithHash","hash","initCoreWebVitals","bypassCoreWebVitalsSampling","initCommercialMetrics","undefined","then","bypassCommercialMetricsSampling","catch","error","String","id","start","expiry","author","description","audience","audienceOffset","audienceCriteria","successMeasure","canRun","variants","apiPromise","Promise","key","data","useSWRImmutable","setABTests","participations","mutate","isInUse","setIsInUse","useState","useEffect","isAdBlockInUse","blockerDetected","task","waitFor","alreadyRun","setAlreadyRun","isReady","every","dep"],"sourceRoot":""}