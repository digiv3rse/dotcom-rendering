{"version":3,"file":"relativeTime.legacy.587e3ad509e8be7b92e2.js","mappings":"yLACaA,EAAe,WAKxB,OAJAC,EAAAA,EAAAA,KACAC,OAAOC,aAAY,YACfF,EAAAA,EAAAA,IACJ,GAAG,MACIG,QAAQC,SACnB,C,wDCNaC,EAAoB,SAACC,GAC9B,GAAIA,aAAmBC,YAAa,CAEhC,IAAwBC,EAAmBF,EAAQG,QAA3CC,eACFC,EAAeL,EAAQM,aAAa,YAC1C,IAAKD,IAAiBH,EAClB,OACJ,IAAIK,GAAU,EACd,OAAQL,GACJ,IAAK,QACL,IAAK,MACDK,GAAUC,EAAAA,EAAAA,GAAQ,IAAIC,KAAKJ,GAAcK,UAAW,CAChDC,SAAS,IAEb,MACJ,IAAK,OACDJ,GAAUC,EAAAA,EAAAA,GAAQ,IAAIC,KAAKJ,GAAcK,UAAW,CAChDC,SAAS,IAIrB,IAAMC,EAAUZ,EAAQa,WACR,IAAZN,GAAqBA,IAAYK,IACjCZ,EAAQc,UAAYP,EAC5B,CACJ,EACab,EAAqB,WAC9BqB,SACKC,iBAAiB,6BACjBC,QAAQlB,EACjB,C,kCC7BA,IAcMmB,EAAY,SAACC,EAAYC,EAAeT,GAC7C,IAAMU,EAA4B,IAAVD,EACxB,OAAQD,GACP,IAAK,IAEJ,OAAIR,EAAgB,eACb,QAER,IAAK,IACJ,OAAIA,GAAWU,EAAwB,eACnCV,EAAgB,cACb,QAER,IAAK,IACJ,OAAIA,GAAWU,EAAwB,aACnCV,EAAgB,YACb,QAER,IAAK,IAEJ,OAAIA,EAAgB,YACb,QAGV,EAkBaH,EAAU,SACtBc,EACAC,GAImB,MA5DKC,EAClBC,EA4DAC,EAAO,IAAIjB,KAAKa,GAChBK,EAAM,IAAIlB,KAEVE,EAAUY,aAAO,EAAPA,EAASZ,QACnBiB,EAA8C,QAA7B,EAAGL,aAAO,EAAPA,EAASK,yBAAiB,QAAI,EAElDC,EAAaC,KAAKC,OAAOJ,EAAIjB,UAAYgB,EAAKhB,WAAa,KAC3DsB,EAAYH,EAAa,GACzBI,EAAkBJ,EAAa,GAC/BK,EAAgBL,EAAa,KAC7BM,GAvEkBX,EAuEYE,EAtE9BD,EAAQ,IAAIhB,KACXe,EAAKd,UAAYe,EAAMf,UAAY,OAsEpC0B,EAnEa,SAACC,GACpB,IAAMZ,EAAQ,IAAIhB,KACZ6B,EAAY,IAAI7B,KAEtB,OADA6B,EAAUC,QAAQd,EAAMe,UAAY,GAC7BH,EAASI,iBAAmBH,EAAUG,cAC9C,CA8DsBC,CAAYhB,GAC3BiB,EAAuBd,EAAiC,GAApBD,EAAyB,GAAK,GAExE,GAAIC,EAAa,EAEhB,OAAO,EACD,GAAIG,EAEV,MAAO,MACD,GAAIC,EAEV,MAAM,GAAN,OAAUJ,GAAU,OAAGX,EAAU,IAAKW,EAAYlB,IAC5C,GAAIuB,EAAe,CAEzB,IAAMU,EAAUd,KAAKe,MAAMhB,EAAa,IACxC,MAAM,GAAN,OAAUe,GAAO,OAAG1B,EAAU,IAAK0B,EAASjC,GAC5C,CAAM,GAAIwB,EAAa,CAEvB,IAAMW,EAAQhB,KAAKe,MAAMhB,EAAa,MACtC,MAAM,GAAN,OAAUiB,GAAK,OAAG5B,EAAU,IAAK4B,EAAOnC,GACxC,CAAM,GAAIyB,GAAgBzB,EAE1B,MAAM,YAAN,OAxDe,SAACa,GAAU,iBACvBA,EAAKuB,WAAU,YAAQvB,EAAKwB,aAzCaC,WAAWC,SAAS,EAAG,KAyCvB,CAuDzBC,CAASzB,IACtB,GAAIiB,EAAsB,CAEhC,IAAMS,EAAOtB,KAAKe,MAAMhB,EAAa,KAAO,IAC5C,MAAM,GAAN,OAAUuB,GAAI,OAAGlC,EAAU,IAAKkC,EAAMzC,GACtC,CAEA,MAAO,CACNe,EAAKc,UACL7B,EACGe,EAAK2B,eAAe,QAAS,CAAEC,MAAO,SACtC5B,EAAK2B,eAAe,QAAS,CAAEC,MAAO,UACzC5B,EAAK6B,eACJC,KAAK,IAET,C","sources":["webpack://@guardian/dotcom-rendering/./src/web/browser/relativeTime/index.ts","webpack://@guardian/dotcom-rendering/./src/web/browser/relativeTime/updateTimeElements.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/libs/src/datetime/timeAgo.ts"],"sourcesContent":["import { updateTimeElements } from './updateTimeElements';\nexport const relativeTime = () => {\n    updateTimeElements();\n    window.setInterval(() => {\n        updateTimeElements();\n    }, 15000);\n    return Promise.resolve();\n};\n","import { timeAgo } from '@guardian/libs';\nexport const updateTimeElement = (element) => {\n    if (element instanceof HTMLElement) {\n        // Get required values\n        const { relativeformat: relativeFormat } = element.dataset;\n        const absoluteTime = element.getAttribute('datetime');\n        if (!absoluteTime || !relativeFormat)\n            return;\n        let newTime = false;\n        switch (relativeFormat) {\n            case 'short':\n            case 'med':\n                newTime = timeAgo(new Date(absoluteTime).getTime(), {\n                    verbose: false,\n                });\n                break;\n            case 'long':\n                newTime = timeAgo(new Date(absoluteTime).getTime(), {\n                    verbose: true,\n                });\n                break;\n        }\n        const oldTime = element.innerText;\n        if (newTime !== false && newTime !== oldTime)\n            element.innerHTML = newTime;\n    }\n};\nexport const updateTimeElements = () => {\n    document\n        .querySelectorAll('time[data-relativeformat]')\n        .forEach(updateTimeElement);\n};\n","type Unit = 's' | 'm' | 'h' | 'd';\n\nconst pad = (n: number): number | string => n.toString().padStart(2, '0');\n\nconst isWithin24Hours = (date: Date): boolean => {\n\tconst today = new Date();\n\treturn date.getTime() > today.getTime() - 24 * 60 * 60 * 1000;\n};\n\nconst isYesterday = (relative: Date): boolean => {\n\tconst today = new Date();\n\tconst yesterday = new Date();\n\tyesterday.setDate(today.getDate() - 1);\n\treturn relative.toDateString() === yesterday.toDateString();\n};\n\nconst getSuffix = (type: Unit, value: number, verbose?: boolean): string => {\n\tconst shouldPluralise = value !== 1;\n\tswitch (type) {\n\t\tcase 's': {\n\t\t\t// Always pluralised, as less than 15 seconds returns “now”\n\t\t\tif (verbose) return ' seconds ago';\n\t\t\treturn 's ago';\n\t\t}\n\t\tcase 'm': {\n\t\t\tif (verbose && shouldPluralise) return ' minutes ago';\n\t\t\tif (verbose) return ' minute ago';\n\t\t\treturn 'm ago';\n\t\t}\n\t\tcase 'h': {\n\t\t\tif (verbose && shouldPluralise) return ' hours ago';\n\t\t\tif (verbose) return ' hour ago';\n\t\t\treturn 'h ago';\n\t\t}\n\t\tcase 'd': {\n\t\t\t// Always pluralised, as less than 2 days returns “Yesterday HH.MM”\n\t\t\tif (verbose) return ' days ago';\n\t\t\treturn 'd ago';\n\t\t}\n\t}\n};\n\nconst withTime = (date: Date): string =>\n\t` ${date.getHours()}.${pad(date.getMinutes())}`;\n\n/**\n * Takes an absolute date in [epoch format] and returns a string representing\n * relative time ago.\n *\n * Time is formatted according to [the Guardian and Observer Style Guide (T)][T]\n *\n * @param {number} epoch The date when an event happened in epoch format\n * @param {Object} [options] Options to control the formatting\n * @returns {string | false} A formatted relative time string, or `false` if the epoch is in the future\n *\n * [epoch format]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#description\n * [T]: https://www.theguardian.com/guardian-observer-style-guide-t\n */\nexport const timeAgo = (\n\tepoch: number,\n\toptions?: {\n\t\tverbose?: boolean;\n\t\tdaysUntilAbsolute?: number;\n\t},\n): false | string => {\n\tconst then = new Date(epoch);\n\tconst now = new Date();\n\n\tconst verbose = options?.verbose;\n\tconst daysUntilAbsolute = options?.daysUntilAbsolute ?? 7;\n\n\tconst secondsAgo = Math.floor((now.getTime() - then.getTime()) / 1000);\n\tconst veryClose = secondsAgo < 15;\n\tconst within55Seconds = secondsAgo < 55;\n\tconst withinTheHour = secondsAgo < 55 * 60;\n\tconst within24hrs = isWithin24Hours(then);\n\tconst wasYesterday = isYesterday(then);\n\tconst withinAbsoluteCutoff = secondsAgo < daysUntilAbsolute * 24 * 60 * 60;\n\n\tif (secondsAgo < 0) {\n\t\t// Dates in the future are not supported\n\t\treturn false;\n\t} else if (veryClose) {\n\t\t// Now\n\t\treturn 'now';\n\t} else if (within55Seconds) {\n\t\t// Seconds\n\t\treturn `${secondsAgo}${getSuffix('s', secondsAgo, verbose)}`;\n\t} else if (withinTheHour) {\n\t\t// Minutes\n\t\tconst minutes = Math.round(secondsAgo / 60);\n\t\treturn `${minutes}${getSuffix('m', minutes, verbose)}`;\n\t} else if (within24hrs) {\n\t\t// Hours\n\t\tconst hours = Math.round(secondsAgo / 3600);\n\t\treturn `${hours}${getSuffix('h', hours, verbose)}`;\n\t} else if (wasYesterday && verbose) {\n\t\t// Yesterday\n\t\treturn `Yesterday${withTime(then)}`;\n\t} else if (withinAbsoluteCutoff) {\n\t\t// Days\n\t\tconst days = Math.round(secondsAgo / 3600 / 24);\n\t\treturn `${days}${getSuffix('d', days, verbose)}`;\n\t} else {\n\t\t// Simple date - \"9 Nov 2019\"\n\t\treturn [\n\t\t\tthen.getDate(),\n\t\t\tverbose\n\t\t\t\t? then.toLocaleString('en-GB', { month: 'long' })\n\t\t\t\t: then.toLocaleString('en-GB', { month: 'short' }),\n\t\t\tthen.getFullYear(),\n\t\t].join(' ');\n\t}\n};\n"],"names":["relativeTime","updateTimeElements","window","setInterval","Promise","resolve","updateTimeElement","element","HTMLElement","relativeFormat","dataset","relativeformat","absoluteTime","getAttribute","newTime","timeAgo","Date","getTime","verbose","oldTime","innerText","innerHTML","document","querySelectorAll","forEach","getSuffix","type","value","shouldPluralise","epoch","options","date","today","then","now","daysUntilAbsolute","secondsAgo","Math","floor","veryClose","within55Seconds","withinTheHour","within24hrs","wasYesterday","relative","yesterday","setDate","getDate","toDateString","isYesterday","withinAbsoluteCutoff","minutes","round","hours","getHours","getMinutes","toString","padStart","withTime","days","toLocaleString","month","getFullYear","join"],"sourceRoot":""}