{"version":3,"file":"ShowHideContainers-importable.modern.d2faf0d83cae964a62ce.js","mappings":"uOAKA,MAeaA,EAAqB,MACjCC,EAAAA,EAAAA,IAAQ,KACP,MAAMC,EAVmB,MAC1B,MAAMC,EAAOC,EAAAA,EAAAA,MAAAA,IAAmB,6BAEhC,MAVyB,CAACD,MACrBE,EAAAA,EAAAA,GAASF,MACTG,OAAOC,KAAKJ,GAAMK,MAAMC,EAAAA,MACxBH,OAAOI,OAAOP,GAAMK,MAAMC,EAAAA,GAO1BE,CAAkBR,GAEhBA,EAF8B,CAAC,CAE3B,EAKcS,GAElBC,EAAkB,CAACC,EAAmBC,KAC3C,MAAMC,EAAuD,SAA1CD,EAAQE,aAAa,iBAElCC,EACLC,OAAOC,SAASC,eAAeP,GAE5BE,GACHd,EAAgBY,GAAa,SAC7BI,SAAAA,EAASI,UAAUC,IAAI,UACvBR,EAAQS,UAAY,OACpBT,EAAQU,aAAa,gBAAiB,SACtCV,EAAQU,aAAa,iBAAkB,UAEvCvB,EAAgBY,GAAa,SAC7BI,SAAAA,EAASI,UAAUI,OAAO,UAC1BX,EAAQS,UAAY,OACpBT,EAAQU,aAAa,gBAAiB,QACtCV,EAAQU,aAAa,iBAAkB,SAGxCrB,EAAAA,EAAAA,MAAAA,IAAmB,4BAA4BF,EAAgB,EAGhEiB,OAAOC,SACLO,iBAA8B,2BAC9BC,SAASC,IACT,MAAMf,EAAYe,EAAEZ,aAAa,yBAC5BH,IAELe,EAAEC,QAAU,IAAMjB,EAAgBC,EAAWe,GAEV,WAA/B3B,EAAgBY,IACnBD,EAAgBC,EAAWe,GAC5B,GACC,GACD,KAEI,wB,gDCtDD,MAAM5B,EAAU,CAAC8B,EAAkBC,KACzC,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,GACvCC,EAAUJ,EAAQxB,OAAO6B,QAAgBC,IAARD,KACvCE,EAAAA,EAAAA,YAAU,MACJN,GAAcG,IAClBL,IACAG,GAAc,GACf,GACE,CAACD,EAAYG,EAASL,GAAM,C","sources":["webpack://@guardian/dotcom-rendering/./src/web/components/ShowHideContainers.importable.tsx","webpack://@guardian/dotcom-rendering/./src/web/lib/useOnce.ts"],"sourcesContent":["import { isObject, isString, storage } from '@guardian/libs';\nimport { useOnce } from '../lib/useOnce';\n\ntype ContainerStates = { [id: string]: string };\n\nconst isContainerStates = (item: unknown): item is ContainerStates => {\n\tif (!isObject(item)) return false;\n\tif (!Object.keys(item).every(isString)) return false;\n\tif (!Object.values(item).every(isString)) return false;\n\treturn true;\n};\n\nconst getContainerStates = (): ContainerStates => {\n\tconst item = storage.local.get(`gu.prefs.container-states`);\n\n\tif (!isContainerStates(item)) return {};\n\n\treturn item;\n};\n\nexport const ShowHideContainers = () => {\n\tuseOnce(() => {\n\t\tconst containerStates = getContainerStates();\n\n\t\tconst toggleContainer = (sectionId: string, element: HTMLElement) => {\n\t\t\tconst isExpanded = element.getAttribute('aria-expanded') === 'true';\n\n\t\t\tconst section: Element | null =\n\t\t\t\twindow.document.getElementById(sectionId);\n\n\t\t\tif (isExpanded) {\n\t\t\t\tcontainerStates[sectionId] = 'closed';\n\t\t\t\tsection?.classList.add('hidden');\n\t\t\t\telement.innerHTML = 'Show';\n\t\t\t\telement.setAttribute('aria-expanded', 'false');\n\t\t\t\telement.setAttribute('data-link-name', 'Show');\n\t\t\t} else {\n\t\t\t\tcontainerStates[sectionId] = 'opened';\n\t\t\t\tsection?.classList.remove('hidden');\n\t\t\t\telement.innerHTML = 'Hide';\n\t\t\t\telement.setAttribute('aria-expanded', 'true');\n\t\t\t\telement.setAttribute('data-link-name', 'Hide');\n\t\t\t}\n\n\t\t\tstorage.local.set(`gu.prefs.container-states`, containerStates);\n\t\t};\n\n\t\twindow.document\n\t\t\t.querySelectorAll<HTMLElement>('[data-show-hide-button]')\n\t\t\t.forEach((e) => {\n\t\t\t\tconst sectionId = e.getAttribute('data-show-hide-button');\n\t\t\t\tif (!sectionId) return;\n\n\t\t\t\te.onclick = () => toggleContainer(sectionId, e);\n\n\t\t\t\tif (containerStates[sectionId] === 'closed') {\n\t\t\t\t\ttoggleContainer(sectionId, e);\n\t\t\t\t}\n\t\t\t});\n\t}, []);\n\n\treturn <></>;\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Ensures that the given task is only run once and only after all items in waitFor are defined\n * @param {Function} task - The task to execute once\n * @param {Array} waitFor - An array of variables that must be defined before the task is executed\n * */\nexport const useOnce = (task: () => void, waitFor: unknown[]): void => {\n\tconst [alreadyRun, setAlreadyRun] = useState(false);\n\tconst isReady = waitFor.every((dep) => dep !== undefined);\n\tuseEffect(() => {\n\t\tif (!alreadyRun && isReady) {\n\t\t\ttask();\n\t\t\tsetAlreadyRun(true);\n\t\t}\n\t}, [alreadyRun, isReady, task]);\n};\n"],"names":["ShowHideContainers","useOnce","containerStates","item","storage","isObject","Object","keys","every","isString","values","isContainerStates","getContainerStates","toggleContainer","sectionId","element","isExpanded","getAttribute","section","window","document","getElementById","classList","add","innerHTML","setAttribute","remove","querySelectorAll","forEach","e","onclick","task","waitFor","alreadyRun","setAlreadyRun","useState","isReady","dep","undefined","useEffect"],"sourceRoot":""}