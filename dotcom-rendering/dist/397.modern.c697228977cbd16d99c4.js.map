{"version":3,"file":"397.modern.c697228977cbd16d99c4.js","mappings":"oLACA,MAAMA,EAAmB,wBAGnBC,EAA+B,CACpCC,EACAC,IAEO,GAAWD,OAARC,EAAK,KAAW,OAARD,GAIbE,EAAgC,CACrCF,EACAC,IAEO,wBAAgCD,OAARC,EAAK,KAAW,OAARD,GAIlCG,EAA2B,KAChC,I,IAEEC,EADD,MAAMC,EAAgCC,KAAKC,MACrBT,QAArBM,EAAAA,aAAaI,QAAQV,UAArBM,IAAAA,EAAAA,EAAyC,MAG1C,MAAqB,iBAAVC,GAA6C,iBAAhBA,EAAMI,MACtCJ,EAAMI,MAEP,CAAC,CAGT,CAFE,MAAOC,GACR,MAAO,CAAC,CACT,GAGKC,EAAsBN,IAC3BD,aAAaQ,QAAQd,EAAiBQ,KAAKO,UAAU,CAAEJ,MAAOJ,IAAS,EAc3DS,EAAuB,CAACd,EAAiBC,KACrD,IACC,MAAMI,EAAQF,IACdE,EAAMN,EAA6BC,EAASC,KAC3C,IAAIc,MAAOC,cACZL,EAAmBN,EAGpB,CAFE,MAAOY,GAET,GAuBYC,EAAuB,CACnClB,EACAC,EACAkB,KAEA,IACC,MAAMd,EAAQF,IAEd,QAAeiB,IAAXD,EAAsB,CAEzB,IAAKd,EAAMN,EAA6BC,EAASC,IAChD,OAAO,EAGR,MAAMoB,EAAcN,KAAKR,MACxBF,EAAMN,EAA6BC,EAASC,KAI7C,SAFec,KAAKO,MAAQD,GAAe,MAE9BF,IAvCsB,EAACnB,EAAiBC,KACvD,IACC,MAAMI,EAAQF,WACPE,EAAMN,EAA6BC,EAASC,IACnDU,EAAmBN,EAGpB,CAFE,MAAOY,GAET,GAiCGM,CAAuBvB,EAASC,GACzB,GAGT,CAEA,QAASI,EAAMN,EAA6BC,EAASC,GAItD,CAHE,MAAOgB,GAER,OAAO,CACR,GAGKO,EAAyB,CAACxB,EAAiBC,KAChD,IACC,MACMwB,EADQtB,IAEPD,EAA8BF,EAASC,IAE9C,OAAIyB,OAAOC,SAASF,GACZA,EAED,CAGR,CAFE,MAAOR,GACR,OAAO,CACR,GAIYW,EAAoC,CAChD5B,EACAC,EACA4B,IAEOL,EAAuBxB,EAASC,GAAQ4B,EAInCC,EAAkC,CAC9C9B,EACAC,KAEA,IACC,MAAMI,EAAQF,IACdE,EAAMH,EAA8BF,EAASC,IAC5CuB,EAAuBxB,EAASC,GAAQ,EACzCU,EAAmBN,EAGpB,CAFE,MAAOY,GAET,E,qHC5IM,MAAMc,EAA0B,W,IAACC,EAAI,UAAJA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAI,E,IAEDC,EAA1C,MAAOC,EAAa,CAAC,GAAyCD,QAApBA,GAAAA,EAAAA,EAAAA,aAAAA,IAAAA,EAAAA,EAA0B,IAE9D,MAAEJ,EAAQ,GAAMK,EAEtB,OAAOL,GAASG,CACjB,EAGaG,EAAS,KAErB,MAAMC,EAAKC,UAAUC,UAEfC,EAAc,sBAAsBC,KAAKJ,GAEzCK,EAAK,eAAeD,KAAKJ,GAG/B,OAAOG,GAAeE,CAAE,EAIZC,EAAsBC,GAGf,CAAC,WAEFC,MAAMC,GAA0BF,IAAgBE,IAItDC,EAAkBC,IACN,CACvB,QACA,OACA,aACA,OACA,0BACA,eAKuBH,MACtBI,GAA6BD,IAAgBC,IAKnCC,EAAcC,IACN,CAAC,2BAEDN,MAAMO,GACzBD,EAAKE,KAAKC,GAAQA,EAAIC,KAAIC,SAASJ,KAUxBK,EAAqB,I,IAAA,WACjCC,EAAU,YACVC,EAAW,YACXf,EAAW,YACXI,EAAW,KACXG,EAAI,cACJS,EAAa,UACbC,GACkB,E,OAClBC,QAAQC,SACNL,KACC7B,EAAAA,EAAAA,IACA8B,EAAY1D,QACZ0D,EAAYzD,KACZ,IAED8B,EAAwB,IACxBW,EAAmBC,IACnBG,EAAeC,IACfE,EAAWC,KAEVS,IAEAC,IACAzB,IAAAA,ECjES4B,EAA2C,CACvDC,QAxBgB,I,IAAA,WAChBP,EAAU,YACVC,EAAW,YACXf,EAAW,YACXI,EAAW,KACXG,EAAI,cACJS,EAAa,UACbC,GACkB,E,OAClBC,QAAQC,SACNL,KACCvC,EAAAA,EAAAA,IAAqBwC,EAAY1D,QAAS0D,EAAYzD,OACvD8B,EAAwB,IACxBW,EAAmBC,IACnBG,EAAeC,IACfE,EAAWC,KAEVS,IAEAC,IACAzB,IAAMA,G,0PCnBV,MAAM8B,GAAiBC,EAAAA,EAAAA,KAAGA,KAKbC,EAAQ,I,IAAA,SAAEC,EAAQ,OAAEC,EAAM,kBAAEC,GAA0B,EAClE,MAAOC,EAAaC,IAAUC,EAAAA,EAAAA,GAAY,CACzCC,WAAY,GAAU,OAAPL,EAAO,QAKvB,GAAsB,mBAAXG,EACV,OAAO,KAQR,MAAMG,EAAiBJ,GAAeJ,EAAKS,SAC3C,OACC,SAACC,MAAAA,CAAIC,IAAKN,EAAQN,KAAMI,GAAqBL,E,SAC3CU,IAAkB,qB,SAAGP,K,EAKzBD,EAAKS,UAAW,EClChB,MAAMG,EAAiBC,EAAAA,QAAAA,MAAW,KACjC,MAAM,MAAEC,EAAK,IAAEC,IAAQC,EAAAA,EAAAA,GAAS,kBAEhC,OADAF,IACO,4EAELG,MAAMC,IACPH,IACO,CAAEI,QAASD,EAAON,kBACxB,IAGGQ,EAAiCP,EAAAA,QAAAA,MAAW,KACjD,MAAM,MAAEC,EAAK,IAAEC,IAAQC,EAAAA,EAAAA,GAAS,kCAEhC,OADAF,IACO,4EAELG,MAAMC,IACPH,IACO,CAAEI,QAASD,EAAOE,kCACxB,IAeUxB,EAA2C,CACvDyB,KAAO,I,IAAA,iBACNC,EAAgB,YAChBC,EAAW,MACXC,EAAK,UACLC,EAAS,OACTC,EAAM,2BACNC,EAA0B,yCAC1BC,GACA,EACA,OACC,SAAC5B,EAAIA,CAACE,OAAQ,I,UACb,SAAC2B,EAAAA,SAAQA,CAACC,UAAU,wB,SAClBF,QAC8B3E,IAA/B0E,GACC,SAACP,EAAAA,CACAE,iBAAkBA,EAClBC,YAAaA,EACbC,MAAOA,EACPC,UAAWA,EACXC,OAAQA,EACRC,2BACCA,KAIF,SAACf,EAAAA,CACAU,iBAAkBA,EAClBC,YAAaA,EACbC,MAAOA,EACPC,UAAWA,EACXC,OAAQA,O,EAOd7B,QAASR,GCxEJ0C,EAA4BlB,EAAAA,QAAAA,MAAW,KAC5C,MAAM,MAAEC,EAAK,IAAEC,IAAQC,EAAAA,EAAAA,GAAS,6BAEhC,OADAF,IACO,4EAELG,MAAMC,IACPH,IACO,CAAEI,QAASD,EAAOa,6BACxB,IAGUC,EAA0D,CACtEX,KAAO,I,IAAA,iBAAEC,EAAgB,YAAEC,EAAW,MAAEC,EAAK,UAAEC,EAAS,OAAEC,GAAQ,E,OACjE,SAAC1B,EAAIA,CAACE,OAAQ,I,UACb,SAAC2B,EAAAA,SAAQA,CAACC,UAAU,wB,UACnB,SAACC,EAAAA,CACAT,iBAAkBA,EAClBC,YAAaA,EACbC,MAAOA,EACPC,UAAWA,EACXC,OAAQA,O,EAKZ7B,QAASR,GCfG4C,EAAyC,CACrDC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,GAGYC,EAAwD,CACpE,iBAAkBC,EAClB,iBAAkBC,EAClB,iBAAkBP,EAClB,gBAAiBA,EACjB,uBAAwBO,GAKZC,EAA2D,CACvEC,sBAAuB,iBACvBC,sBAAuB,iBACvBX,0BAA2B,iC,kCCjCrB,MAAMK,EAAoC,CAChDjD,GAAI,4BACJ2B,MAAO,aACP6B,OAAQ,aACRC,OAAQ,cACRC,YAAa,+DACbC,SAAU,EACVC,eAAgB,EAChBC,eAAgB,6CAChBC,iBACC,4QACDC,cAAe,qBACfC,aACC,yJACDC,kBAAkB,EAClBC,OAAQ,KAAM,EACdC,SAAU,CACT,CACCnE,GAAI,iBACJd,KAAM,QAEP,CACCc,GAAI,gBACJd,KAAM,QAEP,CACCc,GAAI,uBACJd,KAAM,S,kCC3BF,MAAM8D,EAAgC,CAC5ChD,GAAI,wBACJ2B,MAAO,aACP6B,OAAQ,aACRC,OAAQ,gBACRC,YACC,0MACDC,SAAU,GACVC,eAAgB,GAChBC,eAAgB,4DAChBC,iBACC,4QACDC,cAAe,iBACfC,aACC,8EACDC,kBAAkB,EAClBC,OAAQ,KAAM,EACdC,SAAU,CACT,CACCnE,GAAI,iBACJd,KAAM,S,kCCpBF,MAAM6D,EAAgC,CAC5C/C,GAAI,wBACJ2B,MAAO,aACP6B,OAAQ,aACRC,OAAQ,gBACRC,YACC,+MACDC,SAAU,GACVC,eAAgB,EAChBC,eAAgB,6CAChBC,iBACC,4QACDC,cAAe,iBACfC,aACC,8EACDC,kBAAkB,EAClBC,OAAQ,KAAM,EACdC,SAAU,CACT,CACCnE,GAAI,iBACJd,KAAM,S,kECbT,MAAMkF,EAAa,IAAI7D,SAAiB,SAClC8D,EAAM,WAUCC,EAAQ,KACpB,MAAM,KAAEC,IAASC,EAAAA,EAAAA,GAAgBH,GAAK,IAAMD,IAC5C,OAAOG,CAAI,EAGCE,EAAc,I,IAAA,IAAEC,EAAG,eAAEC,GAAyB,GACrDC,EAAAA,EAAAA,IAAOP,EAAK,CAAEK,MAAKC,mBAAkB,EAAM,C,yDCV1C,MAAME,EAAwB,K,IAGzBP,EAAX,MAAMQ,EAAUR,QAALA,GAAAA,EAAAA,EAAAA,YAAAA,IAAAA,OAAAA,EAAAA,EAASI,IACpB,IAAKI,EAAI,OAET,MAAM5F,EAAgC4F,EAAGC,kBAAkBjC,EAAAA,IAE3D,IAAK5D,EACJ,MAAO,CAAC,KAAM,M,IAIRA,EADP,MAAMkB,EAAuC,CAC5CzD,KAAwB,QAAlBuC,EAAAA,EAAK6E,qBAAL7E,IAAAA,EAAAA,EAAsBA,EAAKc,GACjCtD,QAASwC,EAAK8F,aAAahF,GAC3BA,GAAId,EAAKc,IAGJiF,EAAc/B,EAAAA,GAAmC9C,EAAY1D,SAEnE,OAAKuI,EAIE,CAACA,EAAa7E,GAHb,CAAC,KAAM,KAGkB,C","sources":["webpack://@guardian/dotcom-rendering/./src/web/components/SignInGate/dismissGate.ts","webpack://@guardian/dotcom-rendering/./src/web/components/SignInGate/displayRule.ts","webpack://@guardian/dotcom-rendering/./src/web/components/SignInGate/gates/main-control.ts","webpack://@guardian/dotcom-rendering/./src/web/components/Lazy.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/SignInGate/gates/main-variant.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/SignInGate/gates/sign-in-gate-copy-test-jan2023.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/SignInGate/signInGate.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-copy-test-variants.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-main-control.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-main-variant.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useAB.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useSignInGateSelector.ts"],"sourcesContent":["// TODO: Add localstorage lib from https://github.com/guardian/libs/pull/1 when it is merged\nconst localStorageKey = `gu.prefs.sign-in-gate`;\n\n// We use this key for storing the date the gate was dismissed against\nconst localStorageDismissedDateKey = (\n\tvariant: string,\n\tname: string,\n): string => {\n\treturn `${name}-${variant}`;\n};\n\n// We use this key for storing the gate dismissed count against\nconst localStorageDismissedCountKey = (\n\tvariant: string,\n\tname: string,\n): string => {\n\treturn `gate-dismissed-count-${name}-${variant}`;\n};\n\n// Invalid json stored against `localStorageKey` should not break signin gate for a user forever\nconst getSigninGatePrefsSafely = (): { [key: string]: any } => {\n\ttry {\n\t\tconst prefs: { [key: string]: any } = JSON.parse(\n\t\t\tlocalStorage.getItem(localStorageKey) ?? '{}',\n\t\t);\n\n\t\tif (typeof prefs === 'object' && typeof prefs.value === 'object') {\n\t\t\treturn prefs.value;\n\t\t}\n\t\treturn {};\n\t} catch (e) {\n\t\treturn {};\n\t}\n};\n\nconst setSigninGatePrefs = (prefs: any) => {\n\tlocalStorage.setItem(localStorageKey, JSON.stringify({ value: prefs }));\n};\n\n// set in user preferences that the user has dismissed the gate, set the value to the current ISO date string\n// name is optional, but can be used to differentiate between multiple sign in gate tests\n//\n//\n// This is set in local storage with the following shape:\n//\n// key:   gu.prefs.sign-in-gate\n// value: {\"testVariantName\":\"2020-07-01T10:55:09.085Z\"}\n//\n// We set the value using the key, which remains constant\n// and add an entry to the object with the testname and variant, and use current ISO date string as the value\nexport const setUserDismissedGate = (variant: string, name: string): void => {\n\ttry {\n\t\tconst prefs = getSigninGatePrefsSafely();\n\t\tprefs[localStorageDismissedDateKey(variant, name)] =\n\t\t\tnew Date().toISOString();\n\t\tsetSigninGatePrefs(prefs);\n\t} catch (error) {\n\t\t// Alas, sometimes localstorage isn't available\n\t}\n};\n\nexport const unsetUserDismissedGate = (variant: string, name: string): void => {\n\ttry {\n\t\tconst prefs = getSigninGatePrefsSafely();\n\t\tdelete prefs[localStorageDismissedDateKey(variant, name)];\n\t\tsetSigninGatePrefs(prefs);\n\t} catch (error) {\n\t\t// Alas, sometimes localstorage isn't available\n\t}\n};\n\n// Check if the user has dismissed the gate by checking the user preferences,\n// name is optional, but can be used to differentiate between multiple sign in gate tests\n//\n// This is set in local storage with the following shape:\n//\n// key:   gu.prefs.sign-in-gate\n// value: {\"testVariantName\":\"2020-07-01T10:55:09.085Z\"}\n//\n// We extract the value using the key, which remains constant\n// and the from within the value object we look up the variant we are looking for\nexport const hasUserDismissedGate = (\n\tvariant: string,\n\tname: string,\n\twindow?: number, // represents hours - only use if the gate should reshow after X hrs (dismissal window)\n): boolean => {\n\ttry {\n\t\tconst prefs = getSigninGatePrefsSafely();\n\t\t// checks if a dismissal occurred within a given window timeframe in hours\n\t\tif (window !== undefined) {\n\t\t\t// checks if prefs is empty, ie. the user has not dismissed gate before.\n\t\t\tif (!prefs[localStorageDismissedDateKey(variant, name)]) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst dismissalTZ = Date.parse(\n\t\t\t\tprefs[localStorageDismissedDateKey(variant, name)],\n\t\t\t);\n\t\t\tconst hours = (Date.now() - dismissalTZ) / 36e5; //  36e5 is the scientific notation for 60*60*1000, which converts the milliseconds difference into hours.\n\n\t\t\tif (hours >= window) {\n\t\t\t\tunsetUserDismissedGate(variant, name);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !!prefs[localStorageDismissedDateKey(variant, name)];\n\t} catch (error) {\n\t\t// Alas, sometimes localstorage isn't available. Please have a sign in gate as an apology\n\t\treturn false;\n\t}\n};\n\nconst retrieveDismissedCount = (variant: string, name: string): number => {\n\ttry {\n\t\tconst prefs = getSigninGatePrefsSafely();\n\t\tconst dismissed: any =\n\t\t\tprefs[localStorageDismissedCountKey(variant, name)];\n\n\t\tif (Number.isFinite(dismissed)) {\n\t\t\treturn dismissed;\n\t\t}\n\t\treturn 0;\n\t} catch (error) {\n\t\treturn 0;\n\t}\n};\n\n// Test whether the user has dismissed the gate variant more than `count` times\nexport const hasUserDismissedGateMoreThanCount = (\n\tvariant: string,\n\tname: string,\n\tcount: number,\n): boolean => {\n\treturn retrieveDismissedCount(variant, name) > count;\n};\n\n// Increment the number of times a user has dismissed this gate variant\nexport const incrementUserDismissedGateCount = (\n\tvariant: string,\n\tname: string,\n): void => {\n\ttry {\n\t\tconst prefs = getSigninGatePrefsSafely();\n\t\tprefs[localStorageDismissedCountKey(variant, name)] =\n\t\t\tretrieveDismissedCount(variant, name) + 1;\n\t\tsetSigninGatePrefs(prefs);\n\t} catch (error) {\n\t\t// localstorage isn't available so show the gate\n\t}\n};\n","// use the dailyArticleCount from the local storage to see how many articles the user has viewed in a day\nimport { onConsent } from '@guardian/consent-management-platform';\nimport type { ConsentState } from '@guardian/consent-management-platform/dist/types';\nimport type { TagType } from '../../../types/tag';\nimport type { DailyArticle } from '../../lib/dailyArticleCount';\nimport { getDailyArticleCount } from '../../lib/dailyArticleCount';\nimport { hasUserDismissedGateMoreThanCount } from './dismissGate';\nimport type { CanShowGateProps } from './types';\n\n// in our case if this is the n-numbered article or higher the user has viewed then set the gate\nexport const isNPageOrHigherPageView = (n = 2): boolean => {\n\t// get daily read article count array from local storage\n\tconst [dailyCount = {} as DailyArticle] = getDailyArticleCount() ?? [];\n\n\tconst { count = 0 } = dailyCount;\n\n\treturn count >= n;\n};\n\n// determine if the useragent is running iOS 9 (known to be buggy for sign in flow)\nexport const isIOS9 = (): boolean => {\n\t// get the browser user agent\n\tconst ua = navigator.userAgent;\n\t// check useragent if the device is an iOS device\n\tconst appleDevice = /(iPhone|iPod|iPad)/i.test(ua);\n\t// check useragent if the os is version 9\n\tconst os = /(CPU OS 9_)/i.test(ua);\n\n\t// if both true, then it's an apple ios 9 device\n\treturn appleDevice && os;\n};\n\n// hide the sign in gate on article types that are not supported\nexport const isValidContentType = (contentType: string): boolean => {\n\t// It's safer to definitively *include* types as we\n\t// know new types will not break the sign-in-gate going forward\n\tconst validTypes = ['Article'];\n\n\treturn validTypes.some((type: string): boolean => contentType === type);\n};\n\n// hide the sign in gate on certain sections of the site, e.g info, about, help etc.\nexport const isValidSection = (sectionName?: string): boolean => {\n\tconst invalidSections = [\n\t\t'about',\n\t\t'info',\n\t\t'membership',\n\t\t'help',\n\t\t'guardian-live-australia',\n\t\t'gnm-archive',\n\t];\n\n\t// we check for invalid section by reducing the above array, and then NOT the result so we know\n\t// its a valid section\n\treturn !invalidSections.some(\n\t\t(section: string): boolean => sectionName === section,\n\t);\n};\n\n// hide the sign in gate for certain tags on the site\nexport const isValidTag = (tags: TagType[]): boolean => {\n\tconst invalidTags = ['info/newsletter-sign-up'];\n\n\treturn !invalidTags.some((invalidTag) =>\n\t\ttags.map((tag) => tag.id).includes(invalidTag),\n\t);\n};\n\n// check CMP banner consents\nexport const hasRequiredConsents = (): Promise<boolean> =>\n\tonConsent()\n\t\t.then(({ canTarget }: ConsentState) => canTarget)\n\t\t.catch(() => false);\n\nexport const canShowSignInGate = ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionName,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n}: CanShowGateProps): Promise<boolean> =>\n\tPromise.resolve(\n\t\t!isSignedIn &&\n\t\t\t!hasUserDismissedGateMoreThanCount(\n\t\t\t\tcurrentTest.variant,\n\t\t\t\tcurrentTest.name,\n\t\t\t\t5,\n\t\t\t) &&\n\t\t\tisNPageOrHigherPageView(3) &&\n\t\t\tisValidContentType(contentType) &&\n\t\t\tisValidSection(sectionName) &&\n\t\t\tisValidTag(tags) &&\n\t\t\t// hide the sign in gate on isPaidContent\n\t\t\t!isPaidContent &&\n\t\t\t// hide the sign in gate on internal tools preview &&\n\t\t\t!isPreview &&\n\t\t\t!isIOS9(),\n\t);\n\nexport const canShowSignInGateMandatory: ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionName,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n}: CanShowGateProps) => Promise<boolean> = async ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionName,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n}: CanShowGateProps) => {\n\treturn (\n\t\t(await hasRequiredConsents()) &&\n\t\t(await canShowSignInGate({\n\t\t\tisSignedIn,\n\t\t\tcurrentTest,\n\t\t\tcontentType,\n\t\t\tsectionName,\n\t\t\ttags,\n\t\t\tisPaidContent,\n\t\t\tisPreview,\n\t\t}))\n\t);\n};\n","import { hasUserDismissedGate } from '../dismissGate';\nimport {\n\tisIOS9,\n\tisNPageOrHigherPageView,\n\tisValidContentType,\n\tisValidSection,\n\tisValidTag,\n} from '../displayRule';\nimport type { CanShowGateProps, SignInGateComponent } from '../types';\n\nconst canShow = ({\n\tisSignedIn,\n\tcurrentTest,\n\tcontentType,\n\tsectionName,\n\ttags,\n\tisPaidContent,\n\tisPreview,\n}: CanShowGateProps): Promise<boolean> =>\n\tPromise.resolve(\n\t\t!isSignedIn &&\n\t\t\t!hasUserDismissedGate(currentTest.variant, currentTest.name) &&\n\t\t\tisNPageOrHigherPageView(3) &&\n\t\t\tisValidContentType(contentType) &&\n\t\t\tisValidSection(sectionName) &&\n\t\t\tisValidTag(tags) &&\n\t\t\t// hide the sign in gate on isPaidContent\n\t\t\t!isPaidContent &&\n\t\t\t// hide the sign in gate on internal tools preview\n\t\t\t!isPreview &&\n\t\t\t!isIOS9(),\n\t);\n\nexport const signInGateComponent: SignInGateComponent = {\n\tcanShow,\n};\n","import { css } from '@emotion/react';\nimport { useIsInView } from '../lib/useIsInView';\n\ntype Props = {\n\tchildren: JSX.Element;\n\tmargin: number;\n\tdisableFlexStyles?: boolean;\n};\n\n// Ensure the ref wrapper expands. This is used for componenents like\n// MostViewedRightWrapper that needs to check it's parent's height\nconst flexGrowStyles = css`\n\tdisplay: flex;\n\tflex-grow: 1;\n`;\n\nexport const Lazy = ({ children, margin, disableFlexStyles }: Props) => {\n\tconst [hasBeenSeen, setRef] = useIsInView({\n\t\trootMargin: `${margin}px`,\n\t});\n\n\t// Without this check below typescript complains because it thinks\n\t// setRef could be false.\n\tif (typeof setRef !== 'function') {\n\t\treturn null;\n\t}\n\n\t// Why do we check to see if we're disabled here? Because we\n\t// use this as a flag to know when a component is\n\t// being loaded as part of a Chromatic story or not so that\n\t// we can prevent lazy loading our storybook snapshots that we\n\t// use for visual regression\n\tconst renderChildren = hasBeenSeen || Lazy.disabled;\n\treturn (\n\t\t<div ref={setRef} css={!disableFlexStyles && flexGrowStyles}>\n\t\t\t{renderChildren && <>{children}</>}\n\t\t</div>\n\t);\n};\n\nLazy.disabled = false;\n","import React, { Suspense } from 'react';\nimport { initPerf } from '../../../browser/initPerf';\nimport { Lazy } from '../../Lazy';\nimport { canShowSignInGate } from '../displayRule';\nimport type { SignInGateComponent } from '../types';\n\nconst SignInGateMain = React.lazy(() => {\n\tconst { start, end } = initPerf('SignInGateMain');\n\tstart();\n\treturn import(\n\t\t/* webpackChunkName: \"SignInGateMain\" */ '../gateDesigns/SignInGateMain'\n\t).then((module) => {\n\t\tend();\n\t\treturn { default: module.SignInGateMain };\n\t});\n});\n\nconst SignInGateMainCheckoutComplete = React.lazy(() => {\n\tconst { start, end } = initPerf('SignInGateMainCheckoutComplete');\n\tstart();\n\treturn import(\n\t\t/* webpackChunkName: \"SignInGateMainCheckoutComplete\" */ '../gateDesigns/SignInGateMainCheckoutComplete'\n\t).then((module) => {\n\t\tend();\n\t\treturn { default: module.SignInGateMainCheckoutComplete };\n\t});\n});\n\n/**\n * GATE PERSONALISATION:\n *\n * If the GU_CO_COMPLETE cookie is present, personalise the sign in gate based on the userType\n * and product information in the cookie value.\n * AB tracking will be registered as part of the main gate AB test, but the component Id string\n * in Ophan ComponentEventTracking will have `_personalised_${userType}_${product}` appended.\n * This occurs in the SignInGateSelector.importable.tsx file\n * There is a feature switch called `personaliseSignInGateAfterCheckout` which can be set in the\n * admin tools, and depending on the state of that switch will determine which variant of the\n * gate to show.\n */\nexport const signInGateComponent: SignInGateComponent = {\n\tgate: ({\n\t\tophanComponentId,\n\t\tdismissGate,\n\t\tguUrl,\n\t\tsignInUrl,\n\t\tabTest,\n\t\tcheckoutCompleteCookieData,\n\t\tpersonaliseSignInGateAfterCheckoutSwitch,\n\t}) => {\n\t\treturn (\n\t\t\t<Lazy margin={300}>\n\t\t\t\t<Suspense fallback={<></>}>\n\t\t\t\t\t{personaliseSignInGateAfterCheckoutSwitch &&\n\t\t\t\t\tcheckoutCompleteCookieData !== undefined ? (\n\t\t\t\t\t\t<SignInGateMainCheckoutComplete\n\t\t\t\t\t\t\tophanComponentId={ophanComponentId}\n\t\t\t\t\t\t\tdismissGate={dismissGate}\n\t\t\t\t\t\t\tguUrl={guUrl}\n\t\t\t\t\t\t\tsignInUrl={signInUrl}\n\t\t\t\t\t\t\tabTest={abTest}\n\t\t\t\t\t\t\tcheckoutCompleteCookieData={\n\t\t\t\t\t\t\t\tcheckoutCompleteCookieData\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<SignInGateMain\n\t\t\t\t\t\t\tophanComponentId={ophanComponentId}\n\t\t\t\t\t\t\tdismissGate={dismissGate}\n\t\t\t\t\t\t\tguUrl={guUrl}\n\t\t\t\t\t\t\tsignInUrl={signInUrl}\n\t\t\t\t\t\t\tabTest={abTest}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Suspense>\n\t\t\t</Lazy>\n\t\t);\n\t},\n\tcanShow: canShowSignInGate,\n};\n","import React, { Suspense } from 'react';\nimport { initPerf } from '../../../browser/initPerf';\nimport { Lazy } from '../../Lazy';\nimport { canShowSignInGate } from '../displayRule';\nimport type { SignInGateComponent } from '../types';\n\nconst SignInGateCopyTestJan2023 = React.lazy(() => {\n\tconst { start, end } = initPerf('SignInGateCopyTestJan2023');\n\tstart();\n\treturn import(\n\t\t/* webpackChunkName: \"SignInGateMain\" */ '../gateDesigns/SignInGateCopyTestJan2023'\n\t).then((module) => {\n\t\tend();\n\t\treturn { default: module.SignInGateCopyTestJan2023 };\n\t});\n});\n\nexport const signInGateCopyTestJan2023Component: SignInGateComponent = {\n\tgate: ({ ophanComponentId, dismissGate, guUrl, signInUrl, abTest }) => (\n\t\t<Lazy margin={300}>\n\t\t\t<Suspense fallback={<></>}>\n\t\t\t\t<SignInGateCopyTestJan2023\n\t\t\t\t\tophanComponentId={ophanComponentId}\n\t\t\t\t\tdismissGate={dismissGate}\n\t\t\t\t\tguUrl={guUrl}\n\t\t\t\t\tsignInUrl={signInUrl}\n\t\t\t\t\tabTest={abTest}\n\t\t\t\t/>\n\t\t\t</Suspense>\n\t\t</Lazy>\n\t),\n\tcanShow: canShowSignInGate,\n};\n","import type { ABTest } from '@guardian/ab-core';\n// Sign in Gate A/B Tests\nimport { signInGateCopyTestJan2023 } from '../../experiments/tests/sign-in-gate-copy-test-variants';\nimport { signInGateMainControl } from '../../experiments/tests/sign-in-gate-main-control';\nimport { signInGateMainVariant } from '../../experiments/tests/sign-in-gate-main-variant';\n// Sign in Gate Types\nimport { signInGateComponent as gateMainControl } from './gates/main-control';\nimport { signInGateComponent as gateMainVariant } from './gates/main-variant';\nimport { signInGateCopyTestJan2023Component } from './gates/sign-in-gate-copy-test-jan2023';\nimport type { SignInGateTestMap } from './types';\n\n/* When adding a new test, you need to add the test name to the tests array below,\n   and add a entry for each variant that maps it to a SignInGateComponent in\n   signInGateTestVariantToGateMapping, and in turn match each test id to an component\n   id in signInGateTestIdToComponentId\n*/\nexport const signInGateTests: ReadonlyArray<ABTest> = [\n\tsignInGateMainVariant,\n\tsignInGateMainControl,\n\tsignInGateCopyTestJan2023,\n];\n\nexport const signInGateTestVariantToGateMapping: SignInGateTestMap = {\n\t'main-control-4': gateMainControl,\n\t'main-variant-4': gateMainVariant,\n\t'quick-and-easy': signInGateCopyTestJan2023Component,\n\t'take-a-moment': signInGateCopyTestJan2023Component,\n\t'sign-in-copy-control': gateMainVariant,\n};\n\n// Component Id does not need to match gate test name, as ab test info passed separately to ophan\n// Consider Id name relevant to the gate component or design. Use snake_case\nexport const signInGateTestIdToComponentId: { [key: string]: string } = {\n\tSignInGateMainVariant: 'main_variant_4',\n\tSignInGateMainControl: 'main_control_4',\n\tSignInGateCopyTestJan2023: 'sign_in_gate_copy_test_jan2023',\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateCopyTestJan2023: ABTest = {\n\tid: 'SignInGateCopyTestJan2023',\n\tstart: '2023-01-23',\n\texpiry: '2025-12-01',\n\tauthor: 'Lindsey Dew',\n\tdescription: 'Test varying the copy in the call to action for sign in gate',\n\taudience: 0.0,\n\taudienceOffset: 0.0,\n\tsuccessMeasure: 'Users sign in or create a Guardian account',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateCopyTest',\n\tidealOutcome:\n\t\t'One variants performs at least 2% better than the control and/OR 10% better than the other variant. Neither variant performs 5% worse than the control',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'quick-and-easy',\n\t\t\ttest: (): void => {},\n\t\t},\n\t\t{\n\t\t\tid: 'take-a-moment',\n\t\t\ttest: (): void => {},\n\t\t},\n\t\t{\n\t\t\tid: 'sign-in-copy-control',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateMainControl: ABTest = {\n\tid: 'SignInGateMainControl',\n\tstart: '2020-05-20',\n\texpiry: '2025-12-01',\n\tauthor: 'Mahesh Makani',\n\tdescription:\n\t\t'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Control Audience.',\n\taudience: 0.1,\n\taudienceOffset: 0.9,\n\tsuccessMeasure: 'N/A - User does not see gate, only to compare to variant.',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateMain',\n\tidealOutcome:\n\t\t'Increase the number of users signed in whilst running at a reasonable scale',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'main-control-4',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateMainVariant: ABTest = {\n\tid: 'SignInGateMainVariant',\n\tstart: '2020-06-09',\n\texpiry: '2025-12-01',\n\tauthor: 'Mahesh Makani',\n\tdescription:\n\t\t'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Main/Variant Audience.',\n\taudience: 0.9,\n\taudienceOffset: 0.0,\n\tsuccessMeasure: 'Users sign in or create a Guardian account',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateMain',\n\tidealOutcome:\n\t\t'Increase the number of users signed in whilst running at a reasonable scale',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'main-variant-4',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTestAPI, Participations } from '@guardian/ab-core';\nimport { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\n\ntype ABTests = {\n\tapi: ABTestAPI;\n\tparticipations: Participations;\n};\n\nconst apiPromise = new Promise<ABTests>(() => {});\nconst key = 'ab-tests';\n\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = (): ABTests | undefined => {\n\tconst { data } = useSWRImmutable(key, () => apiPromise);\n\treturn data;\n};\n\nexport const setABTests = ({ api, participations }: ABTests): void => {\n\tvoid mutate(key, { api, participations }, false);\n};\n","import type { ABTest, Runnable } from '@guardian/ab-core';\nimport {\n\tsignInGateTests,\n\tsignInGateTestVariantToGateMapping,\n} from '../components/SignInGate/signInGate';\nimport type {\n\tCurrentSignInGateABTest,\n\tSignInGateComponent,\n} from '../components/SignInGate/types';\nimport { useAB } from './useAB';\n\n/**\n * @description\n * A custom hook to make which selects the sign in gate (component and ab test)\n * to be displayed on the current page\n * */\nexport const useSignInGateSelector = ():\n\t| undefined\n\t| [SignInGateComponent | null, CurrentSignInGateABTest | null] => {\n\tconst ab = useAB()?.api;\n\tif (!ab) return undefined;\n\n\tconst test: Runnable<ABTest> | null = ab.firstRunnableTest(signInGateTests);\n\n\tif (!test) {\n\t\treturn [null, null];\n\t}\n\n\tconst currentTest: CurrentSignInGateABTest = {\n\t\tname: test.dataLinkNames ?? test.id,\n\t\tvariant: test.variantToRun.id,\n\t\tid: test.id,\n\t};\n\n\tconst gateVariant = signInGateTestVariantToGateMapping[currentTest.variant];\n\n\tif (!gateVariant) {\n\t\treturn [null, null];\n\t}\n\n\treturn [gateVariant, currentTest];\n};\n"],"names":["localStorageKey","localStorageDismissedDateKey","variant","name","localStorageDismissedCountKey","getSigninGatePrefsSafely","localStorage","prefs","JSON","parse","getItem","value","e","setSigninGatePrefs","setItem","stringify","setUserDismissedGate","Date","toISOString","error","hasUserDismissedGate","window","undefined","dismissalTZ","now","unsetUserDismissedGate","retrieveDismissedCount","dismissed","Number","isFinite","hasUserDismissedGateMoreThanCount","count","incrementUserDismissedGateCount","isNPageOrHigherPageView","n","getDailyArticleCount","dailyCount","isIOS9","ua","navigator","userAgent","appleDevice","test","os","isValidContentType","contentType","some","type","isValidSection","sectionName","section","isValidTag","tags","invalidTag","map","tag","id","includes","canShowSignInGate","isSignedIn","currentTest","isPaidContent","isPreview","Promise","resolve","signInGateComponent","canShow","flexGrowStyles","css","Lazy","children","margin","disableFlexStyles","hasBeenSeen","setRef","useIsInView","rootMargin","renderChildren","disabled","div","ref","SignInGateMain","React","start","end","initPerf","then","module","default","SignInGateMainCheckoutComplete","gate","ophanComponentId","dismissGate","guUrl","signInUrl","abTest","checkoutCompleteCookieData","personaliseSignInGateAfterCheckoutSwitch","Suspense","fallback","SignInGateCopyTestJan2023","signInGateCopyTestJan2023Component","signInGateTests","signInGateMainVariant","signInGateMainControl","signInGateCopyTestJan2023","signInGateTestVariantToGateMapping","gateMainControl","gateMainVariant","signInGateTestIdToComponentId","SignInGateMainVariant","SignInGateMainControl","expiry","author","description","audience","audienceOffset","successMeasure","audienceCriteria","dataLinkNames","idealOutcome","showForSensitive","canRun","variants","apiPromise","key","useAB","data","useSWRImmutable","setABTests","api","participations","mutate","useSignInGateSelector","ab","firstRunnableTest","variantToRun","gateVariant"],"sourceRoot":""}