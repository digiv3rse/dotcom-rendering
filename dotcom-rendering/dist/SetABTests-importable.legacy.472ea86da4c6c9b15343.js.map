{"version":3,"file":"SetABTests-importable.legacy.472ea86da4c6c9b15343.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../../../libs/@guardian/ab-core/src/core.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/ab-core/src/time.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/ab-core/src/ophan.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/ab-core/src/ab.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/ab-tests.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/newsletter-merch-unit-test.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/consentless-ads.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/billboards-in-merch.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/elements-manager.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/cypress-switches.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/lib/ab-participations.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/getAbUrlHash.ts","webpack://@guardian/dotcom-rendering/./src/web/components/SetABTests.importable.tsx","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/ab-test-test.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/integrate-ima.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-copy-test-variants.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-main-control.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-main-variant.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useAB.ts"],"sourcesContent":["import type {\n\tABTest,\n\tCoreAPI,\n\tCoreAPIConfig,\n\tRunnable,\n\tVariant,\n} from './@types';\nimport { isExpired } from './time';\n\nexport const initCore = (config: CoreAPIConfig): CoreAPI => {\n\tconst {\n\t\tmvtMaxValue = 1000000,\n\t\tmvtId,\n\t\tpageIsSensitive,\n\t\tabTestSwitches,\n\t\tforcedTestVariants,\n\t\tforcedTestException,\n\t\tarrayOfTestObjects = [],\n\t} = config;\n\n\t/**\n\t * We only take account of a variant's canRun function if it's defined.\n\t * If it's not, assume the variant can be run.\n\t */\n\tconst variantCanBeRun = (variant: Variant): boolean => {\n\t\tconst isInTest = variant.id !== 'notintest';\n\t\tif (variant.canRun) {\n\t\t\treturn variant.canRun() && isInTest;\n\t\t} else {\n\t\t\treturn isInTest;\n\t\t}\n\t};\n\n\tconst testCanBeRun = (test: ABTest): boolean => {\n\t\tconst expired = isExpired(test.expiry);\n\t\tconst testShouldShowForSensitive = !!test.showForSensitive;\n\t\tconst isTestOn =\n\t\t\tabTestSwitches[`ab${test.id}`] && !!abTestSwitches[`ab${test.id}`];\n\t\tconst canTestBeRun = test.canRun();\n\n\t\treturn (\n\t\t\t(pageIsSensitive ? testShouldShowForSensitive : true) &&\n\t\t\t!!isTestOn &&\n\t\t\t!expired &&\n\t\t\tcanTestBeRun\n\t\t);\n\t};\n\n\t/**\n\t *\n\t * Determine whether the user is in the test or not\n\t * and return the associated variant ID, based on the MVT id segmentation.\n\t *\n\t * The test population is just a subset of MVT ids. A test population must\n\t * begin from a specific value. Overlapping test ranges are permitted.\n\t */\n\tconst computeVariantFromMvtCookie = (test: ABTest): Variant | null => {\n\t\tconst smallestTestId = mvtMaxValue * test.audienceOffset;\n\t\tconst largestTestId = smallestTestId + mvtMaxValue * test.audience;\n\n\t\tif (mvtId && mvtId > smallestTestId && mvtId <= largestTestId) {\n\t\t\t// This mvt test id is in the test range, so allocate it to a test variant.\n\t\t\treturn test.variants[mvtId % test.variants.length] ?? null;\n\t\t}\n\n\t\t// We return null if there is no variant that matches the test and variant fot the mvtId\n\t\treturn null;\n\t};\n\n\tconst getForcedTestVariant = (\n\t\ttest: ABTest,\n\t\tforcedTestVariants: CoreAPIConfig['forcedTestVariants'],\n\t): Variant | false => {\n\t\tconst testId = test.id;\n\n\t\tconst getVariantFromIds = (test: ABTest, variantId: string) =>\n\t\t\ttest.variants.find((variant) => variant.id === variantId) ?? false;\n\n\t\tconst forcedTest = forcedTestVariants?.[testId]?.variant;\n\n\t\treturn forcedTest ? getVariantFromIds(test, forcedTest) : false;\n\t};\n\n\t/**\n\t * This is the heart of the A/B testing framework.\n\t * It turns an `ABTest` into a `Runnable<ABTest>`,\n\t * if indeed the test actually has a variant which could run\n\t * on this page view.\n\t *\n\t * This function can be called at any time,\n\t * it should always give the same result for a given page view.\n\t */\n\tconst runnableTest: CoreAPI['runnableTest'] = (test) => {\n\t\tconst fromCookie = computeVariantFromMvtCookie(test);\n\t\tconst variantFromForcedTest = getForcedTestVariant(\n\t\t\ttest,\n\t\t\tforcedTestVariants,\n\t\t);\n\t\tconst forcedOutOfTest = forcedTestException === test.id;\n\t\tconst variantToRun = variantFromForcedTest || fromCookie;\n\n\t\tif (\n\t\t\t!forcedOutOfTest &&\n\t\t\t(variantFromForcedTest || testCanBeRun(test)) && // We ignore the test's canRun if the test is forced\n\t\t\tvariantToRun &&\n\t\t\t(variantFromForcedTest || variantCanBeRun(variantToRun)) // We ignore the variant canRun if the test is forced\n\t\t) {\n\t\t\treturn {\n\t\t\t\t...test,\n\t\t\t\tvariantToRun,\n\t\t\t};\n\t\t}\n\n\t\t// The test and variant isn't runnable, sorry\n\t\treturn null;\n\t};\n\n\tconst allRunnableTests: CoreAPI['allRunnableTests'] = (tests) =>\n\t\ttests.reduce<Array<Runnable<ABTest>>>((prev, currentValue) => {\n\t\t\tconst rt = runnableTest(currentValue);\n\t\t\treturn rt ? [...prev, rt] : prev;\n\t\t}, []);\n\n\tconst firstRunnableTest: CoreAPI['firstRunnableTest'] = (tests) =>\n\t\ttests\n\t\t\t.map((test: ABTest) => runnableTest(test))\n\t\t\t.find((rt: Runnable<ABTest> | null) => rt !== null) ?? null;\n\n\tconst isUserInVariant: CoreAPI['isUserInVariant'] = (testId, variantId) =>\n\t\tallRunnableTests(arrayOfTestObjects).some(\n\t\t\t(runnableTest: ABTest & { variantToRun: Variant }) => {\n\t\t\t\treturn (\n\t\t\t\t\trunnableTest.id === testId &&\n\t\t\t\t\trunnableTest.variantToRun.id === variantId\n\t\t\t\t);\n\t\t\t},\n\t\t);\n\n\treturn {\n\t\tallRunnableTests,\n\t\trunnableTest,\n\t\tfirstRunnableTest,\n\t\tisUserInVariant,\n\t};\n};\n","/** TODO: add to shared libs folder */\nexport const isExpired = (testExpiry: string | number | Date): boolean => {\n\t// Get the current time, we check that right now is not after the end of the text expiry\n\tconst currentTime = new Date().valueOf();\n\n\t// Take the test expiry date and set the hours to the last millisecond of the day\n\tconst theTestExpiry = new Date(testExpiry).setHours(23, 59, 59, 59);\n\n\t// If the endOfToday at 23:59:59 is after the test expiry date at the same time\n\treturn currentTime > theTestExpiry;\n};\n","import type {\n\tABTest,\n\tErrorReporterFunc,\n\tOphanABEvent,\n\tOphanABPayload,\n\tOphanAPI,\n\tOphanAPIConfig,\n\tOphanRecordFunction,\n\tRunnable,\n\tServerSideTests,\n\tVariant,\n} from './@types';\n\nconst noop = () => {\n\t// Do nothing !\n};\n\nconst submit = (\n\tpayload: OphanABPayload,\n\tophanRecord: OphanRecordFunction,\n): void =>\n\tophanRecord({\n\t\tabTestRegister: payload,\n\t});\n\n/**\n * generate an A/B event for Ophan\n */\nconst makeABEvent = (variant: Variant, complete: boolean): OphanABEvent => {\n\tconst event: OphanABEvent = {\n\t\tvariantName: variant.id,\n\t\tcomplete,\n\t};\n\n\t// TODO Test me\n\tif (variant.campaignCode) {\n\t\tevent.campaignCodes = [variant.campaignCode];\n\t}\n\n\treturn event;\n};\n\n/**\n * Checks if this test will defer its impression by providing its own impression function.\n *\n * If it does, the test won't be included in the Ophan call that happens at pageload, and must fire the impression\n * itself via the callback passed to the `impression` property in the variant.\n */\nconst defersImpression = (test: ABTest): boolean =>\n\ttest.variants.every(\n\t\t(variant: Variant): boolean => typeof variant.impression === 'function',\n\t);\n\n/**\n * Create a function that will fire an A/B test to Ophan\n */\nconst buildOphanSubmitter = (\n\ttest: ABTest,\n\tvariant: Variant,\n\tcomplete: boolean,\n\tophanRecord: OphanRecordFunction,\n): (() => void) => {\n\tconst data = {\n\t\t[test.id]: makeABEvent(variant, complete),\n\t};\n\treturn () => submit(data, ophanRecord);\n};\n\n/**\n * Create a function that sets up listener to fire an Ophan `complete` event. This is used in the `success` and\n * `impression` properties of test variants to allow test authors to control when these events are sent out.\n */\nconst registerCompleteEvent =\n\t(\n\t\tcomplete: boolean,\n\t\terrorReporter: ErrorReporterFunc,\n\t\tophanRecord: OphanRecordFunction,\n\t) =>\n\t(test: Runnable<ABTest>): void => {\n\t\tconst variant = test.variantToRun;\n\t\tconst listener = (complete ? variant.success : variant.impression) ?? noop;\n\n\t\ttry {\n\t\t\tlistener(buildOphanSubmitter(test, variant, complete, ophanRecord));\n\t\t} catch (err: unknown) {\n\t\t\terrorReporter(err, {}, false);\n\t\t}\n\t};\n\nconst buildOphanPayload = (\n\ttests: ReadonlyArray<Runnable<ABTest>>,\n\terrorReporter: ErrorReporterFunc,\n\tserverSideTestObj: ServerSideTests,\n): OphanABPayload => {\n\ttry {\n\t\tconst log: OphanABPayload = {};\n\t\tconst serverSideTests = Object.keys(serverSideTestObj).filter(\n\t\t\t(test) => !!serverSideTestObj[test],\n\t\t);\n\n\t\t// @TODO: Test tests vs server-side tests\n\t\ttests\n\t\t\t.filter((test) => !defersImpression(test))\n\t\t\t.forEach((test) => {\n\t\t\t\tlog[test.id] = makeABEvent(test.variantToRun, false);\n\t\t\t});\n\n\t\tserverSideTests.forEach((test) => {\n\t\t\tconst serverSideVariant: Variant = {\n\t\t\t\tid: 'inTest',\n\t\t\t\ttest: () => undefined,\n\t\t\t};\n\n\t\t\tlog[`ab${test}`] = makeABEvent(serverSideVariant, false);\n\t\t});\n\n\t\treturn log;\n\t} catch (error: unknown) {\n\t\t// Encountering an error should invalidate the logging process.\n\t\terrorReporter(error, {}, false);\n\t\treturn {};\n\t}\n};\n\nexport const initOphan = (config: OphanAPIConfig): OphanAPI => {\n\tconst {\n\t\tserverSideTests = {},\n\t\terrorReporter = () => undefined,\n\t\tophanRecord = () => undefined,\n\t} = config;\n\n\tconst registerCompleteEvents: OphanAPI['registerCompleteEvents'] = (\n\t\ttests,\n\t) => {\n\t\treturn tests.forEach(\n\t\t\tregisterCompleteEvent(true, errorReporter, ophanRecord),\n\t\t);\n\t};\n\n\tconst registerImpressionEvents: OphanAPI['registerImpressionEvents'] = (\n\t\ttests,\n\t) => {\n\t\ttests\n\t\t\t.filter(defersImpression)\n\t\t\t.forEach(registerCompleteEvent(false, errorReporter, ophanRecord));\n\t};\n\n\tconst trackABTests: OphanAPI['trackABTests'] = (tests) =>\n\t\tsubmit(\n\t\t\tbuildOphanPayload(tests, errorReporter, serverSideTests),\n\t\t\tophanRecord,\n\t\t);\n\n\treturn { registerCompleteEvents, registerImpressionEvents, trackABTests };\n};\n","import type { AbTestConfig, CoreAPI, OphanAPI } from './@types';\nimport { initCore } from './core';\nimport { initOphan } from './ophan';\n\nexport class AB {\n\tprivate _allRunnableTests: CoreAPI['allRunnableTests'];\n\tprivate _isUserInVariant: CoreAPI['isUserInVariant'];\n\tprivate _firstRunnableTest: CoreAPI['firstRunnableTest'];\n\tprivate _runnableTest: CoreAPI['runnableTest'];\n\n\tprivate _registerCompleteEvents: OphanAPI['registerCompleteEvents'];\n\tprivate _registerImpressionEvents: OphanAPI['registerImpressionEvents'];\n\tprivate _trackABTests: OphanAPI['trackABTests'];\n\n\tconstructor(config: AbTestConfig) {\n\t\tconst {\n\t\t\tmvtMaxValue,\n\t\t\tmvtId,\n\t\t\tpageIsSensitive,\n\t\t\tabTestSwitches,\n\t\t\tserverSideTests,\n\t\t\tforcedTestVariants,\n\t\t\tforcedTestException,\n\t\t\terrorReporter,\n\t\t\tophanRecord,\n\t\t\tarrayOfTestObjects,\n\t\t} = config;\n\n\t\tconst core = initCore({\n\t\t\tmvtMaxValue,\n\t\t\tmvtId,\n\t\t\tpageIsSensitive,\n\t\t\tabTestSwitches,\n\t\t\tforcedTestVariants,\n\t\t\tforcedTestException,\n\t\t\tarrayOfTestObjects,\n\t\t});\n\n\t\tconst ophan = initOphan({\n\t\t\tserverSideTests,\n\t\t\terrorReporter,\n\t\t\tophanRecord,\n\t\t});\n\n\t\tthis._allRunnableTests = core.allRunnableTests;\n\t\tthis._firstRunnableTest = core.firstRunnableTest;\n\t\tthis._runnableTest = core.runnableTest;\n\t\tthis._isUserInVariant = core.isUserInVariant;\n\n\t\tthis._registerCompleteEvents = ophan.registerCompleteEvents;\n\t\tthis._registerImpressionEvents = ophan.registerImpressionEvents;\n\t\tthis._trackABTests = ophan.trackABTests;\n\t}\n\n\t// CoreAPI\n\tget allRunnableTests(): CoreAPI['allRunnableTests'] {\n\t\treturn this._allRunnableTests;\n\t}\n\tget firstRunnableTest(): CoreAPI['firstRunnableTest'] {\n\t\treturn this._firstRunnableTest;\n\t}\n\tget runnableTest(): CoreAPI['runnableTest'] {\n\t\treturn this._runnableTest;\n\t}\n\tget isUserInVariant(): CoreAPI['isUserInVariant'] {\n\t\treturn this._isUserInVariant;\n\t}\n\n\t// OphanAPI\n\tget registerCompleteEvents(): OphanAPI['registerCompleteEvents'] {\n\t\treturn this._registerCompleteEvents;\n\t}\n\tget registerImpressionEvents(): OphanAPI['registerImpressionEvents'] {\n\t\treturn this._registerImpressionEvents;\n\t}\n\tget trackABTests(): OphanAPI['trackABTests'] {\n\t\treturn this._trackABTests;\n\t}\n}\n","import { abTestTest } from './tests/ab-test-test';\nimport { billboardsInMerch } from './tests/billboards-in-merch';\nimport { consentlessAds } from './tests/consentless-ads';\nimport { elementsManager } from './tests/elements-manager';\nimport { integrateIma } from './tests/integrate-ima';\nimport { newsletterMerchUnitLighthouseControl, newsletterMerchUnitLighthouseVariants, } from './tests/newsletter-merch-unit-test';\nimport { signInGateCopyTestJan2023 } from './tests/sign-in-gate-copy-test-variants';\nimport { signInGateMainControl } from './tests/sign-in-gate-main-control';\nimport { signInGateMainVariant } from './tests/sign-in-gate-main-variant';\n// keep in sync with ab-tests in frontend\n// https://github.com/guardian/frontend/tree/main/static/src/javascripts/projects/common/modules/experiments/ab-tests.ts\nexport const tests = [\n    abTestTest,\n    signInGateMainVariant,\n    signInGateMainControl,\n    signInGateCopyTestJan2023,\n    newsletterMerchUnitLighthouseControl,\n    newsletterMerchUnitLighthouseVariants,\n    consentlessAds,\n    integrateIma,\n    billboardsInMerch,\n    elementsManager,\n];\n","export const newsletterMerchUnitLighthouseControl = {\n    id: 'NewsletterMerchUnitLighthouseControl',\n    start: '2020-11-11',\n    expiry: '2020-12-08',\n    author: 'Josh Buckland & Alex Dufournet',\n    description: 'Show BAU merch unit to 50% of users. This is the control for the NewsletterMerchUnitLighthouseVariants test.',\n    audience: 0.5,\n    audienceOffset: 0.0,\n    successMeasure: 'We see increased engagement from users shown the Newsletters ad unit',\n    audienceCriteria: 'Website users only.',\n    idealOutcome: 'Investigate lighthouse segment engagement via newsletters',\n    showForSensitive: false,\n    canRun: () => true,\n    variants: [\n        {\n            id: 'control',\n            test: () => { },\n        },\n    ],\n};\nexport const newsletterMerchUnitLighthouseVariants = {\n    id: 'NewsletterMerchUnitLighthouseVariants',\n    start: '2020-11-11',\n    expiry: '2020-12-08',\n    author: 'Josh Buckland & Alex Dufournet',\n    description: 'Show a newsletter advert in the merchandising unit to 25% of users and reader revenue' +\n        'to another 25%. The remaining 50% are covered by NewsletterMerchUnitLighthouseControl ' +\n        'which needs to run at the same time. These two variants test the value of showing ' +\n        'newsletter merch units instead of reader revenue ones. ',\n    audience: 0.5,\n    audienceOffset: 0.5,\n    successMeasure: 'We see increased engagement from users shown the Newsletters ad unit',\n    audienceCriteria: 'Website users only.',\n    idealOutcome: 'Investigate lighthouse segment engagement via newsletters',\n    showForSensitive: false,\n    canRun: () => true,\n    variants: [\n        {\n            id: 'newsletter',\n            test: () => { },\n        },\n        {\n            id: 'reader-revenue',\n            test: () => { },\n        },\n    ],\n};\n","export const consentlessAds = {\n    id: 'ConsentlessAds',\n    author: '@guardian/commercial-dev',\n    start: '2022-08-11',\n    expiry: '2023-06-01',\n    audience: 0 / 100,\n    audienceOffset: 0 / 100,\n    audienceCriteria: 'All pageviews',\n    successMeasure: 'Testing Opt Out ads in production',\n    description: 'Use consentless ad stack rather than consented / standalone',\n    variants: [\n        { id: 'control', test: () => { } },\n        { id: 'variant', test: () => { } },\n    ],\n    canRun: () => true,\n};\n","export const billboardsInMerch = {\n    id: 'BillboardsInMerch',\n    author: '@commercial-dev',\n    start: '2022-12-07',\n    expiry: '2023-02-31',\n    audience: 0 / 100,\n    audienceOffset: 0 / 100,\n    audienceCriteria: 'Opt in only',\n    successMeasure: 'Test the commercial impact of showing billboard adverts in merchandising slots',\n    description: 'Show billboard adverts in merchandising slots to browsers in the variant',\n    variants: [\n        // TODO Bypass metrics sampling once we increase audience size\n        { id: 'control', test: () => { } },\n        // TODO Bypass metrics sampling once we increase audience size\n        { id: 'variant', test: () => { } },\n    ],\n    canRun: () => true,\n};\n","export const elementsManager = {\n    id: 'ElementsManager',\n    author: '@commercial-dev',\n    start: '2023-02-23',\n    expiry: '2023-06-30',\n    audience: 0 / 100,\n    audienceOffset: 0 / 100,\n    audienceCriteria: 'Opt in only',\n    successMeasure: 'Able to serve GEM assets in ad slots on page',\n    description: 'Test serving GEM assets in ad slots on page',\n    variants: [\n        { id: 'control', test: () => { } },\n        { id: 'variant', test: () => { } },\n    ],\n    canRun: () => true,\n};\n","// Forced AB Test Switches for Cypress testing\n// AB test switches are defined in Frontend and required to be \"ON\" for Cypress E2E Tests to successfully run and pass.\n// However, it is useful to be able to switch an AB test on/off in Frontend Admin UI without breaking tests that rely\n// on those switches in another repo (DCR).\n// By adding the switches here, and the state we want them to be in when we run Cypress tests, we no longer have to\n// worry about the state of the switch in Frontend. In turn allowing tests to pass even if a switch has changed state\n// in Frontend, e.g. a switch has been set to \"OFF\".\n// Add switches to be a specific state in Cypress to this object\nconst cypressSwitches = {\n    abAbTestTest: true,\n    abSignInGateMainControl: true,\n    abSignInGateMainVariant: true,\n    abSignInGateAusMandatory: true,\n};\n// Function to retrieve the switches if running in Cypress\nexport const getCypressSwitches = () => {\n    // If running within cypress, return the forced switches\n    if (window.Cypress)\n        return cypressSwitches;\n    // Otherwise just return empty object\n    return {};\n};\n","import { isObject, isString } from '@guardian/libs';\nconst isParticipations = (participations) => isObject(participations) &&\n    Object.values(participations).every((participation) => isObject(participation) && isString(participation.variant));\nconst runnableTestsToParticipations = (runnableTests) => runnableTests.reduce((participations, { id: testId, variantToRun }) => ({\n    ...participations,\n    ...{\n        [testId]: {\n            variant: variantToRun.id,\n        },\n    },\n}), {});\nexport { isParticipations, runnableTestsToParticipations };\n","export const getForcedParticipationsFromUrl = (windowHash) => {\n    if (windowHash.startsWith('#ab')) {\n        const tokens = windowHash.replace('#ab-', '').split(',');\n        return tokens.reduce((obj, token) => {\n            const [testId, variantId] = token.split('=');\n            if (testId && variantId) {\n                return {\n                    ...obj,\n                    [testId]: { variant: variantId },\n                };\n            }\n            return obj;\n        }, {});\n    }\n    return {};\n};\n","import { AB } from '@guardian/ab-core';\nimport { getCookie, log } from '@guardian/libs';\nimport { getOphanRecordFunction } from '../browser/ophan/ophan';\nimport { tests } from '../experiments/ab-tests';\nimport { getCypressSwitches } from '../experiments/cypress-switches';\nimport { runnableTestsToParticipations } from '../experiments/lib/ab-participations';\nimport { getForcedParticipationsFromUrl } from '../lib/getAbUrlHash';\nimport { setABTests } from '../lib/useAB';\nexport const SetABTests = ({ isDev, pageIsSensitive, abTestSwitches, forcedTestVariants, }) => {\n    const mvtId = Number((isDev &&\n        getCookie({ name: 'GU_mvt_id_local', shouldMemoize: true })) || // Simplify localhost testing by creating a different mvt id\n        getCookie({ name: 'GU_mvt_id', shouldMemoize: true }));\n    if (!mvtId) {\n        // 0 is default and falsy here\n        console.log('There is no MVT ID set, see SetABTests.importable.tsx');\n    }\n    const ophanRecord = getOphanRecordFunction();\n    // Get the forced switches to use for when running within cypress\n    // Is empty object if not in cypress\n    const cypressAbSwitches = getCypressSwitches();\n    const allForcedTestVariants = {\n        ...forcedTestVariants,\n        ...getForcedParticipationsFromUrl(window.location.hash),\n    };\n    const ab = new AB({\n        mvtId,\n        pageIsSensitive,\n        abTestSwitches: {\n            ...abTestSwitches,\n            ...cypressAbSwitches, // by adding cypress switches below CAPI, we can override any production switch in Cypress\n        },\n        arrayOfTestObjects: tests,\n        ophanRecord,\n        forcedTestVariants: allForcedTestVariants,\n    });\n    const allRunnableTests = ab.allRunnableTests(tests);\n    const participations = runnableTestsToParticipations(allRunnableTests);\n    setABTests({\n        api: ab,\n        participations,\n    });\n    ab.trackABTests(allRunnableTests);\n    ab.registerImpressionEvents(allRunnableTests);\n    ab.registerCompleteEvents(allRunnableTests);\n    log('dotcom', 'AB tests initialised');\n    // we don’t render anything\n    return null;\n};\n","export const abTestTest = {\n    id: 'AbTestTest',\n    start: '2020-05-20',\n    expiry: '2023-12-01',\n    author: 'gtrufitt',\n    description: 'This Test',\n    audience: 0.0001,\n    audienceOffset: 0,\n    successMeasure: 'It works',\n    audienceCriteria: 'Everyone',\n    idealOutcome: 'It works',\n    showForSensitive: true,\n    canRun: () => true,\n    variants: [\n        {\n            id: 'control',\n            test: () => { },\n            impression: (impression) => {\n                impression();\n            },\n            success: (success) => {\n                success();\n            },\n        },\n        {\n            id: 'variant',\n            test: () => { },\n            impression: (impression) => {\n                impression();\n            },\n            success: (success) => {\n                success();\n            },\n        },\n    ],\n};\n","export const integrateIma = {\n    id: 'IntegrateIma',\n    start: '2022-07-14',\n    expiry: '2023-04-04',\n    author: 'Zeke Hunter-Green',\n    description: 'Test the commercial impact of replacing YouTube ads with Interactive Media Ads on first-party videos',\n    audience: 0,\n    audienceOffset: 0,\n    audienceCriteria: 'Opt in',\n    successMeasure: 'IMA integration works as expected without adversely affecting pages with videos',\n    canRun: () => true,\n    variants: [\n        { id: 'control', test: () => { } },\n        { id: 'variant', test: () => { } },\n    ],\n};\n","export const signInGateCopyTestJan2023 = {\n    id: 'SignInGateCopyTestJan2023',\n    start: '2023-01-23',\n    expiry: '2025-12-01',\n    author: 'Lindsey Dew',\n    description: 'Test varying the copy in the call to action for sign in gate',\n    audience: 0.0,\n    audienceOffset: 0.0,\n    successMeasure: 'Users sign in or create a Guardian account',\n    audienceCriteria: '3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n    dataLinkNames: 'SignInGateCopyTest',\n    idealOutcome: 'One variants performs at least 2% better than the control and/OR 10% better than the other variant. Neither variant performs 5% worse than the control',\n    showForSensitive: false,\n    canRun: () => true,\n    variants: [\n        {\n            id: 'quick-and-easy',\n            test: () => { },\n        },\n        {\n            id: 'take-a-moment',\n            test: () => { },\n        },\n        {\n            id: 'sign-in-copy-control',\n            test: () => { },\n        },\n    ],\n};\n","export const signInGateMainControl = {\n    id: 'SignInGateMainControl',\n    start: '2020-05-20',\n    expiry: '2025-12-01',\n    author: 'Mahesh Makani',\n    description: 'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Control Audience.',\n    audience: 0.1,\n    audienceOffset: 0.9,\n    successMeasure: 'N/A - User does not see gate, only to compare to variant.',\n    audienceCriteria: '3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n    dataLinkNames: 'SignInGateMain',\n    idealOutcome: 'Increase the number of users signed in whilst running at a reasonable scale',\n    showForSensitive: false,\n    canRun: () => true,\n    variants: [\n        {\n            id: 'main-control-4',\n            test: () => { },\n        },\n    ],\n};\n","export const signInGateMainVariant = {\n    id: 'SignInGateMainVariant',\n    start: '2020-06-09',\n    expiry: '2025-12-01',\n    author: 'Mahesh Makani',\n    description: 'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Main/Variant Audience.',\n    audience: 0.9,\n    audienceOffset: 0.0,\n    successMeasure: 'Users sign in or create a Guardian account',\n    audienceCriteria: '3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n    dataLinkNames: 'SignInGateMain',\n    idealOutcome: 'Increase the number of users signed in whilst running at a reasonable scale',\n    showForSensitive: false,\n    canRun: () => true,\n    variants: [\n        {\n            id: 'main-variant-4',\n            test: () => { },\n        },\n    ],\n};\n","import { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\nconst apiPromise = new Promise(() => { });\nconst key = 'ab-tests';\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = () => {\n    const { data } = useSWRImmutable(key, () => apiPromise);\n    return data;\n};\nexport const setABTests = ({ api, participations }) => {\n    void mutate(key, { api, participations }, false);\n};\n"],"names":["config","mvtMaxValue","isInTest","fromCookie","smallestTestId","test","audienceOffset","largestTestId","mvtId","computeVariantFromMvtCookie","variantFromForcedTest","getForcedTestVariant","testId","forcedTest","forcedTestVariants","variant","getVariantFromIds","variantToRun","forcedOutOfTest","testCanBeRun","testExpiry","expired","Date","valueOf","setHours","testShouldShowForSensitive","isTestOn","id","canTestBeRun","allRunnableTests","rt","prev","runnableTest","firstRunnableTest","map","find","isUserInVariant","variantId","noop","submit","payload","ophanRecord","abTestRegister","makeABEvent","complete","event","variantName","campaignCode","campaignCodes","defersImpression","variants","every","impression","registerCompleteEvent","errorReporter","listener","success","data","buildOphanSubmitter","err","initOphan","serverSideTests","registerCompleteEvents","tests","forEach","registerImpressionEvents","filter","trackABTests","serverSideTestObj","log","Object","keys","error","buildOphanPayload","core","pageIsSensitive","abTestSwitches","forcedTestException","arrayOfTestObjects","ophan","this","_firstRunnableTest","_runnableTest","_isUserInVariant","_registerCompleteEvents","_registerImpressionEvents","_trackABTests","abTestTest","signInGateMainVariant","signInGateMainControl","signInGateCopyTestJan2023","start","expiry","author","description","audience","successMeasure","audienceCriteria","idealOutcome","showForSensitive","canRun","integrateIma","cypressSwitches","abAbTestTest","abSignInGateMainControl","abSignInGateMainVariant","abSignInGateAusMandatory","SetABTests","isDev","Number","getCookie","name","shouldMemoize","console","windowHash","getOphanRecordFunction","cypressAbSwitches","window","Cypress","allForcedTestVariants","location","hash","startsWith","replace","split","reduce","obj","token","ab","AB","participations","setABTests","api","dataLinkNames","apiPromise","Promise","key","useAB","useSWRImmutable","mutate"],"sourceRoot":""}