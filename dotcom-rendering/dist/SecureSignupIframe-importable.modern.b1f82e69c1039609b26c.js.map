{"version":3,"file":"SecureSignupIframe-importable.modern.b1f82e69c1039609b26c.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/web/components/SecureSignupIframe.importable.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport type { OphanAction } from '@guardian/libs';\nimport { neutral, space, until } from '@guardian/source-foundations';\nimport {\n\tButton,\n\tInlineError,\n\tInlineSuccess,\n\tLink,\n\tSvgReload,\n\tSvgSpinner,\n} from '@guardian/source-react-components';\nimport type { ReactEventHandler } from 'react';\nimport { useRef, useState } from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport {\n\tgetOphanRecordFunction,\n\tsubmitComponentEvent,\n} from '../browser/ophan/ophan';\n\nconst isServer = typeof window === 'undefined';\n\n// The Google documentation specifies that if the 'recaptcha-badge' is hidden,\n// their T+C's must be displayed instead. While this component hides the\n// badge, its parent must include the T+C along side it.\n// The T+C are not included in this componet directly to reduce layout shift\n// from the island hydrating (placeholder height for the text can't\n// be accurately predicated for every breakpoint).\n// https://developers.google.com/recaptcha/docs/faq#id-like-to-hide-the-recaptcha-badge.-what-is-allowed\n\ntype Props = {\n\tname: string;\n\tstyles: string;\n\thtml: string;\n\tnewsletterId: string;\n\tsuccessDescription: string;\n};\n\n// The ts.dom interface for FontFaceSet does not contain the .add method\ntype FontFaceSetWithAdd = FontFaceSet & {\n\tadd?: { (font: FontFace): void };\n};\n\nconst ErrorMessageWithAdvice = ({ text }: { text?: string }) => (\n\t<InlineError>\n\t\t<span>\n\t\t\t{text} Please try again or contact{' '}\n\t\t\t<Link\n\t\t\t\thref=\"mailto:customer.help@theguardian.com\"\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\trel=\"noreferrer\"\n\t\t\t>\n\t\t\t\tcustomer.help@theguardian.com\n\t\t\t</Link>\n\t\t</span>\n\t</InlineError>\n);\n\nconst SuccessMessage = ({ text }: { text?: string }) => (\n\t<InlineSuccess>\n\t\t<span>\n\t\t\t<b>Subscription Confirmed.&nbsp;</b>\n\t\t\t<span>{text}</span>\n\t\t</span>\n\t</InlineSuccess>\n);\n\nconst buildFormData = (\n\temailAddress: string,\n\tnewsletterId: string,\n\ttoken: string,\n): FormData => {\n\tconst pageRef = window.location.origin + window.location.pathname;\n\tconst refViewId = window.guardian.ophan?.pageViewId ?? '';\n\n\tconst formData = new FormData();\n\tformData.append('email', emailAddress);\n\tformData.append('csrfToken', ''); // TO DO - PR on form handlers in frontend/identity to see how/if this is needed\n\tformData.append('listName', newsletterId);\n\tformData.append('ref', pageRef);\n\tformData.append('refViewId', refViewId);\n\tformData.append('name', '');\n\tif (window.guardian.config.switches.emailSignupRecaptcha) {\n\t\tformData.append('g-recaptcha-response', token); // TO DO - PR on form handlers - is the token verified?\n\t}\n\n\treturn formData;\n};\n\nconst postFormData = async (\n\tendpoint: string,\n\tformData: FormData,\n): Promise<Response> => {\n\tconst requestBodyStrings: string[] = [];\n\n\tformData.forEach((value, key) => {\n\t\trequestBodyStrings.push(\n\t\t\t`${encodeURIComponent(key)}=${encodeURIComponent(\n\t\t\t\tvalue.toString(),\n\t\t\t)}`,\n\t\t);\n\t});\n\n\treturn fetch(endpoint, {\n\t\tmethod: 'POST',\n\t\tbody: requestBodyStrings.join('&'),\n\t\theaders: {\n\t\t\tAccept: 'application/json',\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t},\n\t});\n};\n\ntype EventDescription =\n\t| 'click-button'\n\t| 'form-submission'\n\t| 'submission-confirmed'\n\t| 'submission-failed'\n\t| 'open-captcha'\n\t| 'captcha-load-error'\n\t| 'form-submit-error'\n\t| 'captcha-not-passed'\n\t| 'captcha-passed';\n\nconst sendTracking = (\n\tnewsletterId: string,\n\teventDescription: EventDescription,\n): void => {\n\tconst ophanRecord = getOphanRecordFunction();\n\n\tlet action: OphanAction = 'CLICK';\n\n\tswitch (eventDescription) {\n\t\tcase 'form-submission':\n\t\tcase 'captcha-not-passed':\n\t\tcase 'captcha-passed':\n\t\t\taction = 'ANSWER';\n\t\t\tbreak;\n\t\tcase 'submission-confirmed':\n\t\t\taction = 'SUBSCRIBE';\n\t\t\tbreak;\n\t\tcase 'captcha-load-error':\n\t\tcase 'form-submit-error':\n\t\tcase 'submission-failed':\n\t\t\taction = 'CLOSE';\n\t\t\tbreak;\n\t\tcase 'open-captcha':\n\t\t\taction = 'EXPAND';\n\t\t\tbreak;\n\t\tcase 'click-button':\n\t\tdefault:\n\t\t\taction = 'CLICK';\n\t\t\tbreak;\n\t}\n\n\t// The data team use a custom date format for timestamps,\n\t// (yyy-MM-dd hh:mm:ss.ssssss UTC)\n\t// and will cast the integer value  to this\n\t// format at their end\n\tconst value = JSON.stringify({\n\t\teventDescription,\n\t\tnewsletterId,\n\t\ttimestamp: Date.now(),\n\t});\n\n\tsubmitComponentEvent(\n\t\t{\n\t\t\taction,\n\t\t\tvalue,\n\t\t\tcomponent: {\n\t\t\t\tcomponentType: 'NEWSLETTER_SUBSCRIPTION',\n\t\t\t\tid: `DCR SecureSignupIframe ${newsletterId}`,\n\t\t\t},\n\t\t},\n\t\tophanRecord,\n\t);\n};\n\n/**\n * # Secure Signup iFrame\n *\n * A descendent of `EmailSignup` used to prevent users from entering their email\n * on the same page as the one we run third-party scripts on.\n *\n * ## Why does this need to be an Island?\n *\n * We can only inject ReCAPTCHA client-side, and need to respond to user input.\n *\n * ---\n *\n * [`EmailSignup` on Chromatic](https://www.chromatic.com/component?appId=63e251470cfbe61776b0ef19&csfId=components-emailsignup)\n */\nexport const SecureSignupIframe = ({\n\tname,\n\tstyles,\n\thtml,\n\tnewsletterId,\n\tsuccessDescription,\n}: Props) => {\n\tconst iframeRef = useRef<HTMLIFrameElement>(null);\n\tconst recaptchaRef = useRef<ReCAPTCHA>(null);\n\n\tconst [iframeHeight, setIFrameHeight] = useState<number>(0);\n\tconst [isWaitingForResponse, setIsWaitingForResponse] =\n\t\tuseState<boolean>(false);\n\tconst [responseOk, setResponseOk] = useState<boolean | undefined>(\n\t\tundefined,\n\t);\n\tconst [errorMessage, setErrorMessage] = useState<string | undefined>(\n\t\tundefined,\n\t);\n\n\tconst hasResponse = typeof responseOk === 'boolean';\n\n\tconst submitForm = async (token: string): Promise<void> => {\n\t\tconst { current: iframe } = iframeRef;\n\t\tconst input: HTMLInputElement | null =\n\t\t\tiframe?.contentDocument?.querySelector('input[type=\"email\"]') ??\n\t\t\tnull;\n\t\tconst emailAddress: string = input?.value ?? '';\n\n\t\tsendTracking(newsletterId, 'form-submission');\n\t\tconst response = await postFormData(\n\t\t\twindow.guardian.config.page.ajaxUrl + '/email',\n\t\t\tbuildFormData(emailAddress, newsletterId, token),\n\t\t);\n\n\t\t// The response body could be accessed with await response.text()\n\t\t// here and added to state but the response is not informative\n\t\t// enough to convey the actualreason for a failure to the user,\n\t\t// so a generic failure message is used.\n\t\tsetIsWaitingForResponse(false);\n\t\tsetResponseOk(response.ok);\n\n\t\tsendTracking(\n\t\t\tnewsletterId,\n\t\t\tresponse.ok ? 'submission-confirmed' : 'submission-failed',\n\t\t);\n\t};\n\n\tconst resetForm: ReactEventHandler<HTMLButtonElement> = () => {\n\t\tsetErrorMessage(undefined);\n\t\tsetResponseOk(undefined);\n\t\trecaptchaRef.current?.reset();\n\t};\n\n\tconst handleCaptchaLoadError: ReactEventHandler<HTMLDivElement> = () => {\n\t\tsendTracking(newsletterId, 'captcha-load-error');\n\t\tsetErrorMessage(`Sorry, the reCAPTCHA failed to load.`);\n\t\trecaptchaRef.current?.reset();\n\t};\n\n\tconst handleCaptchaComplete = (token: string | null) => {\n\t\tif (!token) {\n\t\t\tsendTracking(newsletterId, 'captcha-not-passed');\n\t\t\treturn;\n\t\t}\n\t\tsendTracking(newsletterId, 'captcha-passed');\n\t\tsetIsWaitingForResponse(true);\n\t\tsubmitForm(token).catch((error) => {\n\t\t\t// eslint-disable-next-line no-console -- unexpected error\n\t\t\tconsole.error(error);\n\t\t\tsendTracking(newsletterId, 'form-submit-error');\n\t\t\tsetErrorMessage(`Sorry, there was an error signing you up.`);\n\t\t\tsetIsWaitingForResponse(false);\n\t\t});\n\t};\n\n\tconst resizeIframe = (requestedHeight = 0): void => {\n\t\tconst { current: iframe } = iframeRef;\n\t\tif (!iframe) {\n\t\t\treturn;\n\t\t}\n\t\t// verifiying the body is present before accessing the scrollHeight is necessary\n\t\t// iframe.contentDocument?.body.scrollHeight can cause a TypeError\n\t\t// the typing assumes body is always present on a Document but the use of\n\t\t// srcDoc seems to allow the document to exist without the body.\n\n\t\tconst body = iframe.contentDocument?.body;\n\t\tconst scrollHeight = body ? body.scrollHeight : 0;\n\t\tsetIFrameHeight(Math.max(0, requestedHeight, scrollHeight));\n\t};\n\n\tconst resetIframeHeight = (): void => {\n\t\tresizeIframe();\n\t};\n\n\tconst handleClickInIFrame = (): void => {\n\t\tsendTracking(newsletterId, 'click-button');\n\t};\n\n\tconst handleSubmitInIFrame = (event: Event): void => {\n\t\tevent.preventDefault();\n\t\tif (isWaitingForResponse) {\n\t\t\treturn;\n\t\t}\n\t\tsetErrorMessage(undefined);\n\t\tsendTracking(newsletterId, 'open-captcha');\n\t\trecaptchaRef.current?.execute();\n\t};\n\n\tconst attachListenersToIframe = () => {\n\t\tconst { current: iframe } = iframeRef;\n\t\tiframe?.contentWindow?.addEventListener('resize', resetIframeHeight);\n\t\tconst form = iframe?.contentDocument?.querySelector('form');\n\t\tconst button = iframe?.contentDocument?.querySelector('button');\n\t\tbutton?.addEventListener('click', handleClickInIFrame);\n\t\tform?.addEventListener('submit', handleSubmitInIFrame);\n\t\tresetIframeHeight();\n\t};\n\n\tconst addFontsToIframe = (requiredFontNames: string[]) => {\n\t\tconst { current: iframe } = iframeRef;\n\n\t\t// FontFace.add is not supported (IE), allow fallback to system fonts\n\t\tconst iframeFontFaceSet = iframe?.contentDocument?.fonts as\n\t\t\t| undefined\n\t\t\t| FontFaceSetWithAdd;\n\t\tif (!iframeFontFaceSet?.add) {\n\t\t\treturn;\n\t\t}\n\n\t\t// get all the fontFaces on the parent matching the list of font names\n\t\tconst requiredFonts: FontFace[] = [];\n\t\tdocument.fonts.forEach((fontFace) => {\n\t\t\tif (requiredFontNames.includes(fontFace.family)) {\n\t\t\t\trequiredFonts.push(fontFace);\n\t\t\t}\n\t\t});\n\n\t\t// add the fonts to the iframe\n\t\trequiredFonts.forEach((font) => {\n\t\t\ttry {\n\t\t\t\tiframeFontFaceSet.add(font);\n\t\t\t} catch (error) {\n\t\t\t\t// Safari throws an InvalidModificationError\n\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/add#exceptions\n\t\t\t}\n\t\t});\n\t};\n\n\tconst onIFrameLoad = (): void => {\n\t\tattachListenersToIframe();\n\t\taddFontsToIframe(['GuardianTextSans']);\n\t};\n\n\tconst captchaSiteKey = isServer\n\t\t? undefined\n\t\t: window.guardian.config.page.googleRecaptchaSiteKey;\n\n\treturn (\n\t\t<>\n\t\t\t<iframe\n\t\t\t\ttitle={`Sign up to ${name}`}\n\t\t\t\tref={iframeRef}\n\t\t\t\tcss={css`\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\tmin-height: 65px;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t`}\n\t\t\t\tstyle={{\n\t\t\t\t\theight: iframeHeight,\n\t\t\t\t\tdisplay:\n\t\t\t\t\t\thasResponse || isWaitingForResponse ? 'none' : 'block',\n\t\t\t\t}}\n\t\t\t\tsrcDoc={`\n\t\t\t\t<html>\n\t\t\t\t\t<head>\n\t\t\t\t\t\t${styles}\n\t\t\t\t\t</head>\n\t\t\t\t\t<body style=\"margin: 0; overflow:hidden;\">${html}</body>\n\t\t\t\t</html>`}\n\t\t\t\tonLoad={onIFrameLoad}\n\t\t\t/>\n\n\t\t\t{isWaitingForResponse && (\n\t\t\t\t<div>\n\t\t\t\t\t<SvgSpinner isAnnouncedByScreenReader={true} size=\"small\" />\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t{!!errorMessage && <ErrorMessageWithAdvice text={errorMessage} />}\n\n\t\t\t{hasResponse &&\n\t\t\t\t(responseOk ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<SuccessMessage text={successDescription} />\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div\n\t\t\t\t\t\tcss={css`\n\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\talign-items: flex-start;\n\t\t\t\t\t\t\t${until.tablet} {\n\t\t\t\t\t\t\t\tflex-wrap: wrap;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\tmargin-left: ${space[1]}px;\n\t\t\t\t\t\t\t\tbackground-color: ${neutral[0]};\n\t\t\t\t\t\t\t\t:hover {\n\t\t\t\t\t\t\t\t\tbackground-color: ${neutral[20]};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ErrorMessageWithAdvice text={`Sign up failed.`} />\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\ticon={<SvgReload />}\n\t\t\t\t\t\t\ticonSide={'right'}\n\t\t\t\t\t\t\tonClick={resetForm}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tTry again\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\n\t\t\t{!!captchaSiteKey && (\n\t\t\t\t<div\n\t\t\t\t\tcss={css`\n\t\t\t\t\t\t.grecaptcha-badge {\n\t\t\t\t\t\t\tvisibility: hidden;\n\t\t\t\t\t\t}\n\t\t\t\t\t`}\n\t\t\t\t>\n\t\t\t\t\t<ReCAPTCHA\n\t\t\t\t\t\tsitekey={captchaSiteKey}\n\t\t\t\t\t\tref={recaptchaRef}\n\t\t\t\t\t\tonChange={handleCaptchaComplete}\n\t\t\t\t\t\tonError={handleCaptchaLoadError}\n\t\t\t\t\t\tsize=\"invisible\"\n\t\t\t\t\t\t// Note - the component supports an onExpired callback\n\t\t\t\t\t\t// (for when the user completed a challenge, but did\n\t\t\t\t\t\t// not submit the form before the token expired.\n\t\t\t\t\t\t// We don't need that here as completing the captcha\n\t\t\t\t\t\t// (onChange callback) triggers the submission\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n};\n"],"names":["isServer","window","ErrorMessageWithAdvice","text","InlineError","span","Link","href","target","rel","SuccessMessage","InlineSuccess","b","sendTracking","newsletterId","eventDescription","ophanRecord","getOphanRecordFunction","action","value","JSON","stringify","timestamp","Date","now","submitComponentEvent","component","componentType","id","SecureSignupIframe","name","styles","html","successDescription","iframeRef","useRef","recaptchaRef","iframeHeight","setIFrameHeight","useState","isWaitingForResponse","setIsWaitingForResponse","responseOk","setResponseOk","undefined","errorMessage","setErrorMessage","hasResponse","resetIframeHeight","requestedHeight","iframe","current","body","contentDocument","scrollHeight","Math","max","resizeIframe","handleClickInIFrame","handleSubmitInIFrame","event","preventDefault","execute","captchaSiteKey","guardian","config","page","googleRecaptchaSiteKey","title","ref","css","style","height","display","srcDoc","onLoad","contentWindow","addEventListener","form","querySelector","button","attachListenersToIframe","requiredFontNames","iframeFontFaceSet","fonts","add","requiredFonts","document","forEach","fontFace","includes","family","push","font","error","addFontsToIframe","div","SvgSpinner","isAnnouncedByScreenReader","size","until","space","neutral","Button","icon","SvgReload","iconSide","onClick","reset","ReCAPTCHA","sitekey","onChange","token","async","input","emailAddress","response","endpoint","formData","requestBodyStrings","key","encodeURIComponent","toString","fetch","method","join","headers","Accept","postFormData","ajaxUrl","pageRef","location","origin","pathname","refViewId","ophan","pageViewId","FormData","append","switches","emailSignupRecaptcha","buildFormData","ok","submitForm","catch","console","onError"],"sourceRoot":""}