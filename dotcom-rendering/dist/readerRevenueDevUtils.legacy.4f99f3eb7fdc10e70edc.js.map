{"version":3,"file":"readerRevenueDevUtils.legacy.4f99f3eb7fdc10e70edc.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/web/lib/alreadyVisited.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/contributions.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/getIdapiUserData.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/libs/src/cookies/setCookie.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/readerRevenueDevUtils.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/libs/src/cookies/removeCookie.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useOnce.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/libs/src/joinUrl/joinUrl.ts"],"sourcesContent":["const AlreadyVisitedKey = 'gu.alreadyVisited';\nexport const getAlreadyVisitedCount = () => {\n    const alreadyVisited = parseInt(localStorage.getItem(AlreadyVisitedKey) ?? '', 10);\n    return !Number.isNaN(alreadyVisited) ? alreadyVisited : 0;\n};\nexport const setAlreadyVisited = (count) => {\n    localStorage.setItem(AlreadyVisitedKey, count.toString());\n};\nexport const incrementAlreadyVisited = () => {\n    const alreadyVisited = getAlreadyVisitedCount();\n    setAlreadyVisited(alreadyVisited + 1);\n};\n","import { onConsentChange } from '@guardian/consent-management-platform';\nimport { getCookie } from '@guardian/libs';\nimport { useState } from 'react';\nimport { getIdApiUserData } from './getIdapiUserData';\nimport { useOnce } from './useOnce';\n// User Atributes API cookies (dropped on sign-in)\nexport const HIDE_SUPPORT_MESSAGING_COOKIE = 'gu_hide_support_messaging';\nexport const RECURRING_CONTRIBUTOR_COOKIE = 'gu_recurring_contributor';\nexport const ONE_OFF_CONTRIBUTION_DATE_COOKIE = 'gu_one_off_contribution_date';\nexport const OPT_OUT_OF_ARTICLE_COUNT_COOKIE = 'gu_article_count_opt_out';\n// Support Frontend cookies (dropped when contribution is made)\nexport const SUPPORT_RECURRING_CONTRIBUTOR_MONTHLY_COOKIE = 'gu.contributions.recurring.contrib-timestamp.Monthly';\nexport const SUPPORT_RECURRING_CONTRIBUTOR_ANNUAL_COOKIE = 'gu.contributions.recurring.contrib-timestamp.Annual';\nexport const SUPPORT_ONE_OFF_CONTRIBUTION_COOKIE = 'gu.contributions.contrib-timestamp';\n//  Local storage keys\nconst DAILY_ARTICLE_COUNT_KEY = 'gu.history.dailyArticleCount';\nconst WEEKLY_ARTICLE_COUNT_KEY = 'gu.history.weeklyArticleCount';\nexport const NO_RR_BANNER_TIMESTAMP_KEY = 'gu.noRRBannerTimestamp'; // timestamp of when we were last told not to show a RR banner\n// See https://github.com/guardian/support-dotcom-components/blob/main/module-versions.md\nexport const MODULES_VERSION = 'v3';\n// Cookie set by the User Attributes API upon signing in.\n// Value computed server-side and looks at all of the user's active products,\n// including but not limited to recurring & one-off contributions,\n// paper & digital subscriptions, as well as user tiers (GU supporters/staff/partners/patrons).\n// https://github.com/guardian/members-data-api/blob/3a72dc00b9389968d91e5930686aaf34d8040c52/membership-attribute-service/app/models/Attributes.scala\nconst shouldShowSupportMessaging = () => {\n    const hideSupportMessaging = getCookie({ name: HIDE_SUPPORT_MESSAGING_COOKIE }) === 'true';\n    return !hideSupportMessaging;\n};\n// Determine if user is a recurring contributor by checking if they are signed in\n// AND have at least one of the relevant cookies.\n// We need to look at both User Attributes and Frontend Support cookies\n// as the former might not reflect the latest contributor status, since it's set upon signing in.\n// Frontend Support cookies are set when a contribution is made.\nexport const isRecurringContributor = (isSignedIn) => {\n    // Attributes cookie - we want this to have a specific value\n    const isRecurringContributorFromAttrs = getCookie({ name: RECURRING_CONTRIBUTOR_COOKIE }) === 'true';\n    // Support cookies - we only care whether these exist\n    const hasMonthlyContributionCookie = getCookie({\n        name: SUPPORT_RECURRING_CONTRIBUTOR_MONTHLY_COOKIE,\n        shouldMemoize: true,\n    }) !== null;\n    const hasAnnualContributionCookie = getCookie({\n        name: SUPPORT_RECURRING_CONTRIBUTOR_ANNUAL_COOKIE,\n        shouldMemoize: true,\n    }) !== null;\n    return (isSignedIn &&\n        (isRecurringContributorFromAttrs ||\n            hasMonthlyContributionCookie ||\n            hasAnnualContributionCookie));\n};\n// looks at attribute and support cookies\n// ONE_OFF_CONTRIBUTION_DATE_COOKIE (attributes cookie, when loggin in)\n// SUPPORT_ONE_OFF_CONTRIBUTION_COOKIE (support cookie, when making one-off contribution)\n// Get the date of the latest one-off contribution by looking at the two relevant cookies\n// and returning a Unix epoch string of the latest date found.\nexport const getLastOneOffContributionTimestamp = () => {\n    // Attributes cookie - expects YYYY-MM-DD\n    const contributionDateFromAttributes = getCookie({\n        name: ONE_OFF_CONTRIBUTION_DATE_COOKIE,\n    });\n    // Support cookies - expects Unix epoch\n    const contributionDateFromSupport = getCookie({\n        name: SUPPORT_ONE_OFF_CONTRIBUTION_COOKIE,\n    });\n    if (!contributionDateFromAttributes && !contributionDateFromSupport) {\n        return undefined;\n    }\n    // Parse dates into common format so they can be compared\n    const parsedDateFromAttributes = contributionDateFromAttributes\n        ? Date.parse(contributionDateFromAttributes)\n        : 0;\n    const parsedDateFromSupport = contributionDateFromSupport\n        ? parseInt(contributionDateFromSupport, 10)\n        : 0;\n    // Return most recent date\n    // Condition only passed if 'parsedDateFromAttributes' is NOT NaN\n    if (parsedDateFromAttributes > parsedDateFromSupport) {\n        return parsedDateFromAttributes;\n    }\n    return parsedDateFromSupport || undefined; // This guards against 'parsedDateFromSupport' being NaN\n};\nexport const getLastOneOffContributionDate = () => {\n    const timestamp = getLastOneOffContributionTimestamp();\n    if (timestamp === undefined) {\n        return undefined;\n    }\n    const date = new Date(timestamp);\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n};\nconst dateDiffDays = (from, to) => {\n    const oneDayMs = 1000 * 60 * 60 * 24;\n    const diffMs = to - from;\n    return Math.floor(diffMs / oneDayMs);\n};\nconst AskPauseDays = 90;\nexport const isRecentOneOffContributor = () => {\n    const lastContributionDate = getLastOneOffContributionTimestamp();\n    if (lastContributionDate !== undefined) {\n        const now = Date.now();\n        return dateDiffDays(lastContributionDate, now) <= AskPauseDays;\n    }\n    return false;\n};\nexport const shouldHideSupportMessaging = (isSignedIn = false) => !shouldShowSupportMessaging() ||\n    isRecurringContributor(isSignedIn) ||\n    isRecentOneOffContributor();\nexport const REQUIRED_CONSENTS_FOR_ARTICLE_COUNT = [1, 3, 7];\nconst REQUIRED_CONSENTS_FOR_BROWSER_ID = [1, 3, 5, 7];\nexport const hasArticleCountOptOutCookie = () => getCookie({ name: OPT_OUT_OF_ARTICLE_COUNT_COOKIE }) !== null;\nconst removeArticleCountsFromLocalStorage = () => {\n    window.localStorage.removeItem(DAILY_ARTICLE_COUNT_KEY);\n    window.localStorage.removeItem(WEEKLY_ARTICLE_COUNT_KEY);\n};\nexport const hasCmpConsentForArticleCount = () => {\n    return new Promise((resolve) => {\n        if (getCookie({ name: 'gu-cmp-disabled', shouldMemoize: true })) {\n            resolve(true);\n        }\n        onConsentChange(({ ccpa, tcfv2, aus }) => {\n            if (ccpa || aus) {\n                resolve(true);\n            }\n            else if (tcfv2) {\n                const hasRequiredConsents = REQUIRED_CONSENTS_FOR_ARTICLE_COUNT.every((consent) => tcfv2.consents[consent]);\n                if (!hasRequiredConsents) {\n                    removeArticleCountsFromLocalStorage();\n                }\n                resolve(hasRequiredConsents);\n            }\n        });\n    });\n};\nexport const hasOptedOutOfArticleCount = async () => {\n    const hasCmpConsent = await hasCmpConsentForArticleCount();\n    return !hasCmpConsent || hasArticleCountOptOutCookie();\n};\n// A hook to find out if a user has opted out of article counting\nexport const useHasOptedOutOfArticleCount = () => {\n    const [hasOptedOut, setHasOptedOut] = useState('Pending');\n    useOnce(() => {\n        hasOptedOutOfArticleCount()\n            .then(setHasOptedOut)\n            .catch(() => setHasOptedOut(true));\n    }, []);\n    return hasOptedOut;\n};\nexport const hasCmpConsentForBrowserId = () => new Promise((resolve) => {\n    if (getCookie({ name: 'gu-cmp-disabled', shouldMemoize: true })) {\n        resolve(true);\n    }\n    onConsentChange(({ ccpa, tcfv2, aus }) => {\n        if (ccpa || aus) {\n            resolve(true);\n        }\n        else if (tcfv2) {\n            const hasRequiredConsents = REQUIRED_CONSENTS_FOR_BROWSER_ID.every((consent) => tcfv2.consents[consent]);\n            resolve(hasRequiredConsents);\n        }\n    });\n});\nconst twentyMins = 20 * 60000;\nexport const withinLocalNoBannerCachePeriod = () => {\n    const item = window.localStorage.getItem(NO_RR_BANNER_TIMESTAMP_KEY);\n    if (item && !Number.isNaN(parseInt(item, 10))) {\n        const withinCachePeriod = parseInt(item, 10) + twentyMins > Date.now();\n        if (!withinCachePeriod) {\n            // Expired\n            window.localStorage.removeItem(NO_RR_BANNER_TIMESTAMP_KEY);\n        }\n        return withinCachePeriod;\n    }\n    return false;\n};\nexport const setLocalNoBannerCachePeriod = () => window.localStorage.setItem(NO_RR_BANNER_TIMESTAMP_KEY, `${Date.now()}`);\nconst getEmail = (ajaxUrl) => {\n    return getIdApiUserData(ajaxUrl)\n        .then((data) => data.user?.primaryEmailAddress)\n        .catch((error) => {\n        window.guardian.modules.sentry.reportError(error, 'getEmail');\n        return undefined;\n    });\n};\nexport const lazyFetchEmailWithTimeout = (idapiUrl) => () => {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve(null), 1000);\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        getEmail(idapiUrl).then((email) => {\n            if (email) {\n                resolve(email);\n            }\n            else {\n                resolve(null);\n            }\n        });\n    });\n};\nexport const getContributionsServiceUrl = (article) => process.env.SDC_URL ?? article.contributionsServiceUrl;\nexport const getPurchaseInfo = () => {\n    const purchaseInfoRaw = getCookie({\n        name: 'GU_CO_COMPLETE',\n        shouldMemoize: true,\n    });\n    if (!purchaseInfoRaw) {\n        return undefined;\n    }\n    let purchaseInfo;\n    try {\n        purchaseInfo = JSON.parse(decodeURIComponent(purchaseInfoRaw));\n    }\n    catch { } // eslint-disable-line no-empty -- silently handle error\n    return purchaseInfo;\n};\n","import { joinUrl } from '@guardian/libs';\nfunction checkForErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText ||\n            `getIdApiUserData | An api call returned HTTP status ${response.status}`);\n    }\n    return response;\n}\nconst callApi = (url) => {\n    return fetch(url, {\n        credentials: 'include',\n    })\n        .then(checkForErrors)\n        .then((response) => response.json());\n};\nconst cache = {};\nexport const getIdApiUserData = (ajaxUrl) => {\n    if (!cache.idapiUserMeResponse) {\n        const url = joinUrl(ajaxUrl, 'user/me');\n        cache.idapiUserMeResponse = callApi(url);\n    }\n    return cache.idapiUserMeResponse;\n};\nexport const getIdapiUserIdentifiers = (ajaxUrl) => {\n    if (!cache.idapiUserIdentifiersResponse) {\n        const url = joinUrl(ajaxUrl, 'user/me/identifiers');\n        cache.idapiUserIdentifiersResponse = callApi(url);\n    }\n    return cache.idapiUserIdentifiersResponse;\n};\n","import { ERR_INVALID_COOKIE } from './ERR_INVALID_COOKIE';\nimport { getCookieValues } from './getCookieValues';\nimport { getDomainAttribute } from './getDomainAttribute';\nimport { isValidCookie } from './isValidCookie';\nimport { memoizedCookies } from './memoizedCookies';\n\n/**\n * Set a cookie. If it's been memoized it will replace it's memoized value\n * @param details Details about the cookie.\n * @param details.name - the cookie’s name.\n * @param details.value - the cookie’s value.\n * @param details.daysToLive - optional expiry date will be calculated based on the daysToLive\n * @param details.isCrossSubdomain - specify if it's a cross subdomain cookie, default false\n */\n\nexport const setCookie = ({\n\tname,\n\tvalue,\n\tdaysToLive,\n\tisCrossSubdomain = false,\n}: {\n\tname: string;\n\tvalue: string;\n\tdaysToLive?: number;\n\tisCrossSubdomain?: boolean;\n}): void => {\n\tconst expires = new Date();\n\n\tif (!isValidCookie(name, value)) {\n\t\tthrow new Error(`${ERR_INVALID_COOKIE} ${name}=${value}`);\n\t}\n\n\tif (daysToLive) {\n\t\texpires.setUTCDate(expires.getUTCDate() + daysToLive);\n\t} else {\n\t\texpires.setUTCMonth(expires.getUTCMonth() + 5);\n\t\texpires.setUTCDate(1);\n\t}\n\n\tdocument.cookie = `${name}=${value}; path=/; expires=${expires.toUTCString()};${getDomainAttribute(\n\t\t{\n\t\t\tisCrossSubdomain,\n\t\t},\n\t)}`;\n\n\t// If the cookie is already memoized we want to replace its value\n\tif (memoizedCookies.has(name)) {\n\t\tconst [value] = getCookieValues(name);\n\t\tif (value) {\n\t\t\tmemoizedCookies.set(name, value);\n\t\t}\n\t}\n};\n","import { getCookie, removeCookie, setCookie, storage } from '@guardian/libs';\nimport { setAlreadyVisited } from './alreadyVisited';\nimport { HIDE_SUPPORT_MESSAGING_COOKIE, RECURRING_CONTRIBUTOR_COOKIE, SUPPORT_ONE_OFF_CONTRIBUTION_COOKIE, SUPPORT_RECURRING_CONTRIBUTOR_ANNUAL_COOKIE, SUPPORT_RECURRING_CONTRIBUTOR_MONTHLY_COOKIE, } from './contributions';\nimport { getLocaleCode } from './getCountryCode';\nconst readerRevenueCookies = [\n    HIDE_SUPPORT_MESSAGING_COOKIE,\n    RECURRING_CONTRIBUTOR_COOKIE,\n    SUPPORT_RECURRING_CONTRIBUTOR_MONTHLY_COOKIE,\n    SUPPORT_RECURRING_CONTRIBUTOR_ANNUAL_COOKIE,\n    SUPPORT_ONE_OFF_CONTRIBUTION_COOKIE,\n];\nconst clearEpicViewLog = () => localStorage.removeItem('gu.contributions.views');\nconst clearBannerLastClosedAt = () => {\n    localStorage.removeItem('gu.prefs.engagementBannerLastClosedAt');\n    localStorage.removeItem('gu.prefs.subscriptionBannerLastClosedAt');\n    localStorage.removeItem('gu.noRRBannerTimestamp');\n};\nconst fakeOneOffContributor = () => setCookie({\n    name: SUPPORT_ONE_OFF_CONTRIBUTION_COOKIE,\n    value: Date.now().toString(),\n});\nconst MULTIVARIATE_ID_COOKIE = 'GU_mvt_id';\nconst MAX_CLIENT_MVT_ID = 1000000;\nconst incrementMvtCookie = () => {\n    const mvtId = parseInt(getCookie({ name: MULTIVARIATE_ID_COOKIE }) ?? '10', 10);\n    if (mvtId) {\n        if (mvtId === MAX_CLIENT_MVT_ID) {\n            // Wrap back to 1 if it would exceed the max\n            setCookie({ name: MULTIVARIATE_ID_COOKIE, value: '1' });\n        }\n        else {\n            setCookie({ name: MULTIVARIATE_ID_COOKIE, value: `${mvtId + 1}` });\n        }\n    }\n};\nconst decrementMvtCookie = () => {\n    const mvtId = parseInt(getCookie({ name: MULTIVARIATE_ID_COOKIE }) ?? '10', 10);\n    if (mvtId) {\n        if (mvtId === 0) {\n            // Wrap back to max if it would be less than 0\n            setCookie({\n                name: MULTIVARIATE_ID_COOKIE,\n                value: MAX_CLIENT_MVT_ID.toString(),\n            });\n        }\n        else {\n            setCookie({ name: MULTIVARIATE_ID_COOKIE, value: `${mvtId - 1}` });\n        }\n    }\n};\nconst clearCommonReaderRevenueStateAndReload = (asExistingSupporter, shouldHideReaderRevenue) => {\n    if (shouldHideReaderRevenue) {\n        alert('This page has \"Prevent membership/contribution appeals\" ticked in Composer. Please try a different page');\n        return;\n    }\n    readerRevenueCookies.forEach((cookie) => removeCookie({ name: cookie }));\n    clearEpicViewLog();\n    if (asExistingSupporter) {\n        fakeOneOffContributor();\n    }\n    window.location.reload();\n};\nconst showMeTheEpic = (asExistingSupporter = false, shouldHideReaderRevenue) => {\n    clearCommonReaderRevenueStateAndReload(asExistingSupporter, shouldHideReaderRevenue);\n};\nconst showMeTheBanner = (asExistingSupporter = false, shouldHideReaderRevenue) => {\n    clearBannerLastClosedAt();\n    setAlreadyVisited(2);\n    clearCommonReaderRevenueStateAndReload(asExistingSupporter, shouldHideReaderRevenue);\n};\nconst showNextVariant = (asExistingSupporter = false, shouldHideReaderRevenue) => {\n    incrementMvtCookie();\n    clearCommonReaderRevenueStateAndReload(asExistingSupporter, shouldHideReaderRevenue);\n};\nconst showPreviousVariant = (asExistingSupporter = false, shouldHideReaderRevenue) => {\n    decrementMvtCookie();\n    clearCommonReaderRevenueStateAndReload(asExistingSupporter, shouldHideReaderRevenue);\n};\nconst changeGeolocation = (asExistingSupporter = false, shouldHideReaderRevenue) => {\n    getLocaleCode()\n        .then((current) => {\n        const geo = window.prompt(`Enter two-letter geolocation code (e.g. GB, US, AU). Current is ${current ?? 'null'}.`);\n        if (geo === 'UK') {\n            alert(`'UK' is not a valid geolocation - please use 'GB' instead!`);\n        }\n        else if (geo) {\n            storage.local.set('gu.geo.override', geo);\n            clearCommonReaderRevenueStateAndReload(asExistingSupporter, shouldHideReaderRevenue);\n        }\n    })\n        .catch((e) => {\n        console.error(`changeGeolocation - error: ${String(e)}`);\n    });\n};\nconst getForcedVariant = (type) => {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unnecessary-condition -- Safety in global,\n    if (URLSearchParams) {\n        const params = new URLSearchParams(window.location.search);\n        const value = params.get(`force-${type}`);\n        if (value) {\n            return value;\n        }\n    }\n    return null;\n};\nexport { changeGeolocation, showMeTheEpic, showMeTheBanner, showNextVariant, showPreviousVariant, getForcedVariant, };\n","import { getShortDomain } from './getShortDomain';\n\n/**\n * Removes a cookie.\n * @param details Details about the cookie.\n * @param details.name - the cookie’s name.\n * @param details.currentDomainOnly - set to true if it's only for current domain\n */\n\nexport const removeCookie = ({\n\tname,\n\tcurrentDomainOnly = false,\n}: {\n\tname: string;\n\tcurrentDomainOnly?: boolean;\n}): void => {\n\tconst expires = 'expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n\tconst path = 'path=/;';\n\n\t// Remove cookie, implicitly using the document's domain.\n\tdocument.cookie = `${name}=;${path}${expires}`;\n\tif (!currentDomainOnly) {\n\t\t// also remove from the short domain\n\t\tdocument.cookie = `${name}=;${path}${expires} domain=${getShortDomain()};`;\n\t}\n};\n","import { useEffect, useState } from 'react';\n/**\n * Ensures that the given task is only run once and only after all items in waitFor are defined\n * @param {Function} task - The task to execute once\n * @param {Array} waitFor - An array of variables that must be defined before the task is executed\n * */\nexport const useOnce = (task, waitFor) => {\n    const [alreadyRun, setAlreadyRun] = useState(false);\n    const isReady = waitFor.every((dep) => dep !== undefined);\n    useEffect(() => {\n        if (!alreadyRun && isReady) {\n            task();\n            setAlreadyRun(true);\n        }\n    }, [alreadyRun, isReady, task]);\n};\n","// detect two or more `/` chars after a word boundary\nconst multipleSlashesInRoute = /\\b\\/{2,}/g;\n\nexport const joinUrl = (...args: string[]): string =>\n\targs.join('/').replace(multipleSlashesInRoute, '/');\n"],"names":["AlreadyVisitedKey","getAlreadyVisitedCount","alreadyVisited","parseInt","localStorage","getItem","Number","isNaN","setAlreadyVisited","count","setItem","toString","incrementAlreadyVisited","HIDE_SUPPORT_MESSAGING_COOKIE","RECURRING_CONTRIBUTOR_COOKIE","SUPPORT_RECURRING_CONTRIBUTOR_MONTHLY_COOKIE","SUPPORT_RECURRING_CONTRIBUTOR_ANNUAL_COOKIE","SUPPORT_ONE_OFF_CONTRIBUTION_COOKIE","NO_RR_BANNER_TIMESTAMP_KEY","MODULES_VERSION","shouldShowSupportMessaging","getCookie","name","isRecurringContributor","isSignedIn","isRecurringContributorFromAttrs","hasMonthlyContributionCookie","shouldMemoize","hasAnnualContributionCookie","getLastOneOffContributionTimestamp","contributionDateFromAttributes","contributionDateFromSupport","parsedDateFromAttributes","Date","parse","parsedDateFromSupport","undefined","getLastOneOffContributionDate","timestamp","date","year","getFullYear","month","getMonth","padStart","day","getDate","isRecentOneOffContributor","diffMs","lastContributionDate","now","Math","floor","shouldHideSupportMessaging","REQUIRED_CONSENTS_FOR_ARTICLE_COUNT","REQUIRED_CONSENTS_FOR_BROWSER_ID","hasCmpConsentForArticleCount","Promise","resolve","onConsentChange","ccpa","tcfv2","aus","hasRequiredConsents","every","consent","consents","window","removeItem","hasOptedOutOfArticleCount","hasCmpConsent","useHasOptedOutOfArticleCount","useState","hasOptedOut","setHasOptedOut","useOnce","then","catch","hasCmpConsentForBrowserId","withinLocalNoBannerCachePeriod","item","withinCachePeriod","setLocalNoBannerCachePeriod","lazyFetchEmailWithTimeout","idapiUrl","ajaxUrl","setTimeout","getIdApiUserData","data","user","primaryEmailAddress","error","guardian","modules","sentry","reportError","email","getPurchaseInfo","purchaseInfoRaw","purchaseInfo","JSON","decodeURIComponent","checkForErrors","response","ok","Error","statusText","status","callApi","url","fetch","credentials","json","cache","idapiUserMeResponse","joinUrl","getIdapiUserIdentifiers","idapiUserIdentifiersResponse","value","ERR_INVALID_COOKIE","expires","setUTCDate","document","isCrossSubdomain","getCookieValues","memoizedCookies","readerRevenueCookies","clearBannerLastClosedAt","MULTIVARIATE_ID_COOKIE","MAX_CLIENT_MVT_ID","incrementMvtCookie","mvtId","setCookie","decrementMvtCookie","clearCommonReaderRevenueStateAndReload","asExistingSupporter","shouldHideReaderRevenue","alert","forEach","cookie","path","location","reload","showMeTheEpic","showMeTheBanner","showNextVariant","showPreviousVariant","changeGeolocation","getLocaleCode","current","geo","prompt","storage","e","console","String","getForcedVariant","type","URLSearchParams","search","get","task","waitFor","alreadyRun","setAlreadyRun","isReady","dep","useEffect","multipleSlashesInRoute","args","join","replace"],"sourceRoot":""}