{"version":3,"file":"SetABTests-importable.modern.d9542a538d3de6287ff6.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../node_modules/@guardian/ab-core/esm/core.js","webpack://@guardian/dotcom-rendering/../node_modules/@guardian/ab-core/esm/time.js","webpack://@guardian/dotcom-rendering/../node_modules/@guardian/ab-core/esm/ophan.js","webpack://@guardian/dotcom-rendering/../node_modules/@guardian/ab-core/esm/ab.js","webpack://@guardian/dotcom-rendering/./src/web/experiments/ab-tests.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/newsletter-merch-unit-test.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/consentless-ads.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/billboards-in-merch.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/elements-manager.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/cypress-switches.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/getAbUrlHash.ts","webpack://@guardian/dotcom-rendering/./src/web/components/SetABTests.importable.tsx","webpack://@guardian/dotcom-rendering/./src/web/experiments/lib/ab-participations.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/ab-test-test.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/integrate-ima.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-copy-test-variants.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-main-control.ts","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/sign-in-gate-main-variant.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useAB.ts"],"sourcesContent":["import { isExpired } from './time.js';\n\nconst initCore = (config) => {\n    const { mvtMaxValue = 1000000, mvtId, pageIsSensitive, abTestSwitches, forcedTestVariants, forcedTestException, arrayOfTestObjects = [], } = config;\n    /**\n     * We only take account of a variant's canRun function if it's defined.\n     * If it's not, assume the variant can be run.\n     */\n    const variantCanBeRun = (variant) => {\n        const isInTest = variant.id !== 'notintest';\n        if (variant.canRun) {\n            return variant.canRun() && isInTest;\n        }\n        else {\n            return isInTest;\n        }\n    };\n    const testCanBeRun = (test) => {\n        const expired = isExpired(test.expiry);\n        const testShouldShowForSensitive = !!test.showForSensitive;\n        const isTestOn = abTestSwitches[`ab${test.id}`] && !!abTestSwitches[`ab${test.id}`];\n        const canTestBeRun = test.canRun();\n        return ((pageIsSensitive ? testShouldShowForSensitive : true) &&\n            !!isTestOn &&\n            !expired &&\n            canTestBeRun);\n    };\n    /**\n     *\n     * Determine whether the user is in the test or not\n     * and return the associated variant ID, based on the MVT id segmentation.\n     *\n     * The test population is just a subset of MVT ids. A test population must\n     * begin from a specific value. Overlapping test ranges are permitted.\n     */\n    const computeVariantFromMvtCookie = (test) => {\n        const smallestTestId = mvtMaxValue * test.audienceOffset;\n        const largestTestId = smallestTestId + mvtMaxValue * test.audience;\n        if (mvtId && mvtId > smallestTestId && mvtId <= largestTestId) {\n            // This mvt test id is in the test range, so allocate it to a test variant.\n            return test.variants[mvtId % test.variants.length] ?? null;\n        }\n        // We return null if there is no variant that matches the test and variant fot the mvtId\n        return null;\n    };\n    const getForcedTestVariant = (test, forcedTestVariants) => {\n        const testId = test.id;\n        const getVariantFromIds = (test, variantId) => test.variants.find((variant) => variant.id === variantId) ?? false;\n        const forcedTest = forcedTestVariants?.[testId]?.variant;\n        return forcedTest ? getVariantFromIds(test, forcedTest) : false;\n    };\n    /**\n     * This is the heart of the A/B testing framework.\n     * It turns an `ABTest` into a `Runnable<ABTest>`,\n     * if indeed the test actually has a variant which could run\n     * on this page view.\n     *\n     * This function can be called at any time,\n     * it should always give the same result for a given page view.\n     */\n    const runnableTest = (test) => {\n        const fromCookie = computeVariantFromMvtCookie(test);\n        const variantFromForcedTest = getForcedTestVariant(test, forcedTestVariants);\n        const forcedOutOfTest = forcedTestException === test.id;\n        const variantToRun = variantFromForcedTest || fromCookie;\n        if (!forcedOutOfTest &&\n            (variantFromForcedTest || testCanBeRun(test)) && // We ignore the test's canRun if the test is forced\n            variantToRun &&\n            (variantFromForcedTest || variantCanBeRun(variantToRun)) // We ignore the variant canRun if the test is forced\n        ) {\n            return {\n                ...test,\n                variantToRun,\n            };\n        }\n        // The test and variant isn't runnable, sorry\n        return null;\n    };\n    const allRunnableTests = (tests) => tests.reduce((prev, currentValue) => {\n        const rt = runnableTest(currentValue);\n        return rt ? [...prev, rt] : prev;\n    }, []);\n    const firstRunnableTest = (tests) => tests\n        .map((test) => runnableTest(test))\n        .find((rt) => rt !== null) ?? null;\n    const isUserInVariant = (testId, variantId) => allRunnableTests(arrayOfTestObjects).some((runnableTest) => {\n        return (runnableTest.id === testId &&\n            runnableTest.variantToRun.id === variantId);\n    });\n    return {\n        allRunnableTests,\n        runnableTest,\n        firstRunnableTest,\n        isUserInVariant,\n    };\n};\n\nexport { initCore };\n//# sourceMappingURL=core.js.map\n","/** TODO: add to shared libs folder */\nconst isExpired = (testExpiry) => {\n    // Get the current time, we check that right now is not after the end of the text expiry\n    const currentTime = new Date().valueOf();\n    // Take the test expiry date and set the hours to the last millisecond of the day\n    const theTestExpiry = new Date(testExpiry).setHours(23, 59, 59, 59);\n    // If the endOfToday at 23:59:59 is after the test expiry date at the same time\n    return currentTime > theTestExpiry;\n};\n\nexport { isExpired };\n//# sourceMappingURL=time.js.map\n","const noop = () => {\n    // Do nothing !\n};\nconst submit = (payload, ophanRecord) => ophanRecord({\n    abTestRegister: payload,\n});\n/**\n * generate an A/B event for Ophan\n */\nconst makeABEvent = (variant, complete) => {\n    const event = {\n        variantName: variant.id,\n        complete,\n    };\n    // TODO Test me\n    if (variant.campaignCode) {\n        event.campaignCodes = [variant.campaignCode];\n    }\n    return event;\n};\n/**\n * Checks if this test will defer its impression by providing its own impression function.\n *\n * If it does, the test won't be included in the Ophan call that happens at pageload, and must fire the impression\n * itself via the callback passed to the `impression` property in the variant.\n */\nconst defersImpression = (test) => test.variants.every((variant) => typeof variant.impression === 'function');\n/**\n * Create a function that will fire an A/B test to Ophan\n */\nconst buildOphanSubmitter = (test, variant, complete, ophanRecord) => {\n    const data = {\n        [test.id]: makeABEvent(variant, complete),\n    };\n    return () => submit(data, ophanRecord);\n};\n/**\n * Create a function that sets up listener to fire an Ophan `complete` event. This is used in the `success` and\n * `impression` properties of test variants to allow test authors to control when these events are sent out.\n */\nconst registerCompleteEvent = (complete, errorReporter, ophanRecord) => (test) => {\n    const variant = test.variantToRun;\n    const listener = (complete ? variant.success : variant.impression) ?? noop;\n    try {\n        listener(buildOphanSubmitter(test, variant, complete, ophanRecord));\n    }\n    catch (err) {\n        errorReporter(err, {}, false);\n    }\n};\nconst buildOphanPayload = (tests, errorReporter, serverSideTestObj) => {\n    try {\n        const log = {};\n        const serverSideTests = Object.keys(serverSideTestObj).filter((test) => !!serverSideTestObj[test]);\n        // @TODO: Test tests vs server-side tests\n        tests\n            .filter((test) => !defersImpression(test))\n            .forEach((test) => {\n            log[test.id] = makeABEvent(test.variantToRun, false);\n        });\n        serverSideTests.forEach((test) => {\n            const serverSideVariant = {\n                id: 'inTest',\n                test: () => undefined,\n            };\n            log[`ab${test}`] = makeABEvent(serverSideVariant, false);\n        });\n        return log;\n    }\n    catch (error) {\n        // Encountering an error should invalidate the logging process.\n        errorReporter(error, {}, false);\n        return {};\n    }\n};\nconst initOphan = (config) => {\n    const { serverSideTests = {}, errorReporter = () => undefined, ophanRecord = () => undefined, } = config;\n    const registerCompleteEvents = (tests) => {\n        return tests.forEach(registerCompleteEvent(true, errorReporter, ophanRecord));\n    };\n    const registerImpressionEvents = (tests) => {\n        tests\n            .filter(defersImpression)\n            .forEach(registerCompleteEvent(false, errorReporter, ophanRecord));\n    };\n    const trackABTests = (tests) => submit(buildOphanPayload(tests, errorReporter, serverSideTests), ophanRecord);\n    return { registerCompleteEvents, registerImpressionEvents, trackABTests };\n};\n\nexport { initOphan };\n//# sourceMappingURL=ophan.js.map\n","import { initCore } from './core.js';\nimport { initOphan } from './ophan.js';\n\nclass AB {\n    _allRunnableTests;\n    _isUserInVariant;\n    _firstRunnableTest;\n    _runnableTest;\n    _registerCompleteEvents;\n    _registerImpressionEvents;\n    _trackABTests;\n    constructor(config) {\n        const { mvtMaxValue, mvtId, pageIsSensitive, abTestSwitches, serverSideTests, forcedTestVariants, forcedTestException, errorReporter, ophanRecord, arrayOfTestObjects, } = config;\n        const core = initCore({\n            mvtMaxValue,\n            mvtId,\n            pageIsSensitive,\n            abTestSwitches,\n            forcedTestVariants,\n            forcedTestException,\n            arrayOfTestObjects,\n        });\n        const ophan = initOphan({\n            serverSideTests,\n            errorReporter,\n            ophanRecord,\n        });\n        this._allRunnableTests = core.allRunnableTests;\n        this._firstRunnableTest = core.firstRunnableTest;\n        this._runnableTest = core.runnableTest;\n        this._isUserInVariant = core.isUserInVariant;\n        this._registerCompleteEvents = ophan.registerCompleteEvents;\n        this._registerImpressionEvents = ophan.registerImpressionEvents;\n        this._trackABTests = ophan.trackABTests;\n    }\n    // CoreAPI\n    get allRunnableTests() {\n        return this._allRunnableTests;\n    }\n    get firstRunnableTest() {\n        return this._firstRunnableTest;\n    }\n    get runnableTest() {\n        return this._runnableTest;\n    }\n    get isUserInVariant() {\n        return this._isUserInVariant;\n    }\n    // OphanAPI\n    get registerCompleteEvents() {\n        return this._registerCompleteEvents;\n    }\n    get registerImpressionEvents() {\n        return this._registerImpressionEvents;\n    }\n    get trackABTests() {\n        return this._trackABTests;\n    }\n}\n\nexport { AB };\n//# sourceMappingURL=ab.js.map\n","import type { ABTest } from '@guardian/ab-core';\nimport { abTestTest } from './tests/ab-test-test';\nimport { billboardsInMerch } from './tests/billboards-in-merch';\nimport { consentlessAds } from './tests/consentless-ads';\nimport { elementsManager } from './tests/elements-manager';\nimport { integrateIma } from './tests/integrate-ima';\nimport {\n\tnewsletterMerchUnitLighthouseControl,\n\tnewsletterMerchUnitLighthouseVariants,\n} from './tests/newsletter-merch-unit-test';\nimport { signInGateCopyTestJan2023 } from './tests/sign-in-gate-copy-test-variants';\nimport { signInGateMainControl } from './tests/sign-in-gate-main-control';\nimport { signInGateMainVariant } from './tests/sign-in-gate-main-variant';\n\n// keep in sync with ab-tests in frontend\n// https://github.com/guardian/frontend/tree/main/static/src/javascripts/projects/common/modules/experiments/ab-tests.ts\nexport const tests: ABTest[] = [\n\tabTestTest,\n\tsignInGateMainVariant,\n\tsignInGateMainControl,\n\tsignInGateCopyTestJan2023,\n\tnewsletterMerchUnitLighthouseControl,\n\tnewsletterMerchUnitLighthouseVariants,\n\tconsentlessAds,\n\tintegrateIma,\n\tbillboardsInMerch,\n\telementsManager,\n];\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const newsletterMerchUnitLighthouseControl: ABTest = {\n\tid: 'NewsletterMerchUnitLighthouseControl',\n\tstart: '2020-11-11',\n\texpiry: '2020-12-08',\n\tauthor: 'Josh Buckland & Alex Dufournet',\n\tdescription:\n\t\t'Show BAU merch unit to 50% of users. This is the control for the NewsletterMerchUnitLighthouseVariants test.',\n\taudience: 0.5,\n\taudienceOffset: 0.0,\n\tsuccessMeasure:\n\t\t'We see increased engagement from users shown the Newsletters ad unit',\n\taudienceCriteria: 'Website users only.',\n\tidealOutcome: 'Investigate lighthouse segment engagement via newsletters',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n\nexport const newsletterMerchUnitLighthouseVariants: ABTest = {\n\tid: 'NewsletterMerchUnitLighthouseVariants',\n\tstart: '2020-11-11',\n\texpiry: '2020-12-08',\n\tauthor: 'Josh Buckland & Alex Dufournet',\n\tdescription:\n\t\t'Show a newsletter advert in the merchandising unit to 25% of users and reader revenue' +\n\t\t'to another 25%. The remaining 50% are covered by NewsletterMerchUnitLighthouseControl ' +\n\t\t'which needs to run at the same time. These two variants test the value of showing ' +\n\t\t'newsletter merch units instead of reader revenue ones. ',\n\taudience: 0.5,\n\taudienceOffset: 0.5,\n\tsuccessMeasure:\n\t\t'We see increased engagement from users shown the Newsletters ad unit',\n\taudienceCriteria: 'Website users only.',\n\tidealOutcome: 'Investigate lighthouse segment engagement via newsletters',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'newsletter',\n\t\t\ttest: (): void => {},\n\t\t},\n\t\t{\n\t\t\tid: 'reader-revenue',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const consentlessAds: ABTest = {\n\tid: 'ConsentlessAds',\n\tauthor: '@guardian/commercial-dev',\n\tstart: '2022-08-11',\n\texpiry: '2023-06-01',\n\taudience: 0 / 100,\n\taudienceOffset: 0 / 100,\n\taudienceCriteria: 'All pageviews',\n\tsuccessMeasure: 'Testing Opt Out ads in production',\n\tdescription: 'Use consentless ad stack rather than consented / standalone',\n\tvariants: [\n\t\t{ id: 'control', test: (): void => {} },\n\t\t{ id: 'variant', test: (): void => {} },\n\t],\n\tcanRun: () => true,\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const billboardsInMerch: ABTest = {\n\tid: 'BillboardsInMerch',\n\tauthor: '@commercial-dev',\n\tstart: '2022-12-07',\n\texpiry: '2023-02-31',\n\taudience: 0 / 100,\n\taudienceOffset: 0 / 100,\n\taudienceCriteria: 'Opt in only',\n\tsuccessMeasure:\n\t\t'Test the commercial impact of showing billboard adverts in merchandising slots',\n\tdescription:\n\t\t'Show billboard adverts in merchandising slots to browsers in the variant',\n\tvariants: [\n\t\t// TODO Bypass metrics sampling once we increase audience size\n\t\t{ id: 'control', test: (): void => {} },\n\t\t// TODO Bypass metrics sampling once we increase audience size\n\t\t{ id: 'variant', test: (): void => {} },\n\t],\n\tcanRun: () => true,\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const elementsManager: ABTest = {\n\tid: 'ElementsManager',\n\tauthor: '@commercial-dev',\n\tstart: '2023-02-23',\n\texpiry: '2023-06-30',\n\taudience: 0 / 100,\n\taudienceOffset: 0 / 100,\n\taudienceCriteria: 'Opt in only',\n\tsuccessMeasure: 'Able to serve GEM assets in ad slots on page',\n\tdescription: 'Test serving GEM assets in ad slots on page',\n\tvariants: [\n\t\t{ id: 'control', test: (): void => {} },\n\t\t{ id: 'variant', test: (): void => {} },\n\t],\n\tcanRun: () => true,\n};\n","// Forced AB Test Switches for Cypress testing\n\n// AB test switches are defined in Frontend and required to be \"ON\" for Cypress E2E Tests to successfully run and pass.\n// However, it is useful to be able to switch an AB test on/off in Frontend Admin UI without breaking tests that rely\n// on those switches in another repo (DCR).\n\n// By adding the switches here, and the state we want them to be in when we run Cypress tests, we no longer have to\n// worry about the state of the switch in Frontend. In turn allowing tests to pass even if a switch has changed state\n// in Frontend, e.g. a switch has been set to \"OFF\".\n\n// Add switches to be a specific state in Cypress to this object\nconst cypressSwitches = {\n\tabAbTestTest: true, // Test switch, used for Cypress integration test\n\tabSignInGateMainControl: true,\n\tabSignInGateMainVariant: true,\n\tabSignInGateAusMandatory: true,\n};\n\n// Function to retrieve the switches if running in Cypress\nexport const getCypressSwitches = (): Record<string, boolean> => {\n\t// If running within cypress, return the forced switches\n\tif (window.Cypress) return cypressSwitches;\n\t// Otherwise just return empty object\n\treturn {};\n};\n","import type { Participations } from '@guardian/ab-core';\n\nexport const getForcedParticipationsFromUrl = (\n\twindowHash: string,\n): Participations => {\n\tif (windowHash.startsWith('#ab')) {\n\t\tconst tokens = windowHash.replace('#ab-', '').split(',');\n\t\treturn tokens.reduce<Participations>((obj, token) => {\n\t\t\tconst [testId, variantId] = token.split('=');\n\n\t\t\tif (testId && variantId) {\n\t\t\t\treturn {\n\t\t\t\t\t...obj,\n\t\t\t\t\t[testId]: { variant: variantId },\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t}, {});\n\t}\n\n\treturn {};\n};\n","import { AB } from '@guardian/ab-core';\nimport type { CoreAPIConfig } from '@guardian/ab-core';\nimport { getCookie, log } from '@guardian/libs';\nimport type { ABTestSwitches } from '../../model/enhance-switches';\nimport { getOphanRecordFunction } from '../browser/ophan/ophan';\nimport { tests } from '../experiments/ab-tests';\nimport { getCypressSwitches } from '../experiments/cypress-switches';\nimport { runnableTestsToParticipations } from '../experiments/lib/ab-participations';\nimport { getForcedParticipationsFromUrl } from '../lib/getAbUrlHash';\nimport { setABTests } from '../lib/useAB';\n\ntype Props = {\n\tabTestSwitches: ABTestSwitches;\n\tforcedTestVariants?: CoreAPIConfig['forcedTestVariants'];\n\tisDev: boolean;\n\tpageIsSensitive: CoreAPIConfig['pageIsSensitive'];\n};\n\nexport const SetABTests = ({\n\tisDev,\n\tpageIsSensitive,\n\tabTestSwitches,\n\tforcedTestVariants,\n}: Props) => {\n\tconst mvtId = Number(\n\t\t(isDev &&\n\t\t\tgetCookie({ name: 'GU_mvt_id_local', shouldMemoize: true })) || // Simplify localhost testing by creating a different mvt id\n\t\t\tgetCookie({ name: 'GU_mvt_id', shouldMemoize: true }),\n\t);\n\tif (!mvtId) {\n\t\t// 0 is default and falsy here\n\t\tconsole.log('There is no MVT ID set, see SetABTests.importable.tsx');\n\t}\n\n\tconst ophanRecord = getOphanRecordFunction();\n\n\t// Get the forced switches to use for when running within cypress\n\t// Is empty object if not in cypress\n\tconst cypressAbSwitches = getCypressSwitches();\n\n\tconst allForcedTestVariants = {\n\t\t...forcedTestVariants,\n\t\t...getForcedParticipationsFromUrl(window.location.hash),\n\t};\n\n\tconst ab = new AB({\n\t\tmvtId,\n\t\tpageIsSensitive,\n\t\tabTestSwitches: {\n\t\t\t...abTestSwitches,\n\t\t\t...cypressAbSwitches, // by adding cypress switches below CAPI, we can override any production switch in Cypress\n\t\t},\n\t\tarrayOfTestObjects: tests,\n\t\tophanRecord,\n\t\tforcedTestVariants: allForcedTestVariants,\n\t});\n\n\tconst allRunnableTests = ab.allRunnableTests(tests);\n\tconst participations = runnableTestsToParticipations(allRunnableTests);\n\n\tsetABTests({\n\t\tapi: ab,\n\t\tparticipations,\n\t});\n\n\tab.trackABTests(allRunnableTests);\n\tab.registerImpressionEvents(allRunnableTests);\n\tab.registerCompleteEvents(allRunnableTests);\n\tlog('dotcom', 'AB tests initialised');\n\n\t// we don’t render anything\n\treturn null;\n};\n","import type { ABTest, Participations, Runnable } from '@guardian/ab-core';\nimport { isObject, isString } from '@guardian/libs';\n\nconst isParticipations = (\n\tparticipations: unknown,\n): participations is Participations =>\n\tisObject(participations) &&\n\tObject.values(participations).every(\n\t\t(participation) =>\n\t\t\tisObject(participation) && isString(participation.variant),\n\t);\n\nconst runnableTestsToParticipations = (\n\trunnableTests: readonly Runnable<ABTest>[],\n): Participations =>\n\trunnableTests.reduce(\n\t\t(participations: Participations, { id: testId, variantToRun }) => ({\n\t\t\t...participations,\n\t\t\t...{\n\t\t\t\t[testId]: {\n\t\t\t\t\tvariant: variantToRun.id,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\t{},\n\t);\n\nexport { isParticipations, runnableTestsToParticipations };\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const abTestTest: ABTest = {\n\tid: 'AbTestTest',\n\tstart: '2020-05-20',\n\texpiry: '2023-12-01',\n\tauthor: 'gtrufitt',\n\tdescription: 'This Test',\n\taudience: 0.0001, // 0.01%\n\taudienceOffset: 0,\n\tsuccessMeasure: 'It works',\n\taudienceCriteria: 'Everyone',\n\tidealOutcome: 'It works',\n\tshowForSensitive: true,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'control',\n\t\t\ttest: (): void => {},\n\t\t\timpression: (impression: () => void): void => {\n\t\t\t\timpression();\n\t\t\t},\n\t\t\tsuccess: (success: () => void): void => {\n\t\t\t\tsuccess();\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 'variant',\n\t\t\ttest: (): void => {},\n\t\t\timpression: (impression: () => void): void => {\n\t\t\t\timpression();\n\t\t\t},\n\t\t\tsuccess: (success: () => void): void => {\n\t\t\t\tsuccess();\n\t\t\t},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const integrateIma: ABTest = {\n\tid: 'IntegrateIma',\n\tstart: '2022-07-14',\n\texpiry: '2023-04-04',\n\tauthor: 'Zeke Hunter-Green',\n\tdescription:\n\t\t'Test the commercial impact of replacing YouTube ads with Interactive Media Ads on first-party videos',\n\taudience: 0,\n\taudienceOffset: 0,\n\taudienceCriteria: 'Opt in',\n\tsuccessMeasure:\n\t\t'IMA integration works as expected without adversely affecting pages with videos',\n\tcanRun: () => true,\n\tvariants: [\n\t\t{ id: 'control', test: (): void => {} },\n\t\t{ id: 'variant', test: (): void => {} },\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateCopyTestJan2023: ABTest = {\n\tid: 'SignInGateCopyTestJan2023',\n\tstart: '2023-01-23',\n\texpiry: '2025-12-01',\n\tauthor: 'Lindsey Dew',\n\tdescription: 'Test varying the copy in the call to action for sign in gate',\n\taudience: 0.0,\n\taudienceOffset: 0.0,\n\tsuccessMeasure: 'Users sign in or create a Guardian account',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateCopyTest',\n\tidealOutcome:\n\t\t'One variants performs at least 2% better than the control and/OR 10% better than the other variant. Neither variant performs 5% worse than the control',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'quick-and-easy',\n\t\t\ttest: (): void => {},\n\t\t},\n\t\t{\n\t\t\tid: 'take-a-moment',\n\t\t\ttest: (): void => {},\n\t\t},\n\t\t{\n\t\t\tid: 'sign-in-copy-control',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateMainControl: ABTest = {\n\tid: 'SignInGateMainControl',\n\tstart: '2020-05-20',\n\texpiry: '2025-12-01',\n\tauthor: 'Mahesh Makani',\n\tdescription:\n\t\t'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Control Audience.',\n\taudience: 0.1,\n\taudienceOffset: 0.9,\n\tsuccessMeasure: 'N/A - User does not see gate, only to compare to variant.',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateMain',\n\tidealOutcome:\n\t\t'Increase the number of users signed in whilst running at a reasonable scale',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'main-control-4',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTest } from '@guardian/ab-core';\n\nexport const signInGateMainVariant: ABTest = {\n\tid: 'SignInGateMainVariant',\n\tstart: '2020-06-09',\n\texpiry: '2025-12-01',\n\tauthor: 'Mahesh Makani',\n\tdescription:\n\t\t'Show sign in gate to 100% of users on 3rd article view of simple article templates, and show a further 5 times after the first dismissal, with higher priority over banners and epic. Main/Variant Audience.',\n\taudience: 0.9,\n\taudienceOffset: 0.0,\n\tsuccessMeasure: 'Users sign in or create a Guardian account',\n\taudienceCriteria:\n\t\t'3rd article of the day, lower priority than consent banner, simple articles (not gallery, live etc.), not signed in, not shown after dismiss, not on help, info sections etc. Exclude iOS 9 and guardian-live-australia. Suppresses other banners, and appears over epics',\n\tdataLinkNames: 'SignInGateMain',\n\tidealOutcome:\n\t\t'Increase the number of users signed in whilst running at a reasonable scale',\n\tshowForSensitive: false,\n\tcanRun: () => true,\n\tvariants: [\n\t\t{\n\t\t\tid: 'main-variant-4',\n\t\t\ttest: (): void => {},\n\t\t},\n\t],\n};\n","import type { ABTestAPI, Participations } from '@guardian/ab-core';\nimport { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\n\ntype ABTests = {\n\tapi: ABTestAPI;\n\tparticipations: Participations;\n};\n\nconst apiPromise = new Promise<ABTests>(() => {});\nconst key = 'ab-tests';\n\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = (): ABTests | undefined => {\n\tconst { data } = useSWRImmutable(key, () => apiPromise);\n\treturn data;\n};\n\nexport const setABTests = ({ api, participations }: ABTests): void => {\n\tvoid mutate(key, { api, participations }, false);\n};\n"],"names":["initCore","config","mvtMaxValue","mvtId","pageIsSensitive","abTestSwitches","forcedTestVariants","forcedTestException","arrayOfTestObjects","runnableTest","test","fromCookie","smallestTestId","audienceOffset","largestTestId","audience","variants","length","computeVariantFromMvtCookie","variantFromForcedTest","testId","id","forcedTest","variant","variantId","find","getVariantFromIds","getForcedTestVariant","variantToRun","expired","testExpiry","expiry","Date","valueOf","setHours","testShouldShowForSensitive","showForSensitive","isTestOn","canTestBeRun","canRun","testCanBeRun","isInTest","variantCanBeRun","allRunnableTests","tests","reduce","prev","currentValue","rt","firstRunnableTest","map","isUserInVariant","some","noop","submit","payload","ophanRecord","abTestRegister","makeABEvent","complete","event","variantName","campaignCode","campaignCodes","defersImpression","every","impression","registerCompleteEvent","errorReporter","listener","success","data","buildOphanSubmitter","err","AB","this","_allRunnableTests","_firstRunnableTest","_runnableTest","_isUserInVariant","registerCompleteEvents","_registerCompleteEvents","registerImpressionEvents","_registerImpressionEvents","trackABTests","_trackABTests","constructor","serverSideTests","core","ophan","forEach","filter","serverSideTestObj","log","Object","keys","error","buildOphanPayload","initOphan","abTestTest","signInGateMainVariant","signInGateMainControl","signInGateCopyTestJan2023","start","author","description","successMeasure","audienceCriteria","idealOutcome","integrateIma","cypressSwitches","abAbTestTest","abSignInGateMainControl","abSignInGateMainVariant","abSignInGateAusMandatory","getForcedParticipationsFromUrl","windowHash","startsWith","replace","split","obj","token","SetABTests","isDev","Number","getCookie","name","shouldMemoize","console","getOphanRecordFunction","cypressAbSwitches","window","Cypress","allForcedTestVariants","location","hash","ab","participations","setABTests","api","dataLinkNames","apiPromise","Promise","key","useAB","useSWRImmutable","mutate"],"sourceRoot":""}