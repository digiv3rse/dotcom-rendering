{"version":3,"file":"9617.legacy.b16b0d8d292c125ca894.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/web/components/Avatar.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/Byline.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/PulsingDot.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/Kicker.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/Picture.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/QuoteIcon.tsx","webpack://@guardian/dotcom-rendering/./src/web/lib/getSourceImageUrl_temp_fix.ts","webpack://@guardian/dotcom-rendering/./src/static/icons/clock.svg"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { Fragment } from 'react';\nimport { decidePalette } from '../lib/decidePalette';\nimport { getSourceImageUrl } from '../lib/getSourceImageUrl_temp_fix';\nimport { generateSources, getFallbackSource } from './Picture';\nconst picture = css `\n\tborder-radius: 100%;\n\theight: 100%;\n\twidth: 100%;\n\toverflow: hidden;\n`;\nconst img = css `\n\tobject-fit: cover;\n\theight: 100%;\n\twidth: 100%;\n`;\n/**\n * Used on `picture` and `img` to prevent having a line-height,\n * as these elements are which are `inline` by default.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#styling_with_css\n */\nconst block = css `\n\tdisplay: block;\n`;\nconst backgroundStyles = (palette) => css `\n\t\tbackground-color: ${palette.background.avatar};\n\t`;\nexport const Avatar = ({ src, alt, format, containerPalette }) => {\n    const palette = decidePalette(format, containerPalette);\n    const sources = generateSources(getSourceImageUrl(src), [\n        { breakpoint: 320, width: 75 },\n        { breakpoint: 740, width: 140 },\n    ]);\n    /**\n     * The assumption here is readers on devices that do not support srcset\n     * are likely to be on poor network connections so we're going\n     * to fallback to the smallest image at low resolution.\n     *\n     * Sources are ordered in `descendingByBreakpoint` order,\n     * so the last one is the smallest.\n     */\n    const fallbackSource = getFallbackSource(sources);\n    return (_jsxs(\"picture\", { \n        // data-size={imageSize}\n        css: [block, picture, backgroundStyles(palette)], children: [sources.map((source) => {\n                return (_jsxs(Fragment, { children: [_jsx(\"source\", { srcSet: source.hiResUrl, media: `(min-width: ${source.breakpoint}px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: ${source.breakpoint}px) and (min-resolution: 120dpi)` }), _jsx(\"source\", { srcSet: source.lowResUrl, media: `(min-width: ${source.breakpoint}px)` })] }, source.breakpoint));\n            }), _jsx(\"img\", { alt: alt, src: fallbackSource.lowResUrl, css: [block, img] })] }));\n};\n","import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { ArticleSpecial } from '@guardian/libs';\nimport { headline, textSans, until } from '@guardian/source-foundations';\nimport { decidePalette } from '../lib/decidePalette';\nconst bylineStyles = (size, format) => {\n    const baseStyles = css `\n\t\tdisplay: block;\n\t\tfont-style: italic;\n\t`;\n    switch (size) {\n        case 'ginormous':\n        case 'huge':\n            if (format.theme === ArticleSpecial.Labs) {\n                return css `\n\t\t\t\t\t${baseStyles};\n\t\t\t\t\t${textSans.xlarge()};\n\t\t\t\t\tfont-size: 24px;\n\t\t\t\t\tline-height: 24px;\n\t\t\t\t\t${until.desktop} {\n\t\t\t\t\t\t${textSans.xlarge()};\n\t\t\t\t\t\tline-height: 20px;\n\t\t\t\t\t}\n\t\t\t\t`;\n            }\n            return css `\n\t\t\t\t${baseStyles};\n\t\t\t\t${headline.small()};\n\t\t\t\t${until.desktop} {\n\t\t\t\t\t${headline.xsmall()};\n\t\t\t\t}\n\t\t\t`;\n        case 'large': {\n            if (format.theme === ArticleSpecial.Labs) {\n                return css `\n\t\t\t\t\t${baseStyles};\n\t\t\t\t\t${textSans.large()};\n\t\t\t\t\tfont-size: 24px;\n\t\t\t\t\tline-height: 24px;\n\t\t\t\t\t${until.desktop} {\n\t\t\t\t\t\t${textSans.large()};\n\t\t\t\t\t\tline-height: 20px;\n\t\t\t\t\t}\n\t\t\t\t`;\n            }\n            return css `\n\t\t\t\t${baseStyles};\n\t\t\t\t${headline.xsmall()};\n\t\t\t\t${until.desktop} {\n\t\t\t\t\t${headline.xxsmall()};\n\t\t\t\t}\n\t\t\t`;\n        }\n        case 'medium': {\n            if (format.theme === ArticleSpecial.Labs) {\n                return css `\n\t\t\t\t\t${baseStyles};\n\t\t\t\t\t${textSans.large()};\n\t\t\t\t\tline-height: 20px;\n\t\t\t\t\t${until.desktop} {\n\t\t\t\t\t\t${textSans.medium()};\n\t\t\t\t\t\tline-height: 18px;\n\t\t\t\t\t}\n\t\t\t\t`;\n            }\n            return css `\n\t\t\t\t${baseStyles};\n\t\t\t\t${headline.xxsmall()};\n\t\t\t\t${until.desktop} {\n\t\t\t\t\t${headline.xxxsmall()};\n\t\t\t\t}\n\t\t\t`;\n        }\n        case 'small': {\n            if (format.theme === ArticleSpecial.Labs) {\n                return css `\n\t\t\t\t\t${baseStyles};\n\t\t\t\t\t${textSans.medium()};\n\t\t\t\t\tline-height: 18px;\n\t\t\t\t`;\n            }\n            return css `\n\t\t\t\t${baseStyles};\n\t\t\t\t${headline.xxxsmall()};\n\t\t\t`;\n        }\n        default:\n            return css ``;\n    }\n};\nconst colourStyles = (palette, isCard) => {\n    return css `\n\t\tcolor: ${isCard ? palette.text.cardByline : palette.text.byline};\n\t`;\n};\nexport const Byline = ({ text, format, containerPalette, size, isCard, }) => {\n    const palette = decidePalette(format, containerPalette);\n    return (_jsx(\"span\", { css: [bylineStyles(size, format), colourStyles(palette, isCard)], children: text }));\n};\n","import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { css, keyframes } from '@emotion/react';\nimport { storage } from '@guardian/libs';\nimport { useEffect, useState } from 'react';\nconst dotStyles = (colour) => css `\n\tcolor: ${colour && colour};\n\t:before {\n\t\tborder-radius: 62.5rem;\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\tbackground-color: currentColor;\n\t\twidth: 0.75em;\n\t\theight: 0.75em;\n\t\tcontent: '';\n\t\tmargin-right: 0.1875rem;\n\t\tvertical-align: initial;\n\t}\n`;\nconst livePulse = keyframes `\n    0% {opacity: 1;}\n    10% {opacity: .25;}\n    40% {opacity: 1;}\n    100% {opacity: 1;}\n`;\nconst animate = css `\n\t&[data-animate='true'] {\n\t\tanimation: ${livePulse} 1s infinite;\n\n\t\t@media (prefers-reduced-motion: reduce) {\n\t\t\tanimation: none;\n\t\t}\n\t}\n`;\nexport const PulsingDot = ({ colour }) => {\n    const [hydrated, setHydrated] = useState(false);\n    const [shouldFlash, setShouldFlash] = useState(false);\n    useEffect(() => {\n        // Respect the accessibility flag set here\n        // https://www.theguardian.com/help/accessibility-help\n        const flashingPreference = storage.local.get('gu.prefs.accessibility.flashing-elements');\n        // flashingPreference is null if no preference exists and explicitly\n        // false when the reader has said they don't want flashing\n        setShouldFlash(flashingPreference !== false);\n        // We use this to track if the flashing dot is hydrated\n        // Uses of pulsing dot that aren't in islands can instead be animated by\n        // the 'AnimatePulsingDots.importable.tsx' component\n        setHydrated(true);\n    }, []);\n    return (_jsx(\"span\", { css: [dotStyles(colour), animate], \"data-flashing-dot-hydrated\": hydrated, \"data-animate\": shouldFlash }));\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { PulsingDot } from './PulsingDot';\nconst kickerStyles = (colour) => css `\n\tcolor: ${colour};\n\tfont-weight: 700;\n\tmargin-right: 4px;\n`;\nexport const Kicker = ({ text, color, showPulsingDot, hideLineBreak, }) => {\n    return (_jsxs(\"div\", { css: [\n            kickerStyles(color),\n            hideLineBreak &&\n                css `\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t`,\n        ], children: [showPulsingDot && _jsx(PulsingDot, { colour: color }), text] }));\n};\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nimport { ArticleDesign, ArticleDisplay } from '@guardian/libs';\nimport { breakpoints } from '@guardian/source-foundations';\nimport React from 'react';\n/**\n * All business logic for image sizing is contained in this one function. This\n * is the source of truth.\n *\n * Based on image role, if it's main media or not and the format of the article\n * it is in, this function decides the width the image should have at different\n * breakpoints.\n *\n * Previously, this logic was set [in this Frontend file](https://github.com/guardian/frontend/blob/oliver/immersives-for-all/common/app/layout/ContentWidths.scala)\n *\n * Order is not important because the resulting array is sorted by breakpoint\n * prior to use.\n *\n */\nconst decideImageWidths = ({ role, isMainMedia, format, }) => {\n    if (isMainMedia) {\n        switch (format.display) {\n            case ArticleDisplay.Immersive: {\n                // If display is Immersive then main media should *always*\n                // use these larger image sources\n                return [\n                    { breakpoint: breakpoints.mobile, width: 480 },\n                    { breakpoint: breakpoints.mobileLandscape, width: 660 },\n                    { breakpoint: breakpoints.phablet, width: 740 },\n                    { breakpoint: breakpoints.tablet, width: 980 },\n                    { breakpoint: breakpoints.desktop, width: 1140 },\n                    { breakpoint: breakpoints.leftCol, width: 1300 },\n                    { breakpoint: breakpoints.wide, width: 1900 },\n                ];\n            }\n            case ArticleDisplay.Showcase:\n            case ArticleDisplay.NumberedList: {\n                if (format.design === ArticleDesign.Feature) {\n                    // The main image on feature articles gets larger sources when showcase\n                    // e.g.: http://www.theguardian.com/politics/2015/may/02/nicola-sturgeon-im-the-boss-now\n                    return [\n                        { breakpoint: breakpoints.mobile, width: 465 },\n                        { breakpoint: breakpoints.mobileLandscape, width: 645 },\n                        { breakpoint: breakpoints.phablet, width: 725 },\n                        { breakpoint: breakpoints.tablet, width: 965 },\n                        { breakpoint: breakpoints.desktop, width: 1125 },\n                        { breakpoint: breakpoints.leftCol, width: 1140 },\n                        { breakpoint: breakpoints.wide, width: 1300 },\n                    ];\n                }\n                else {\n                    return [\n                        { breakpoint: breakpoints.mobile, width: 465 },\n                        { breakpoint: breakpoints.mobileLandscape, width: 645 },\n                        { breakpoint: breakpoints.phablet, width: 660 },\n                        { breakpoint: breakpoints.tablet, width: 700 },\n                        { breakpoint: breakpoints.leftCol, width: 940 },\n                        { breakpoint: breakpoints.wide, width: 1020 },\n                    ];\n                }\n            }\n            default:\n                return [\n                    { breakpoint: breakpoints.mobile, width: 465 },\n                    { breakpoint: breakpoints.mobileLandscape, width: 645 },\n                    { breakpoint: breakpoints.phablet, width: 620 },\n                    { breakpoint: breakpoints.tablet, width: 700 },\n                    { breakpoint: breakpoints.desktop, width: 620 },\n                ];\n        }\n    }\n    else if (format.design === ArticleDesign.LiveBlog ||\n        format.design === ArticleDesign.DeadBlog) {\n        switch (role) {\n            case 'thumbnail':\n                return [\n                    { breakpoint: breakpoints.mobile, width: 120 },\n                    { breakpoint: breakpoints.tablet, width: 140 }, // desktop, leftCol and wide are also 140px\n                ];\n            case 'showcase':\n            case 'immersive':\n            case 'supporting':\n            case 'halfWidth':\n                return [{ breakpoint: breakpoints.mobile, width: 445 }];\n            case 'inline':\n            default:\n                return [\n                    { breakpoint: breakpoints.mobile, width: 465 },\n                    { breakpoint: breakpoints.phablet, width: 700 },\n                ];\n        }\n    }\n    else {\n        switch (role) {\n            case 'showcase':\n                return [\n                    { breakpoint: breakpoints.mobile, width: 445 },\n                    { breakpoint: breakpoints.mobileLandscape, width: 605 },\n                    { breakpoint: breakpoints.phablet, width: 620 },\n                    { breakpoint: breakpoints.desktop, width: 640 },\n                    { breakpoint: breakpoints.leftCol, width: 800 },\n                    { breakpoint: breakpoints.wide, width: 880 },\n                ];\n            case 'supporting':\n                return [\n                    { breakpoint: breakpoints.mobile, width: 445 },\n                    { breakpoint: breakpoints.mobileLandscape, width: 605 },\n                    { breakpoint: breakpoints.phablet, width: 620 },\n                    { breakpoint: breakpoints.desktop, width: 300 },\n                    { breakpoint: breakpoints.wide, width: 380 },\n                ];\n            case 'thumbnail':\n                return [\n                    { breakpoint: breakpoints.mobile, width: 120 },\n                    { breakpoint: breakpoints.tablet, width: 140 }, // desktop, leftCol and wide are also 140px\n                ];\n            case 'immersive':\n                return [\n                    { breakpoint: breakpoints.mobile, width: 465 },\n                    { breakpoint: breakpoints.mobileLandscape, width: 645 },\n                    { breakpoint: breakpoints.phablet, width: 725 },\n                    { breakpoint: breakpoints.tablet, width: 965 },\n                    { breakpoint: breakpoints.desktop, width: 1125 },\n                    { breakpoint: breakpoints.leftCol, width: 1140 },\n                    { breakpoint: breakpoints.wide, width: 1300 },\n                ];\n            case 'halfWidth':\n                return [{ breakpoint: breakpoints.mobile, width: 445 }];\n            case 'inline':\n            default:\n                return [\n                    { breakpoint: breakpoints.mobile, width: 445 },\n                    { breakpoint: breakpoints.mobileLandscape, width: 605 },\n                    { breakpoint: breakpoints.phablet, width: 620 },\n                ];\n        }\n    }\n};\n/**\n * Generates a URL for calling the Fastly Image Optimiser.\n *\n * @see https://developer.fastly.com/reference/io/\n * @see https://github.com/guardian/fastly-image-service/blob/main/fastly-io_guim_co_uk/src/main/resources/varnish/main.vcl\n *\n */\nconst generateImageURL = ({ master, imageWidth, resolution, }) => {\n    const url = new URL(master);\n    // In CODE, we do not generate optimised replacement images\n    if (url.hostname === 's3-eu-west-1.amazonaws.com')\n        return url.href;\n    const service = url.hostname.split('.')[0] ?? '';\n    const params = new URLSearchParams({\n        width: imageWidth.toString(),\n        // Why 45 and 85?\n        // This numbers have been picked in 2018 as the right\n        // balance between image fidelity and file size\n        // https://github.com/guardian/fastly-image-service/pull/35\n        ...(resolution === 'high'\n            ? { quality: '45', dpr: '2' }\n            : { quality: '85', dpr: '1' }),\n        s: 'none',\n    });\n    return `https://i.guim.co.uk/img/${service}${url.pathname}?${params.toString()}`;\n};\nconst descendingByBreakpoint = (a, b) => {\n    // We need to list the largest images first as browsers read top down and stop\n    // as soon as they hit a matching media query\n    return b.breakpoint - a.breakpoint;\n};\n/**\n * Used on `picture` and `img` to prevent having a line-height,\n * as these elements are which are `inline` by default.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#styling_with_css\n */\nconst block = css `\n\tdisplay: block;\n`;\n/**\n * Generate image sources for an image.\n *\n * @param master source image URL\n * @param imageWidths list of image widths\n */\nexport const generateSources = (master, imageWidths) => imageWidths\n    .slice()\n    .sort(descendingByBreakpoint)\n    .map(({ width: imageWidth, breakpoint }) => {\n    return {\n        breakpoint,\n        width: imageWidth,\n        hiResUrl: generateImageURL({\n            master,\n            imageWidth,\n            resolution: 'high',\n        }),\n        lowResUrl: generateImageURL({\n            master,\n            imageWidth,\n            resolution: 'low',\n        }),\n    };\n});\n/**\n * The assumption here is readers on devices that do not support srcset\n * are likely to be on poor network connections so we're going\n * to fallback to the smallest image.\n *\n * Sources are ordered in `descendingByBreakpoint` order,\n * so the last one is the smallest.\n */\nexport const getFallbackSource = (sources) => {\n    const [fallback] = sources.slice(-1);\n    if (!fallback)\n        throw new Error('No fallback images found');\n    return fallback;\n};\nexport const Picture = ({ role, format, master, alt, height, width, isMainMedia = false, isLazy = true, }) => {\n    const sources = generateSources(master, decideImageWidths({ role, format, isMainMedia }));\n    const ratio = parseInt(height, 10) / parseInt(width, 10);\n    const fallbackSource = getFallbackSource(sources);\n    return (_jsxs(\"picture\", { css: block, children: [format.display === ArticleDisplay.Immersive && isMainMedia && (_jsxs(_Fragment, { children: [_jsx(\"source\", { media: \"(orientation: portrait) and (-webkit-min-device-pixel-ratio: 1.25), (orientation: portrait) and (min-resolution: 120dpi)\", sizes: \"167vh\", srcSet: sources\n                            .map((source) => `${source.hiResUrl} ${source.width}w`)\n                            .join(',') }), _jsx(\"source\", { media: \"(orientation: portrait)\", sizes: \"167vh\", srcSet: sources\n                            .map((source) => `${source.lowResUrl} ${source.width}w`)\n                            .join(',') })] })), sources.map((source) => {\n                return (_jsxs(React.Fragment, { children: [_jsx(\"source\", { srcSet: source.hiResUrl, media: `(min-width: ${source.breakpoint}px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: ${source.breakpoint}px) and (min-resolution: 120dpi)` }), _jsx(\"source\", { srcSet: source.lowResUrl, media: `(min-width: ${source.breakpoint}px)` })] }, source.breakpoint));\n            }), _jsx(\"img\", { alt: alt, src: fallbackSource.lowResUrl, width: fallbackSource.width, height: fallbackSource.width * ratio, loading: isLazy && !Picture.disableLazyLoading ? 'lazy' : undefined, css: block })] }));\n};\n// We use disableLazyLoading to decide if we want to turn off lazy loading of images site wide. We use this\n// to prevent false negatives on Chromatic snapshots (see /.storybook/config)\nPicture.disableLazyLoading = false;\n","import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { css } from '@emotion/react';\nconst quoteStyles = (colour) => css `\n\theight: 1em;\n\twidth: 1.5em;\n\tmargin-right: 3px;\n\tvertical-align: baseline;\n\tfill: ${colour};\n`;\n/**\n * An inline quote icon (“) sized to match the font size.\n */\nexport const QuoteIcon = ({ colour }) => (\n/* This viewBox is narrower than Source’s SvgQuote */\n_jsx(\"svg\", { viewBox: \"4 4 24 16\", css: quoteStyles(colour), children: _jsx(\"path\", { d: \"M9.2776 8H14.0473C13.4732 12.5489 12.9653 17.0095 12.7445 22H4C4.79495 17.142 6.4511 12.5489 9.2776 8ZM20.3852 8H25.0887C24.5808 12.5489 24.0067 17.0095 23.7859 22H15.0635C15.9688 17.142 17.5587 12.5489 20.3852 8Z\" }) }));\n","/**\n * Temporary fix\n * =============\n *\n * Find the master URL for an image if has already been signed upstream.\n *\n * DCR can handle generating a signed image URL with `generateImageURL`,\n * so this method extracts source URLS from fully signed ones. _e.g.:_\n *\n * - from\n *   `https://i.guim.co.uk/img/media/c56c6217f8fa306d89320cc7915161203b5017b1/0_166_5000_3002/master/5000.jpg?width=300&quality=85&auto=format&fit=max&s=0d205d08639b4ad6e1b86758ab451abb`\n * \t to\n *   `https://media.guim.co.uk/img/media/c56c6217f8fa306d89320cc7915161203b5017b1/0_166_5000_3002/master/5000.jpg`\n *\n * - from\n *   `https://i.guim.co.uk/img/uploads/2017/10/06/George-Monbiot,-L.png?width=173&quality=85&auto=format&fit=max&s=be5b0d3f3aa55682e4930057fc3929a3`\n *   to\n *   `https://uploads.guim.co.uk/2017/10/06/George-Monbiot,-L.png`\n *\n * @deprecated Favour updating image paths sent from frontend to sources\n */\nexport const getSourceImageUrl = (source) => {\n    const url = new URL(source);\n    const buckets = ['/img/media/', '/img/static/', '/img/uploads/'];\n    const prefix = buckets.find((bucket) => url.pathname.startsWith(bucket));\n    if (url.hostname === 'i.guim.co.uk' && prefix) {\n        const path = url.pathname.replace(prefix, '');\n        switch (prefix) {\n            case '/img/media/':\n                return `https://media.guim.co.uk/${path}`;\n            case '/img/static/':\n                return `https://static.guim.co.uk/${path}`;\n            case '/img/uploads/':\n                return `https://uploads.guim.co.uk/${path}`;\n        }\n    }\n    return source;\n};\n","\nmodule.exports = {\"attributes\":{\"width\":\"11\",\"height\":\"11\",\"viewBox\":\"0 0 11 11\"},\"content\":\"<path d=\\\"M5.4 0C2.4 0 0 2.4 0 5.4s2.4 5.4 5.4 5.4 5.4-2.4 5.4-5.4S8.4 0 5.4 0zm3 6.8H4.7V1.7h.7L6 5.4l2.4.6v.8z\\\"></path>\"}\nvar desvg = require('@kossnocorp/desvg/react')\nmodule.exports = desvg(module.exports)\n"],"names":["picture","img","block","backgroundStyles","palette","css","background","avatar","Avatar","src","alt","format","containerPalette","decidePalette","sources","generateSources","getSourceImageUrl","breakpoint","width","fallbackSource","getFallbackSource","_jsxs","children","map","source","Fragment","_jsx","srcSet","hiResUrl","media","lowResUrl","bylineStyles","size","baseStyles","theme","ArticleSpecial","textSans","until","headline","colourStyles","isCard","text","cardByline","byline","Byline","dotStyles","colour","livePulse","keyframes","animate","PulsingDot","useState","hydrated","setHydrated","shouldFlash","setShouldFlash","useEffect","flashingPreference","storage","Kicker","color","showPulsingDot","hideLineBreak","generateImageURL","master","imageWidth","resolution","url","URL","hostname","href","service","split","params","URLSearchParams","toString","quality","dpr","s","pathname","descendingByBreakpoint","a","b","imageWidths","slice","sort","fallback","Error","quoteStyles","QuoteIcon","viewBox","d","prefix","find","bucket","startsWith","path","replace","module","exports","desvg"],"sourceRoot":""}