{"version":3,"file":"relativeTime.modern.5385c91f40653c855a75.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/web/browser/relativeTime/index.ts","webpack://@guardian/dotcom-rendering/./src/web/browser/relativeTime/updateTimeElements.ts","webpack://@guardian/dotcom-rendering/../node_modules/@guardian/libs/esm/datetime/timeAgo.js"],"sourcesContent":["import { updateTimeElements } from './updateTimeElements';\n\nexport const relativeTime = (): Promise<void> => {\n\tupdateTimeElements();\n\twindow.setInterval(() => {\n\t\tupdateTimeElements();\n\t}, 15000);\n\n\treturn Promise.resolve();\n};\n","import { timeAgo } from '@guardian/libs';\n\nexport const updateTimeElement = (element: Element): void => {\n\tif (element instanceof HTMLElement) {\n\t\t// Get required values\n\t\tconst { relativeformat: relativeFormat } = element.dataset;\n\t\tconst absoluteTime = element.getAttribute('datetime');\n\t\tif (!absoluteTime || !relativeFormat) return;\n\n\t\tlet newTime: false | string = false;\n\t\tswitch (relativeFormat) {\n\t\t\tcase 'short':\n\t\t\tcase 'med':\n\t\t\t\tnewTime = timeAgo(new Date(absoluteTime).getTime(), {\n\t\t\t\t\tverbose: false,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'long':\n\t\t\t\tnewTime = timeAgo(new Date(absoluteTime).getTime(), {\n\t\t\t\t\tverbose: true,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t\tconst oldTime = element.innerText;\n\t\tif (newTime !== false && newTime !== oldTime)\n\t\t\telement.innerHTML = newTime;\n\t}\n};\n\nexport const updateTimeElements = (): void => {\n\tdocument\n\t\t.querySelectorAll('time[data-relativeformat]')\n\t\t.forEach(updateTimeElement);\n};\n","const pad = (n) => n.toString().padStart(2, '0');\nconst isWithin24Hours = (date) => {\n    const today = new Date();\n    return date.getTime() > today.getTime() - 24 * 60 * 60 * 1000;\n};\nconst isYesterday = (relative) => {\n    const today = new Date();\n    const yesterday = new Date();\n    yesterday.setDate(today.getDate() - 1);\n    return relative.toDateString() === yesterday.toDateString();\n};\nconst getSuffix = (type, value, verbose) => {\n    const shouldPluralise = value !== 1;\n    switch (type) {\n        case 's': {\n            // Always pluralised, as less than 15 seconds returns “now”\n            if (verbose)\n                return ' seconds ago';\n            return 's ago';\n        }\n        case 'm': {\n            if (verbose && shouldPluralise)\n                return ' minutes ago';\n            if (verbose)\n                return ' minute ago';\n            return 'm ago';\n        }\n        case 'h': {\n            if (verbose && shouldPluralise)\n                return ' hours ago';\n            if (verbose)\n                return ' hour ago';\n            return 'h ago';\n        }\n        case 'd': {\n            // Always pluralised, as less than 2 days returns “Yesterday HH.MM”\n            if (verbose)\n                return ' days ago';\n            return 'd ago';\n        }\n    }\n};\nconst withTime = (date) => ` ${date.getHours()}.${pad(date.getMinutes())}`;\n/**\n * Takes an absolute date in [epoch format] and returns a string representing\n * relative time ago.\n *\n * Time is formatted according to [the Guardian and Observer Style Guide (T)][T]\n *\n * @param {number} epoch The date when an event happened in epoch format\n * @param {Object} [options] Options to control the formatting\n * @returns {string | false} A formatted relative time string, or `false` if the epoch is in the future\n *\n * [epoch format]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#description\n * [T]: https://www.theguardian.com/guardian-observer-style-guide-t\n */\nconst timeAgo = (epoch, options) => {\n    const then = new Date(epoch);\n    const now = new Date();\n    const verbose = options?.verbose;\n    const daysUntilAbsolute = options?.daysUntilAbsolute ?? 7;\n    const secondsAgo = Math.floor((now.getTime() - then.getTime()) / 1000);\n    const veryClose = secondsAgo < 15;\n    const within55Seconds = secondsAgo < 55;\n    const withinTheHour = secondsAgo < 55 * 60;\n    const within24hrs = isWithin24Hours(then);\n    const wasYesterday = isYesterday(then);\n    const withinAbsoluteCutoff = secondsAgo < daysUntilAbsolute * 24 * 60 * 60;\n    if (secondsAgo < 0) {\n        // Dates in the future are not supported\n        return false;\n    }\n    else if (veryClose) {\n        // Now\n        return 'now';\n    }\n    else if (within55Seconds) {\n        // Seconds\n        return `${secondsAgo}${getSuffix('s', secondsAgo, verbose)}`;\n    }\n    else if (withinTheHour) {\n        // Minutes\n        const minutes = Math.round(secondsAgo / 60);\n        return `${minutes}${getSuffix('m', minutes, verbose)}`;\n    }\n    else if (within24hrs) {\n        // Hours\n        const hours = Math.round(secondsAgo / 3600);\n        return `${hours}${getSuffix('h', hours, verbose)}`;\n    }\n    else if (wasYesterday && verbose) {\n        // Yesterday\n        return `Yesterday${withTime(then)}`;\n    }\n    else if (withinAbsoluteCutoff) {\n        // Days\n        const days = Math.round(secondsAgo / 3600 / 24);\n        return `${days}${getSuffix('d', days, verbose)}`;\n    }\n    else {\n        // Simple date - \"9 Nov 2019\"\n        return [\n            then.getDate(),\n            verbose\n                ? then.toLocaleString('en-GB', { month: 'long' })\n                : then.toLocaleString('en-GB', { month: 'short' }),\n            then.getFullYear(),\n        ].join(' ');\n    }\n};\n\nexport { timeAgo };\n//# sourceMappingURL=timeAgo.js.map\n"],"names":["relativeTime","updateTimeElements","window","setInterval","Promise","resolve","updateTimeElement","element","HTMLElement","relativeformat","relativeFormat","dataset","absoluteTime","getAttribute","newTime","timeAgo","Date","getTime","verbose","oldTime","innerText","innerHTML","document","querySelectorAll","forEach","getSuffix","type","value","shouldPluralise","epoch","options","then","now","daysUntilAbsolute","secondsAgo","Math","floor","veryClose","within55Seconds","withinTheHour","within24hrs","date","today","isWithin24Hours","wasYesterday","relative","yesterday","setDate","getDate","toDateString","isYesterday","withinAbsoluteCutoff","minutes","round","hours","pad","getHours","getMinutes","toString","padStart","days","toLocaleString","month","getFullYear","join"],"sourceRoot":""}