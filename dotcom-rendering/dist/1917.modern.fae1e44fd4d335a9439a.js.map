{"version":3,"file":"1917.modern.fae1e44fd4d335a9439a.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/./src/web/components/Avatar.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/Picture.tsx","webpack://@guardian/dotcom-rendering/./src/web/components/QuoteIcon.tsx","webpack://@guardian/dotcom-rendering/./src/web/lib/getSourceImageUrl_temp_fix.ts"],"sourcesContent":["import { css } from '@emotion/react';\nimport { Fragment } from 'react';\nimport type { DCRContainerPalette } from '../../types/front';\nimport type { Palette } from '../../types/palette';\nimport { decidePalette } from '../lib/decidePalette';\nimport { getSourceImageUrl } from '../lib/getSourceImageUrl_temp_fix';\nimport { generateSources, getFallbackSource } from './Picture';\n\nconst picture = css`\n\tborder-radius: 100%;\n\theight: 100%;\n\twidth: 100%;\n\toverflow: hidden;\n`;\n\nconst img = css`\n\tobject-fit: cover;\n\theight: 100%;\n\twidth: 100%;\n`;\n\n/**\n * Used on `picture` and `img` to prevent having a line-height,\n * as these elements are which are `inline` by default.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#styling_with_css\n */\nconst block = css`\n\tdisplay: block;\n`;\n\nconst backgroundStyles = (palette: Palette) =>\n\tcss`\n\t\tbackground-color: ${palette.background.avatar};\n\t`;\n\ntype Props = {\n\tsrc: string;\n\talt: string;\n\tformat: ArticleFormat;\n\tcontainerPalette?: DCRContainerPalette;\n};\n\nexport const Avatar = ({ src, alt, format, containerPalette }: Props) => {\n\tconst palette = decidePalette(format, containerPalette);\n\tconst sources = generateSources(getSourceImageUrl(src), [\n\t\t{ breakpoint: 320, width: 75 },\n\t\t{ breakpoint: 740, width: 140 },\n\t]);\n\n\t/**\n\t * The assumption here is readers on devices that do not support srcset\n\t * are likely to be on poor network connections so we're going\n\t * to fallback to the smallest image at low resolution.\n\t *\n\t * Sources are ordered in `descendingByBreakpoint` order,\n\t * so the last one is the smallest.\n\t */\n\tconst fallbackSource = getFallbackSource(sources);\n\n\treturn (\n\t\t<picture\n\t\t\t// data-size={imageSize}\n\t\t\tcss={[block, picture, backgroundStyles(palette)]}\n\t\t>\n\t\t\t{sources.map((source) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Fragment key={source.breakpoint}>\n\t\t\t\t\t\t{/* High resolution (HDPI) sources*/}\n\t\t\t\t\t\t<source\n\t\t\t\t\t\t\tsrcSet={source.hiResUrl}\n\t\t\t\t\t\t\tmedia={`(min-width: ${source.breakpoint}px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: ${source.breakpoint}px) and (min-resolution: 120dpi)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* Low resolution (MDPI) source*/}\n\t\t\t\t\t\t<source\n\t\t\t\t\t\t\tsrcSet={source.lowResUrl}\n\t\t\t\t\t\t\tmedia={`(min-width: ${source.breakpoint}px)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Fragment>\n\t\t\t\t);\n\t\t\t})}\n\n\t\t\t<img alt={alt} src={fallbackSource.lowResUrl} css={[block, img]} />\n\t\t</picture>\n\t);\n};\n","import { css } from '@emotion/react';\nimport { ArticleDesign, ArticleDisplay } from '@guardian/libs';\nimport { breakpoints } from '@guardian/source-foundations';\nimport React from 'react';\nimport type { RoleType } from '../../types/content';\n\n/**\n * Working on this file? Checkout out 027-pictures.md & 029-signing-image-urls.md for background information & context\n **/\n\ntype Props = {\n\trole: RoleType;\n\tformat: ArticleFormat;\n\tmaster: string;\n\talt: string;\n\theight: string;\n\twidth: string;\n\tisMainMedia?: boolean;\n\tisLazy?: boolean;\n};\n\nexport type ImageWidthType = { breakpoint: number; width: number };\n\n/**\n * All business logic for image sizing is contained in this one function. This\n * is the source of truth.\n *\n * Based on image role, if it's main media or not and the format of the article\n * it is in, this function decides the width the image should have at different\n * breakpoints.\n *\n * Previously, this logic was set [in this Frontend file](https://github.com/guardian/frontend/blob/oliver/immersives-for-all/common/app/layout/ContentWidths.scala)\n *\n * Order is not important because the resulting array is sorted by breakpoint\n * prior to use.\n *\n */\nconst decideImageWidths = ({\n\trole,\n\tisMainMedia,\n\tformat,\n}: {\n\trole: RoleType;\n\tisMainMedia?: boolean;\n\tformat: ArticleFormat;\n}): [ImageWidthType, ...ImageWidthType[]] => {\n\tif (isMainMedia) {\n\t\tswitch (format.display) {\n\t\t\tcase ArticleDisplay.Immersive: {\n\t\t\t\t// If display is Immersive then main media should *always*\n\t\t\t\t// use these larger image sources\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 480 },\n\t\t\t\t\t{ breakpoint: breakpoints.mobileLandscape, width: 660 },\n\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 740 },\n\t\t\t\t\t{ breakpoint: breakpoints.tablet, width: 980 },\n\t\t\t\t\t{ breakpoint: breakpoints.desktop, width: 1140 },\n\t\t\t\t\t{ breakpoint: breakpoints.leftCol, width: 1300 },\n\t\t\t\t\t{ breakpoint: breakpoints.wide, width: 1900 },\n\t\t\t\t];\n\t\t\t}\n\t\t\tcase ArticleDisplay.Showcase:\n\t\t\tcase ArticleDisplay.NumberedList: {\n\t\t\t\tif (format.design === ArticleDesign.Feature) {\n\t\t\t\t\t// The main image on feature articles gets larger sources when showcase\n\t\t\t\t\t// e.g.: http://www.theguardian.com/politics/2015/may/02/nicola-sturgeon-im-the-boss-now\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 465 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.mobileLandscape, width: 645 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 725 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.tablet, width: 965 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.desktop, width: 1125 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.leftCol, width: 1140 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.wide, width: 1300 },\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 465 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.mobileLandscape, width: 645 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 660 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.tablet, width: 700 }, // desktop is also 700px\n\t\t\t\t\t\t{ breakpoint: breakpoints.leftCol, width: 940 },\n\t\t\t\t\t\t{ breakpoint: breakpoints.wide, width: 1020 },\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 465 },\n\t\t\t\t\t{ breakpoint: breakpoints.mobileLandscape, width: 645 },\n\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 620 },\n\t\t\t\t\t{ breakpoint: breakpoints.tablet, width: 700 },\n\t\t\t\t\t{ breakpoint: breakpoints.desktop, width: 620 },\n\t\t\t\t];\n\t\t}\n\t} else if (\n\t\tformat.design === ArticleDesign.LiveBlog ||\n\t\tformat.design === ArticleDesign.DeadBlog\n\t) {\n\t\tswitch (role) {\n\t\t\tcase 'thumbnail':\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 120 }, // mobileLandscape and tablet are also 120px\n\t\t\t\t\t{ breakpoint: breakpoints.tablet, width: 140 }, // desktop, leftCol and wide are also 140px\n\t\t\t\t];\n\t\t\tcase 'showcase':\n\t\t\tcase 'immersive':\n\t\t\tcase 'supporting':\n\t\t\tcase 'halfWidth':\n\t\t\t\treturn [{ breakpoint: breakpoints.mobile, width: 445 }];\n\t\t\tcase 'inline':\n\t\t\tdefault:\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 465 },\n\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 700 },\n\t\t\t\t];\n\t\t}\n\t} else {\n\t\tswitch (role) {\n\t\t\tcase 'showcase':\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 445 },\n\t\t\t\t\t{ breakpoint: breakpoints.mobileLandscape, width: 605 },\n\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 620 }, // tablet is also 620px\n\t\t\t\t\t{ breakpoint: breakpoints.desktop, width: 640 },\n\t\t\t\t\t{ breakpoint: breakpoints.leftCol, width: 800 },\n\t\t\t\t\t{ breakpoint: breakpoints.wide, width: 880 },\n\t\t\t\t];\n\t\t\tcase 'supporting':\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 445 },\n\t\t\t\t\t{ breakpoint: breakpoints.mobileLandscape, width: 605 },\n\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 620 }, // tablet is also 620px\n\t\t\t\t\t{ breakpoint: breakpoints.desktop, width: 300 }, // leftCol is also 300px\n\t\t\t\t\t{ breakpoint: breakpoints.wide, width: 380 },\n\t\t\t\t];\n\t\t\tcase 'thumbnail':\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 120 }, // mobileLandscape and tablet are also 120px\n\t\t\t\t\t{ breakpoint: breakpoints.tablet, width: 140 }, // desktop, leftCol and wide are also 140px\n\t\t\t\t];\n\t\t\tcase 'immersive':\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 465 },\n\t\t\t\t\t{ breakpoint: breakpoints.mobileLandscape, width: 645 },\n\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 725 },\n\t\t\t\t\t{ breakpoint: breakpoints.tablet, width: 965 },\n\t\t\t\t\t{ breakpoint: breakpoints.desktop, width: 1125 },\n\t\t\t\t\t{ breakpoint: breakpoints.leftCol, width: 1140 },\n\t\t\t\t\t{ breakpoint: breakpoints.wide, width: 1300 },\n\t\t\t\t];\n\t\t\tcase 'halfWidth':\n\t\t\t\treturn [{ breakpoint: breakpoints.mobile, width: 445 }];\n\t\t\tcase 'inline':\n\t\t\tdefault:\n\t\t\t\treturn [\n\t\t\t\t\t{ breakpoint: breakpoints.mobile, width: 445 },\n\t\t\t\t\t{ breakpoint: breakpoints.mobileLandscape, width: 605 },\n\t\t\t\t\t{ breakpoint: breakpoints.phablet, width: 620 },\n\t\t\t\t];\n\t\t}\n\t}\n};\n\n/**\n * Generates a URL for calling the Fastly Image Optimiser.\n *\n * @see https://developer.fastly.com/reference/io/\n * @see https://github.com/guardian/fastly-image-service/blob/main/fastly-io_guim_co_uk/src/main/resources/varnish/main.vcl\n *\n */\nconst generateImageURL = ({\n\tmaster,\n\timageWidth,\n\tresolution,\n}: {\n\tmaster: string;\n\timageWidth: number;\n\tresolution: 'low' | 'high';\n}): string => {\n\tconst url = new URL(master);\n\n\t// In CODE, we do not generate optimised replacement images\n\tif (url.hostname === 's3-eu-west-1.amazonaws.com') return url.href;\n\n\tconst service = url.hostname.split('.')[0] ?? '';\n\n\tconst params = new URLSearchParams({\n\t\twidth: imageWidth.toString(),\n\t\t// Why 45 and 85?\n\t\t// This numbers have been picked in 2018 as the right\n\t\t// balance between image fidelity and file size\n\t\t// https://github.com/guardian/fastly-image-service/pull/35\n\t\t...(resolution === 'high'\n\t\t\t? { quality: '45', dpr: '2' }\n\t\t\t: { quality: '85', dpr: '1' }),\n\t\ts: 'none',\n\t});\n\n\treturn `https://i.guim.co.uk/img/${service}${\n\t\turl.pathname\n\t}?${params.toString()}`;\n};\n\nconst descendingByBreakpoint = (a: ImageWidthType, b: ImageWidthType) => {\n\t// We need to list the largest images first as browsers read top down and stop\n\t// as soon as they hit a matching media query\n\treturn b.breakpoint - a.breakpoint;\n};\n\n/**\n * Used on `picture` and `img` to prevent having a line-height,\n * as these elements are which are `inline` by default.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#styling_with_css\n */\nconst block = css`\n\tdisplay: block;\n`;\n\ntype ImageSource = {\n\tbreakpoint: number;\n\twidth: number;\n\thiResUrl: string;\n\tlowResUrl: string;\n};\n\n/**\n * Generate image sources for an image.\n *\n * @param master source image URL\n * @param imageWidths list of image widths\n */\nexport const generateSources = (\n\tmaster: string,\n\timageWidths: [ImageWidthType, ...ImageWidthType[]],\n): ImageSource[] =>\n\timageWidths\n\t\t.slice()\n\t\t.sort(descendingByBreakpoint)\n\t\t.map(({ width: imageWidth, breakpoint }) => {\n\t\t\treturn {\n\t\t\t\tbreakpoint,\n\t\t\t\twidth: imageWidth,\n\t\t\t\thiResUrl: generateImageURL({\n\t\t\t\t\tmaster,\n\t\t\t\t\timageWidth,\n\t\t\t\t\tresolution: 'high',\n\t\t\t\t}),\n\t\t\t\tlowResUrl: generateImageURL({\n\t\t\t\t\tmaster,\n\t\t\t\t\timageWidth,\n\t\t\t\t\tresolution: 'low',\n\t\t\t\t}),\n\t\t\t};\n\t\t});\n\n/**\n * The assumption here is readers on devices that do not support srcset\n * are likely to be on poor network connections so we're going\n * to fallback to the smallest image.\n *\n * Sources are ordered in `descendingByBreakpoint` order,\n * so the last one is the smallest.\n */\nexport const getFallbackSource = (sources: ImageSource[]): ImageSource => {\n\tconst [fallback] = sources.slice(-1);\n\tif (!fallback) throw new Error('No fallback images found');\n\treturn fallback;\n};\n\nexport const Picture = ({\n\trole,\n\tformat,\n\tmaster,\n\talt,\n\theight,\n\twidth,\n\tisMainMedia = false,\n\tisLazy = true,\n}: Props) => {\n\tconst sources = generateSources(\n\t\tmaster,\n\t\tdecideImageWidths({ role, format, isMainMedia }),\n\t);\n\n\tconst ratio = parseInt(height, 10) / parseInt(width, 10);\n\n\tconst fallbackSource = getFallbackSource(sources);\n\n\treturn (\n\t\t<picture css={block}>\n\t\t\t{/* Immersive Main Media images get additional sources specifically for when in portrait orientation */}\n\t\t\t{format.display === ArticleDisplay.Immersive && isMainMedia && (\n\t\t\t\t<>\n\t\t\t\t\t{/*\n\t\t\t\t\t\tImmersive MainMedia elements fill the height of the viewport, meaning on mobile\n\t\t\t\t\t\tdevices even though the viewport width is small, we'll need a larger image to\n\t\t\t\t\t\tmaintain quality. To solve this problem we're using the viewport height (vh) to\n\t\t\t\t\t\tcalculate width. The value of 167vh relates to an assumed image ratio of 5:3\n\t\t\t\t\t\twhich is equal to 167 (viewport height) : 100 (viewport width)\n\n\t\t\t\t\t\tIf either of these media queries match then the browser will choose an image from the\n\t\t\t\t\t\tlist of sources in srcset based on the viewport list. If the media query doesn't match\n\t\t\t\t\t\tit continues checking using the standard sources underneath\n\t\t\t\t\t*/}\n\t\t\t\t\t{/* High resolution (HDPI) portrait sources*/}\n\t\t\t\t\t<source\n\t\t\t\t\t\tmedia=\"(orientation: portrait) and (-webkit-min-device-pixel-ratio: 1.25), (orientation: portrait) and (min-resolution: 120dpi)\"\n\t\t\t\t\t\tsizes=\"167vh\"\n\t\t\t\t\t\tsrcSet={sources\n\t\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t\t(source) =>\n\t\t\t\t\t\t\t\t\t`${source.hiResUrl} ${source.width}w`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.join(',')}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* Low resolution (MDPI) portrait sources*/}\n\t\t\t\t\t<source\n\t\t\t\t\t\tmedia=\"(orientation: portrait)\"\n\t\t\t\t\t\tsizes=\"167vh\"\n\t\t\t\t\t\tsrcSet={sources\n\t\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t\t(source) =>\n\t\t\t\t\t\t\t\t\t`${source.lowResUrl} ${source.width}w`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.join(',')}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{sources.map((source) => {\n\t\t\t\treturn (\n\t\t\t\t\t<React.Fragment key={source.breakpoint}>\n\t\t\t\t\t\t{/* High resolution (HDPI) sources*/}\n\t\t\t\t\t\t<source\n\t\t\t\t\t\t\tsrcSet={source.hiResUrl}\n\t\t\t\t\t\t\tmedia={`(min-width: ${source.breakpoint}px) and (-webkit-min-device-pixel-ratio: 1.25), (min-width: ${source.breakpoint}px) and (min-resolution: 120dpi)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* Low resolution (MDPI) source*/}\n\t\t\t\t\t\t<source\n\t\t\t\t\t\t\tsrcSet={source.lowResUrl}\n\t\t\t\t\t\t\tmedia={`(min-width: ${source.breakpoint}px)`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t);\n\t\t\t})}\n\n\t\t\t<img\n\t\t\t\talt={alt}\n\t\t\t\tsrc={fallbackSource.lowResUrl}\n\t\t\t\twidth={fallbackSource.width}\n\t\t\t\theight={fallbackSource.width * ratio}\n\t\t\t\tloading={\n\t\t\t\t\tisLazy && !Picture.disableLazyLoading ? 'lazy' : undefined\n\t\t\t\t}\n\t\t\t\tcss={block}\n\t\t\t/>\n\t\t</picture>\n\t);\n};\n\n// We use disableLazyLoading to decide if we want to turn off lazy loading of images site wide. We use this\n// to prevent false negatives on Chromatic snapshots (see /.storybook/config)\nPicture.disableLazyLoading = false;\n","import { css } from '@emotion/react';\n\nconst quoteStyles = (colour: string) => css`\n\theight: 1em;\n\twidth: 1.5em;\n\tmargin-right: 3px;\n\tvertical-align: baseline;\n\tfill: ${colour};\n`;\n\ntype Props = {\n\tcolour: string;\n};\n\n/**\n * An inline quote icon (“) sized to match the font size.\n */\nexport const QuoteIcon = ({ colour }: Props) => (\n\t/* This viewBox is narrower than Source’s SvgQuote */\n\t<svg viewBox=\"4 4 24 16\" css={quoteStyles(colour)}>\n\t\t<path d=\"M9.2776 8H14.0473C13.4732 12.5489 12.9653 17.0095 12.7445 22H4C4.79495 17.142 6.4511 12.5489 9.2776 8ZM20.3852 8H25.0887C24.5808 12.5489 24.0067 17.0095 23.7859 22H15.0635C15.9688 17.142 17.5587 12.5489 20.3852 8Z\" />\n\t</svg>\n);\n","/**\n * Temporary fix\n * =============\n *\n * Find the master URL for an image if has already been signed upstream.\n *\n * DCR can handle generating a signed image URL with `generateImageURL`,\n * so this method extracts source URLS from fully signed ones. _e.g.:_\n *\n * - from\n *   `https://i.guim.co.uk/img/media/c56c6217f8fa306d89320cc7915161203b5017b1/0_166_5000_3002/master/5000.jpg?width=300&quality=85&auto=format&fit=max&s=0d205d08639b4ad6e1b86758ab451abb`\n * \t to\n *   `https://media.guim.co.uk/img/media/c56c6217f8fa306d89320cc7915161203b5017b1/0_166_5000_3002/master/5000.jpg`\n *\n * - from\n *   `https://i.guim.co.uk/img/uploads/2017/10/06/George-Monbiot,-L.png?width=173&quality=85&auto=format&fit=max&s=be5b0d3f3aa55682e4930057fc3929a3`\n *   to\n *   `https://uploads.guim.co.uk/2017/10/06/George-Monbiot,-L.png`\n *\n * @deprecated Favour updating image paths sent from frontend to sources\n */\nexport const getSourceImageUrl = (source: string): string => {\n\tconst url = new URL(source);\n\n\tconst buckets = ['/img/media/', '/img/static/', '/img/uploads/'] as const;\n\tconst prefix = buckets.find((bucket) => url.pathname.startsWith(bucket));\n\n\tif (url.hostname === 'i.guim.co.uk' && prefix) {\n\t\tconst path = url.pathname.replace(prefix, '');\n\t\tswitch (prefix) {\n\t\t\tcase '/img/media/':\n\t\t\t\treturn `https://media.guim.co.uk/${path}`;\n\t\t\tcase '/img/static/':\n\t\t\t\treturn `https://static.guim.co.uk/${path}`;\n\t\t\tcase '/img/uploads/':\n\t\t\t\treturn `https://uploads.guim.co.uk/${path}`;\n\t\t}\n\t}\n\n\treturn source;\n};\n"],"names":["picture","css","img","block","backgroundStyles","palette","background","avatar","Avatar","src","alt","format","containerPalette","decidePalette","sources","generateSources","getSourceImageUrl","breakpoint","width","fallbackSource","getFallbackSource","map","source","Fragment","srcSet","hiResUrl","media","lowResUrl","generateImageURL","master","imageWidth","resolution","url","URL","hostname","href","service","split","params","URLSearchParams","toString","quality","dpr","s","pathname","descendingByBreakpoint","a","b","imageWidths","slice","sort","fallback","Error","Picture","role","height","isMainMedia","isLazy","display","ArticleDisplay","breakpoints","design","ArticleDesign","decideImageWidths","ratio","parseInt","sizes","join","React","loading","disableLazyLoading","undefined","quoteStyles","colour","QuoteIcon","svg","viewBox","path","d","prefix","find","bucket","startsWith","replace"],"sourceRoot":""}