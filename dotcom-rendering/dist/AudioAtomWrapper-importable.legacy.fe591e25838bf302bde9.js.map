{"version":3,"file":"AudioAtomWrapper-importable.legacy.fe591e25838bf302bde9.js","mappings":"qOASaA,EAAmB,SAAH,GAAwH,IAAlHC,EAAE,EAAFA,GAAIC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OAAQC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQC,EAAQ,EAARA,SAAUC,EAAqB,EAArBA,sBAAuBC,EAAc,EAAdA,eAAgBC,EAAmB,EAAnBA,oBAIrH,GAA4CC,EAAAA,EAAAA,WAAS,GAAM,eAApDC,EAAc,KAAEC,EAAiB,KAexC,OAdAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,kBAAgB,SAACC,GAIb,IAAMC,GAAeC,EAAAA,EAAAA,eAAc,QAASF,GACxCP,GACAQ,GACAP,GACAF,GACAK,GAAkB,EAE1B,GACJ,GAAG,CAACL,EAAuBC,EAAgBC,KACnCS,EAAAA,EAAAA,KAAKC,EAAAA,GAAW,CAAElB,GAAIA,EAAIC,SAAUA,EAAUC,OAAQA,EAAQC,MAAOA,EAAOC,OAAQA,EAAQC,SAAUA,EAAUK,eAAgBA,GAC5I,C","sources":["webpack://@guardian/dotcom-rendering/./src/web/components/AudioAtomWrapper.importable.tsx"],"sourcesContent":["import { jsx as _jsx } from \"@emotion/react/jsx-runtime\";\nimport { AudioAtom } from '@guardian/atoms-rendering';\nimport { getConsentFor, onConsentChange, } from '@guardian/consent-management-platform';\nimport { useEffect, useState } from 'react';\n/**\n * # AudioAtomWrapper\n *\n * Wrapper around [`@guardian/atoms-rendering`â€™s `AudioAtom`](https://github.com/guardian/csnx/blob/main/libs/%40guardian/atoms-rendering/src/AudioAtom.tsx)\n */\nexport const AudioAtomWrapper = ({ id, trackUrl, kicker, title, pillar, duration, contentIsNotSensitive, aCastisEnabled, readerCanBeShownAds, }) => {\n    // *****************\n    // *     ACast     *\n    // *****************\n    const [shouldUseAcast, setShouldUseAcast] = useState(false);\n    useEffect(() => {\n        onConsentChange((state) => {\n            // Should we use ad enabled audio? If so, then set the shouldUseAcast\n            // state to true, triggering a rerender of AudioAtom using a new track url\n            // (one with adverts)\n            const consentGiven = getConsentFor('acast', state);\n            if (aCastisEnabled &&\n                consentGiven &&\n                readerCanBeShownAds && // Eg. Not a subscriber\n                contentIsNotSensitive) {\n                setShouldUseAcast(true);\n            }\n        });\n    }, [contentIsNotSensitive, aCastisEnabled, readerCanBeShownAds]);\n    return (_jsx(AudioAtom, { id: id, trackUrl: trackUrl, kicker: kicker, title: title, pillar: pillar, duration: duration, shouldUseAcast: shouldUseAcast }));\n};\n"],"names":["AudioAtomWrapper","id","trackUrl","kicker","title","pillar","duration","contentIsNotSensitive","aCastisEnabled","readerCanBeShownAds","useState","shouldUseAcast","setShouldUseAcast","useEffect","onConsentChange","state","consentGiven","getConsentFor","_jsx","AudioAtom"],"sourceRoot":""}