{"version":3,"file":"Metrics-importable.legacy.8afcc642fb952b520acb.js","mappings":"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","sources":["webpack://@guardian/dotcom-rendering/../../../libs/@guardian/core-web-vitals/src/roundWithDecimals.ts","webpack://@guardian/dotcom-rendering/../../../libs/@guardian/core-web-vitals/src/index.ts","webpack://@guardian/dotcom-rendering/./src/web/components/Metrics.importable.tsx","webpack://@guardian/dotcom-rendering/./src/web/experiments/tests/integrate-ima.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useAB.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useAdBlockInUse.ts","webpack://@guardian/dotcom-rendering/./src/web/lib/useOnce.ts"],"sourcesContent":["export const roundWithDecimals = (value: number, precision = 6): number => {\n\tconst power = Math.pow(10, precision);\n\treturn Math.round(value * power) / power;\n};\n","import type { TeamName } from '@guardian/libs';\nimport { log } from '@guardian/libs';\nimport type { ReportHandler } from 'web-vitals';\nimport type { CoreWebVitalsPayload } from './@types/CoreWebVitalsPayload';\nimport { roundWithDecimals } from './roundWithDecimals';\n\nenum Endpoints {\n\tPROD = 'https://performance-events.guardianapis.com/core-web-vitals',\n\tCODE = 'https://performance-events.code.dev-guardianapis.com/core-web-vitals',\n}\n\nconst coreWebVitalsPayload: CoreWebVitalsPayload = {\n\tbrowser_id: null,\n\tpage_view_id: null,\n\tfid: null,\n\tcls: null,\n\tlcp: null,\n\tfcp: null,\n\tttfb: null,\n};\n\nconst teamsForLogging: Set<TeamName> = new Set();\nlet endpoint: Endpoints;\nlet initialised = false;\n\nconst setEndpoint = (isDev: boolean) => {\n\tendpoint = isDev ? Endpoints.CODE : Endpoints.PROD;\n};\n\nlet queued = false;\nconst sendData = (): void => {\n\tif (queued) return;\n\n\t// If we’re missing FCP, the data is unusable in the lake,\n\t// So we’re not sending anything.\n\tif (coreWebVitalsPayload.fcp === null) return;\n\n\tqueued = navigator.sendBeacon(endpoint, JSON.stringify(coreWebVitalsPayload));\n\n\tif (teamsForLogging.size > 0) {\n\t\tteamsForLogging.forEach((team) => {\n\t\t\tlog(\n\t\t\t\tteam,\n\t\t\t\tqueued\n\t\t\t\t\t? 'Core Web Vitals payload successfully queued for transfer'\n\t\t\t\t\t: 'Failed to queue Core Web Vitals payload for transfer',\n\t\t\t);\n\t\t});\n\t}\n};\n\nconst onReport: ReportHandler = (metric) => {\n\tswitch (metric.name) {\n\t\tcase 'FCP':\n\t\t\t// Browser support: Chromium, Firefox, Safari Technology Preview\n\t\t\tcoreWebVitalsPayload.fcp = roundWithDecimals(metric.value);\n\t\t\tbreak;\n\t\tcase 'CLS':\n\t\t\t// Browser support: Chromium,\n\t\t\tcoreWebVitalsPayload.cls = roundWithDecimals(metric.value);\n\t\t\tbreak;\n\t\tcase 'LCP':\n\t\t\t// Browser support: Chromium\n\t\t\tcoreWebVitalsPayload.lcp = roundWithDecimals(metric.value);\n\t\t\tbreak;\n\t\tcase 'FID':\n\t\t\t// Browser support: Chromium, Firefox, Safari, Internet Explorer (with the polyfill)\n\t\t\tcoreWebVitalsPayload.fid = roundWithDecimals(metric.value);\n\t\t\tbreak;\n\t\tcase 'TTFB':\n\t\t\t// Browser support: Chromium, Firefox, Safari, Internet Explorer\n\t\t\tcoreWebVitalsPayload.ttfb = roundWithDecimals(metric.value);\n\t\t\tbreak;\n\t}\n};\n\nconst listener = (e: Event): void => {\n\tswitch (e.type) {\n\t\tcase 'visibilitychange':\n\t\t\tif (document.visibilityState === 'hidden') sendData();\n\t\t\treturn;\n\t\tcase 'pagehide':\n\t\t\tsendData();\n\t\t\treturn;\n\t}\n};\n\nconst getCoreWebVitals = async (): Promise<void> => {\n\tconst webVitals = await import('web-vitals');\n\tconst { getCLS, getFCP, getFID, getLCP, getTTFB } = webVitals;\n\n\tgetCLS(onReport, { reportAllChanges: false });\n\tgetFID(onReport);\n\tgetLCP(onReport);\n\tgetFCP(onReport);\n\tgetTTFB(onReport);\n\n\t// Report all available metrics when the page is unloaded or in background.\n\taddEventListener('visibilitychange', listener);\n\n\t// Safari does not reliably fire the `visibilitychange` on page unload.\n\taddEventListener('pagehide', listener);\n};\n\ntype InitCoreWebVitalsOptions = {\n\tisDev: boolean;\n\n\tbrowserId?: string | null;\n\tpageViewId?: string | null;\n\n\tsampling?: number;\n\tteam?: TeamName;\n};\n\n/**\n * Initialise sending Core Web Vitals metrics to a logging endpoint.\n *\n * @param {InitCoreWebVitalsOptions} init - the initialisation options\n * @param init.isDev - used to determine whether to use CODE or PROD endpoints.\n * @param init.browserId - identifies the browser. Usually available via `getCookie({ name: 'bwid' })`. Defaults to `null`\n * @param init.pageViewId - identifies the page view. Usually available on `guardian.config.ophan.pageViewId`. Defaults to `null`\n *\n * @param init.sampling - sampling rate for sending data. Defaults to `0.01`.\n *\n * @param init.team - Optional team to trigger a log event once metrics are queued.\n */\nexport const initCoreWebVitals = async ({\n\tbrowserId = null,\n\tpageViewId = null,\n\tsampling = 1 / 100, // 1% of page view by default\n\tisDev,\n\tteam,\n}: InitCoreWebVitalsOptions): Promise<void> => {\n\tif (initialised) {\n\t\tconsole.warn(\n\t\t\t'initCoreWebVitals already initialised',\n\t\t\t'use the bypassCoreWebVitalsSampling method instead',\n\t\t);\n\t\treturn;\n\t}\n\n\tinitialised = true;\n\n\tif (team) teamsForLogging.add(team);\n\n\tsetEndpoint(isDev);\n\n\tcoreWebVitalsPayload.browser_id = browserId;\n\tcoreWebVitalsPayload.page_view_id = pageViewId;\n\n\tif (!browserId || !pageViewId) {\n\t\tconsole.warn(\n\t\t\t'browserId or pageViewId missing from Core Web Vitals.',\n\t\t\t'Resulting data cannot be joined to page view tables',\n\t\t\t{ browserId, pageViewId },\n\t\t);\n\t}\n\n\tif (sampling < 0 || sampling > 1) {\n\t\tconsole.warn(\n\t\t\t'Core Web Vitals sampling is outside the 0 to 1 range: ',\n\t\t\tsampling,\n\t\t);\n\t}\n\tif (sampling === 0) console.warn('Core Web Vitals are sampled at 0%');\n\tif (sampling === 1) console.warn('Core Web Vitals are sampled at 100%');\n\n\tconst pageViewInSample = Math.random() < sampling;\n\tconst bypassWithHash =\n\t\twindow.location.hash === '#bypassCoreWebVitalsSampling';\n\n\tif (pageViewInSample || bypassWithHash) return getCoreWebVitals();\n};\n\n/**\n * A method to asynchronously send web vitals after initialization.\n * @param team - Optional team to trigger a log event once metrics are queued.\n */\nexport const bypassCoreWebVitalsSampling = async (\n\tteam?: TeamName,\n): Promise<void> => {\n\tif (!initialised) {\n\t\tconsole.warn('initCoreWebVitals not yet initialised');\n\t\treturn;\n\t}\n\tif (team) teamsForLogging.add(team);\n\treturn getCoreWebVitals();\n};\n\nexport const _ = {\n\tcoreWebVitalsPayload,\n\tsendData,\n\treset: (): void => {\n\t\tinitialised = false;\n\t\tteamsForLogging.clear();\n\t\tqueued = false;\n\t\tObject.keys(coreWebVitalsPayload).map((key) => {\n\t\t\tcoreWebVitalsPayload[key as keyof CoreWebVitalsPayload] = null;\n\t\t});\n\t\tremoveEventListener('visibilitychange', listener);\n\t\tremoveEventListener('pagehide', listener);\n\t},\n\tEndpoints,\n};\n","import { bypassCommercialMetricsSampling, initCommercialMetrics, } from '@guardian/commercial-core';\nimport { bypassCoreWebVitalsSampling, initCoreWebVitals, } from '@guardian/core-web-vitals';\nimport { getCookie } from '@guardian/libs';\nimport { integrateIma } from '../experiments/tests/integrate-ima';\nimport { useAB } from '../lib/useAB';\nimport { useAdBlockInUse } from '../lib/useAdBlockInUse';\nimport { useOnce } from '../lib/useOnce';\nconst sampling = 1 / 100;\n/** defining this here allows to share this with other metrics */\nconst willRecordCoreWebVitals = Math.random() < sampling;\n// For these tests switch off sampling and collect metrics for 100% of views\nconst clientSideTestsToForceMetrics = [\n    /* keep array multi-line */\n    integrateIma,\n];\nexport const Metrics = ({ commercialMetricsEnabled }) => {\n    const abTestApi = useAB()?.api;\n    const adBlockerInUse = useAdBlockInUse();\n    const browserId = getCookie({ name: 'bwid', shouldMemoize: true });\n    const { pageViewId } = window.guardian.config.ophan;\n    const isDev = !!window.guardian.config.page.isDev ||\n        window.location.hostname === 'm.code.dev-theguardian.com' ||\n        window.location.hostname === (process.env.HOSTNAME ?? 'localhost') ||\n        window.location.hostname === 'preview.gutools.co.uk';\n    const userInServerSideTest = Object.keys(window.guardian.config.tests).length > 0;\n    const shouldBypassSampling = (api) => willRecordCoreWebVitals ||\n        userInServerSideTest ||\n        clientSideTestsToForceMetrics.some((test) => api.runnableTest(test));\n    useOnce(function coreWebVitals() {\n        // abTestApi should be defined inside useOnce\n        const bypassSampling = abTestApi\n            ? shouldBypassSampling(abTestApi)\n            : false;\n        /**\n         * We rely on `bypassSampling` rather than the built-in sampling,\n         * but set the value to greater than 0 to avoid console warnings.\n         */\n        const nearZeroSampling = Number.MIN_VALUE;\n        void initCoreWebVitals({\n            browserId,\n            pageViewId,\n            isDev,\n            sampling: nearZeroSampling,\n            team: 'dotcom',\n        });\n        if (bypassSampling || isDev)\n            void bypassCoreWebVitalsSampling('commercial');\n    }, [abTestApi]);\n    useOnce(function commercialMetrics() {\n        // Only send metrics if the switch is enabled\n        if (!commercialMetricsEnabled)\n            return;\n        // abTestApi should be defined inside useOnce\n        const bypassSampling = abTestApi\n            ? shouldBypassSampling(abTestApi)\n            : false;\n        initCommercialMetrics({\n            pageViewId,\n            browserId: browserId ?? undefined,\n            isDev,\n            adBlockerInUse,\n        })\n            .then(() => {\n            if (bypassSampling || isDev) {\n                void bypassCommercialMetricsSampling();\n            }\n        })\n            .catch((e) => console.error(`Error initialising commercial metrics: ${String(e)}`));\n    }, [abTestApi, adBlockerInUse, commercialMetricsEnabled]);\n    // We don’t render anything\n    return null;\n};\n","export const integrateIma = {\n    id: 'IntegrateIma',\n    start: '2022-07-14',\n    expiry: '2023-04-04',\n    author: 'Zeke Hunter-Green',\n    description: 'Test the commercial impact of replacing YouTube ads with Interactive Media Ads on first-party videos',\n    audience: 0,\n    audienceOffset: 0,\n    audienceCriteria: 'Opt in',\n    successMeasure: 'IMA integration works as expected without adversely affecting pages with videos',\n    canRun: () => true,\n    variants: [\n        { id: 'control', test: () => { } },\n        { id: 'variant', test: () => { } },\n    ],\n};\n","import { mutate } from 'swr';\nimport useSWRImmutable from 'swr/immutable';\nconst apiPromise = new Promise(() => { });\nconst key = 'ab-tests';\n/**\n * A hook which returns the AB Test Api when available,\n * or undefined otherwise.\n *\n * Leverages an immutable SWR to satisfy all requests to the\n * AB Core. As soon as the tests are available, all instances of\n * the useAB hook will render.\n */\nexport const useAB = () => {\n    const { data } = useSWRImmutable(key, () => apiPromise);\n    return data;\n};\nexport const setABTests = ({ api, participations }) => {\n    void mutate(key, { api, participations }, false);\n};\n","import { isAdBlockInUse } from '@guardian/commercial-core';\nimport { useEffect, useState } from 'react';\n/**\n * @description\n * useAdBlockInUse provides a custom hook to integrate the isAdBlockInUse\n * promise into a react component\n * */\nexport const useAdBlockInUse = () => {\n    const [isInUse, setIsInUse] = useState();\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        isAdBlockInUse().then((blockerDetected) => {\n            setIsInUse(blockerDetected);\n        });\n    }, []);\n    return isInUse;\n};\n","import { useEffect, useState } from 'react';\n/**\n * Ensures that the given task is only run once and only after all items in waitFor are defined\n * @param {Function} task - The task to execute once\n * @param {Array} waitFor - An array of variables that must be defined before the task is executed\n * */\nexport const useOnce = (task, waitFor) => {\n    const [alreadyRun, setAlreadyRun] = useState(false);\n    const isReady = waitFor.every((dep) => dep !== undefined);\n    useEffect(() => {\n        if (!alreadyRun && isReady) {\n            task();\n            setAlreadyRun(true);\n        }\n    }, [alreadyRun, isReady, task]);\n};\n"],"names":["roundWithDecimals","value","precision","power","Math","pow","round","Endpoints","coreWebVitalsPayload","browser_id","page_view_id","fid","cls","lcp","fcp","ttfb","teamsForLogging","initialised","setEndpoint","isDev","endpoint","queued","sendData","forEach","log","onReport","metric","listener","e","type","document","getCoreWebVitals","webVitals","getCLS","getFCP","getFID","getLCP","getTTFB","team","console","pageViewId","warn","pageViewInSample","bypassWithHash","window","location","initCoreWebVitals","bypassCoreWebVitalsSampling","willRecordCoreWebVitals","random","clientSideTestsToForceMetrics","integrateIma","Metrics","commercialMetricsEnabled","abTestApi","useAB","api","adBlockerInUse","useAdBlockInUse","browserId","getCookie","name","shouldMemoize","guardian","config","ophan","page","hostname","userInServerSideTest","Object","keys","tests","length","shouldBypassSampling","some","test","runnableTest","useOnce","bypassSampling","nearZeroSampling","Number","MIN_VALUE","sampling","initCommercialMetrics","undefined","then","bypassCommercialMetricsSampling","catch","error","String","id","start","expiry","author","description","audience","audienceOffset","audienceCriteria","successMeasure","canRun","variants","apiPromise","Promise","key","useSWRImmutable","data","setABTests","participations","mutate","useState","isInUse","setIsInUse","useEffect","isAdBlockInUse","blockerDetected","task","waitFor","alreadyRun","setAlreadyRun","isReady","every","dep"],"sourceRoot":""}