// This config is part of a proposed new webpack setup, that provides a
// one-to-one relation between ./configs/webpack/bundle.*.mjs configs and output
// bundles.
//
// It loads all configs from ./configs/webpack/bundle.*.mjs and composes them in
// an array of configs to be passed to webpack.
//
// It's not in use yet, and neither is the ./configs dir.
//
// If you want to edit the _working_ webpack config, look in:
// ./scripts/webpack/webpack.config.js.
//
// You can try this config out and build the ./configs/webpack/bundle.*.mjs
// configs by running `NODE_ENV=production yarn webpack --progress`.

import { mkdir, readdir, writeFile } from 'node:fs/promises';
import { basename, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import devServer from './configs/webpack/server.dev.mjs';
import prodServer from './configs/webpack/server.mjs';
import { isDev } from './configs/webpack/utils/env.mjs';

const dirname = fileURLToPath(new URL('.', import.meta.url));

const configsDirectory = resolve(dirname, 'configs', 'webpack');

const clientConfigs = await readdir(configsDirectory).then((files) =>
	files.filter((file) => file.startsWith('client.')),
);

// Create a bundles manifest for the TypesScript compiler so we get type safely
// when referring to bundles on the server
await mkdir(resolve(dirname, 'dist'), { recursive: true });
await writeFile(
	resolve(dirname, 'dist', 'manifest.bundles.mjs'),
	`// DO NOT EDIT: THIS FILE IS AUTOMATICALLY GENERATED //
// source: dotcom-rendering/webpack.config.mjs //

/** @typedef {typeof bundles[number]} Bundle */

/** generated from webpack.config.js */
export const bundles = /** @type {const} @satisfies {readonly string[]} */ ([
\t${clientConfigs.map((name) => `"${basename(name, '.mjs')}"`).join(',\n\t')},
]);
`,
	'utf-8',
);

export default [isDev ? devServer : prodServer].concat(
	clientConfigs.map((name) =>
		// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-return -- can't know what we are importing
		import(`${configsDirectory}/${name}`).then((config) => config.default),
	),
);
