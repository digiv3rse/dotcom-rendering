import { css } from '@emotion/react';
import { headline, visuallyHidden } from '@guardian/source-foundations';
import { palette } from '../palette';
import type { TrailTabType, TrailType } from '../types/trails';
import { GeneratedSummaryItem } from './GeneratedSummaryItem.importable';

const hidePanel = css`
	display: none;
`;
const gridContainer = css`
	display: grid;
	grid-auto-flow: column;

	/* One column view */
	grid-template-columns: 1fr;
	grid-template-rows: auto auto auto auto auto auto auto auto auto auto;

	/* We set left border on the grid container, and then right border on
    the gridItems to prevent borders doubling up */
	/* border-left: 1px solid ${palette('--article-border')}; */
`;

const headerAndWarningStyle = css`
	display: flex;
	flex-direction: row;
`;

const genAIWarningStyle = css`
	margin-left: 10px;
	padding-bottom: 10px;
	${headline.xxxsmall()};
	color: ${palette('--article-text')};
`;

type Props = {
	data: TrailTabType[];
	sectionId?: string;
	hasPageSkin?: boolean;
};

export const GeneratedSummaryGrid = ({
	data,
	sectionId = '',
	hasPageSkin = false,
}: Props) => {
	return (
		<>
			{/*
				This .map() generates the 'tabs' (the navigation links at the top
				of the container). The 'tabpanels' (the containers which show or hide
				depending on which tab is active) are generated by a separate .map()
				below.
				It only generates tabs if there is more than one panel of content.
			*/}
			{/* End of 'tab' mapping, beginning of 'tabpanel' mapping. */}
			{data.map((tab: TrailTabType, i: number) => (
				<section
					role={undefined}
					id={`tabs-popular-${i}`}
					data-testid={tab.heading}
					key={`tabs-popular-${tab.heading}`}
					css={i !== 0 && hidePanel}
				>
					<span css={headerAndWarningStyle}>
						<h3
							css={css`
								${visuallyHidden}
							`}
						>
							Most viewed {tab.heading}
						</h3>
						<span css={genAIWarningStyle}>
							{' '}
							Please note that the following article summaries
							have been produced by Generative AI and may not be
							entirely reliable.
						</span>
					</span>
					<ol
						css={gridContainer}
						data-testid={`tab-body-${i}`}
						data-link-name={tab.heading}
						data-link-context={`most-read/${sectionId}`}
					>
						{tab.trails.map((trail: TrailType, j: number) => (
							<GeneratedSummaryItem
								key={trail.url}
								position={j + 1}
								url={trail.url}
								format={trail.format}
								headlineText={trail.headline}
								ageWarning={trail.ageWarning}
								hasPageSkin={hasPageSkin}
								image={trail.image}
								webPublicationDate={
									trail.webPublicationDate
										? trail.webPublicationDate
										: ''
								}
							/>
						))}
					</ol>
				</section>
			))}
		</>
	);
};
