// Generated by ts-to-zod
import type { output, ZodSchema } from 'zod';
import { any, array, boolean, lazy, object, string } from 'zod';
import { legacyPillarSchema } from './capi';

const readerRevenueCategoriesSchema = object({
	contribute: string(),
	subscribe: string(),
	support: string(),
	supporter: string(),
	gifting: string().optional(),
});

const readerRevenuePositionsSchema = object({
	header: readerRevenueCategoriesSchema,
	footer: readerRevenueCategoriesSchema,
	sideMenu: readerRevenueCategoriesSchema,
	ampHeader: readerRevenueCategoriesSchema,
	ampFooter: readerRevenueCategoriesSchema,
});

export const readerRevenuePositionSchema = any();

interface FELinkType {
	url: string;
	title: string;
	longTitle?: string;
	iconName?: string;
	children?: FELinkType[];
	pillar?: output<typeof legacyPillarSchema>;
	more?: boolean;
	classList?: string[];
}

export const feLinkTypeSchema: ZodSchema<FELinkType> = lazy(() =>
	object({
		url: string(),
		title: string(),
		longTitle: string().optional(),
		iconName: string().optional(),
		children: array(feLinkTypeSchema).optional(),
		pillar: legacyPillarSchema.optional(),
		more: boolean().optional(),
		classList: array(string()).optional(),
	}),
);

export const feNavTypeSchema = object({
	currentUrl: string(),
	pillars: array(feLinkTypeSchema),
	otherLinks: array(feLinkTypeSchema),
	brandExtensions: array(feLinkTypeSchema),
	currentNavLink: feLinkTypeSchema.optional(),
	currentNavLinkTitle: string().optional(),
	currentPillarTitle: string().optional(),
	subNavSections: object({
		parent: feLinkTypeSchema.optional(),
		links: array(feLinkTypeSchema),
	}).optional(),
	readerRevenueLinks: readerRevenuePositionsSchema,
});
