// Generated by ts-to-zod
import {
	array,
	boolean,
	enum as enums,
	literal,
	number,
	object,
	string,
	union,
} from 'zod';
import { capiFormatSchema } from './capi';

const thirdPartyEmbeddedContentSchema = object({
	isThirdPartyTracking: boolean(),
	source: string().optional(),
	sourceDomain: string().optional(),
});

const audioBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.AudioBlockElement'),
	elementId: string(),
});

const blockquoteBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.BlockquoteBlockElement'),
	elementId: string(),
	html: string(),
	quoted: boolean().optional(),
});

const captionBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.CaptionBlockElement'),
	elementId: string(),
	captionText: string().optional(),
	padCaption: boolean().optional(),
	credit: string().optional(),
	displayCredit: boolean().optional(),
	shouldLimitWidth: boolean().optional(),
	isOverlaid: boolean().optional(),
});

const codeBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.CodeBlockElement'),
	elementId: string(),
	html: string(),
	isMandatory: boolean(),
	language: string().optional(),
});

const contentAtomBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.ContentAtomBlockElement',
	),
	elementId: string(),
	atomId: string(),
});

const dividerBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.DividerBlockElement'),
	size: union([literal('full'), literal('partial')]).optional(),
	spaceAbove: union([literal('tight'), literal('loose')]).optional(),
});

const genericAtomBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.GenericAtomBlockElement',
	),
	url: string(),
	placeholderUrl: string().optional(),
	id: string().optional(),
	html: string().optional(),
	css: string().optional(),
	js: string().optional(),
	elementId: string(),
});

const highlightBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.HighlightBlockElement'),
	elementId: string(),
	html: string(),
});

const itemLinkBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.ItemLinkBlockElement'),
	elementId: string(),
	html: string(),
});

const numberedTitleBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.NumberedTitleBlockElement',
	),
	elementId: string(),
	position: number(),
	html: string(),
	format: capiFormatSchema,
});

const pullquoteBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.PullquoteBlockElement'),
	elementId: string(),
	html: string().optional(),
	role: string(),
	attribution: string().optional(),
	isThirdPartyTracking: boolean().optional(),
});

const subheadingBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.SubheadingBlockElement'),
	elementId: string(),
	html: string(),
});

const textBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.TextBlockElement'),
	elementId: string(),
	dropCap: boolean().optional(),
	html: string(),
});

const vineBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.VineBlockElement'),
	elementId: string(),
	url: string(),
	height: number(),
	width: number(),
	originalUrl: string(),
	title: string(),
});

const witnessTypeDataBaseSchema = object({
	authorUsername: string(),
	authorGuardianProfileUrl: string(),
	originalUrl: string(),
	source: string(),
	title: string(),
	url: string(),
	dateCreated: string(),
	apiUrl: string(),
	authorName: string(),
	witnessEmbedType: string(),
	html: string().optional(),
	authorWitnessProfileUrl: string(),
});

const witnessTypeDataImageSchema = witnessTypeDataBaseSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.WitnessTypeDataImage'),
	type: literal('image'),
	alt: string(),
	caption: string(),
	mediaId: string(),
	photographer: string(),
});

const witnessTypeDataVideoSchema = witnessTypeDataBaseSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.WitnessTypeDataVideo'),
	type: literal('video'),
	description: string(),
	youtubeHtml: string(),
	youtubeDescription: string(),
	youtubeUrl: string(),
	width: number(),
	youtubeSource: string(),
	youtubeAuthorName: string(),
	height: number(),
	youtubeTitle: string(),
});

const witnessTypeDataTextSchema = witnessTypeDataBaseSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.WitnessTypeDataText'),
	type: literal('text'),
	description: string(),
	authorUsername: string(),
	originalUrl: string(),
	source: string(),
	title: string(),
	url: string(),
	dateCreated: string(),
	apiUrl: string(),
	authorName: string(),
	witnessEmbedType: string(),
	authorWitnessProfileUrl: string(),
});

const witnessAssetTypeSchema = object({
	type: literal('Image'),
	mimeType: literal('image/jpeg'),
	file: string(),
	typeData: object({
		name: string(),
	}),
});

const witnessTypeBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.WitnessBlockElement'),
	elementId: string(),
	assets: array(witnessAssetTypeSchema),
	isThirdPartyTracking: boolean(),
	witnessTypeData: union([
		witnessTypeDataImageSchema,
		witnessTypeDataVideoSchema,
		witnessTypeDataTextSchema,
	]),
});

const weightingSchema = enums([
	'inline',
	'thumbnail',
	'supporting',
	'showcase',
	'halfwidth',
	'immersive',
	'richLink',
]);

const roleTypeSchema = enums([
	'immersive',
	'supporting',
	'showcase',
	'inline',
	'thumbnail',
	'halfWidth',
]);

const srcSetItemSchema = object({
	src: string(),
	width: number(),
});

const imageSchema = object({
	index: number(),
	fields: object({
		height: string(),
		width: string(),
		isMaster: string().optional(),
		source: string().optional(),
		caption: string().optional(),
	}),
	mediaType: string(),
	mimeType: string(),
	url: string(),
});

const videoAssetsSchema = object({
	url: string(),
	mimeType: string(),
	fields: object({
		source: string().optional(),
		embeddable: string().optional(),
		height: string().optional(),
		width: string().optional(),
		caption: string().optional(),
	}).optional(),
});

const timelineEventSchema = object({
	title: string(),
	date: string(),
	unixDate: number(),
	body: string().optional(),
	toDate: string().optional(),
	toUnixDate: number().optional(),
});

const ratingSizeTypeSchema = enums(['large', 'medium', 'small']);

const campaignFieldSchema = object({
	id: string(),
	name: string(),
	description: string().optional(),
	required: boolean(),
	textSize: number().optional(),
	hideLabel: boolean(),
	label: string(),
});

const campaignFieldTextSchema = campaignFieldSchema.extend({
	type: literal('text'),
});

const campaignFieldTextAreaSchema = campaignFieldSchema.extend({
	type: literal('textarea'),
});

const campaignFieldFileSchema = campaignFieldSchema.extend({
	type: literal('file'),
});

const campaignFieldRadioSchema = campaignFieldSchema.extend({
	type: literal('radio'),
	options: array(
		object({
			label: string(),
			value: string(),
		}),
	),
});

const campaignFieldCheckboxSchema = campaignFieldSchema.extend({
	type: literal('checkbox'),
	options: array(
		object({
			label: string(),
			value: string(),
		}),
	),
});

const campaignFieldSelectSchema = campaignFieldSchema.extend({
	type: literal('select'),
	options: array(
		object({
			label: string(),
			value: string(),
		}),
	),
});

const answerTypeSchema = object({
	id: string(),
	text: string(),
	revealText: string().optional(),
	isCorrect: boolean(),
	answerBuckets: array(string()),
});

const questionTypeSchema = object({
	id: string(),
	text: string(),
	answers: array(answerTypeSchema),
	imageUrl: string().optional(),
});

const resultBucketsTypeSchema = object({
	id: string(),
	title: string(),
	description: string(),
});

const newsletterSchema = object({
	listId: number(),
	identityName: string(),
	name: string(),
	description: string(),
	frequency: string(),
	successDescription: string(),
	theme: string(),
	group: string(),
});

const audioAtomBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.AudioAtomBlockElement'),
	elementId: string(),
	id: string(),
	kicker: string(),
	title: string().optional(),
	trackUrl: string(),
	duration: number(),
	coverUrl: string(),
	role: roleTypeSchema.optional(),
});

const chartAtomBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.ChartAtomBlockElement'),
	elementId: string(),
	id: string(),
	url: string(),
	html: string(),
	css: string().optional(),
	js: string().optional(),
	role: roleTypeSchema.optional(),
	placeholderUrl: string().optional(),
});

const quizAtomBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.QuizAtomBlockElement'),
	elementId: string(),
	quizType: enums(['personality', 'knowledge']),
	id: string(),
	questions: array(questionTypeSchema),
	resultBuckets: array(resultBucketsTypeSchema),
	resultGroups: array(
		object({
			id: string(),
			title: string(),
			shareText: string(),
			minScore: number(),
		}),
	),
});

const commentBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.CommentBlockElement'),
	elementId: string(),
	body: string(),
	avatarURL: string(),
	profileURL: string(),
	profileName: string(),
	permalink: string(),
	dateTime: string(),
	role: roleTypeSchema.optional(),
});

const disclaimerBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.DisclaimerBlockElement'),
	elementId: string(),
	html: string(),
	role: roleTypeSchema.optional(),
});

const documentBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.DocumentBlockElement'),
	elementId: string(),
	embedUrl: string(),
	height: number(),
	width: number(),
	title: string().optional(),
	role: roleTypeSchema.optional(),
});

const embedBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.EmbedBlockElement'),
	elementId: string(),
	safe: boolean().optional(),
	role: roleTypeSchema.optional(),
	alt: string().optional(),
	height: number().optional(),
	width: number().optional(),
	html: string(),
	isMandatory: boolean(),
	caption: string().optional(),
});

const explainerAtomBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.ExplainerAtomBlockElement',
	),
	elementId: string(),
	id: string(),
	title: string(),
	body: string(),
	role: roleTypeSchema.optional(),
});

const guideAtomBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.GuideAtomBlockElement'),
	elementId: string(),
	id: string(),
	label: string(),
	title: string(),
	img: string().optional(),
	html: string(),
	credit: string(),
	role: roleTypeSchema.optional(),
});

const guVideoBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.GuVideoBlockElement'),
	elementId: string(),
	assets: array(videoAssetsSchema),
	caption: string(),
	html: string(),
	source: string(),
	role: roleTypeSchema.optional(),
	imageMedia: object({
		allImages: array(imageSchema),
	}).optional(),
	originalUrl: string().optional(),
	url: string().optional(),
});

const instagramBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.InstagramBlockElement'),
	elementId: string(),
	html: string(),
	url: string(),
	hasCaption: boolean(),
	role: roleTypeSchema.optional(),
});

const interactiveAtomBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.InteractiveAtomBlockElement',
	),
	elementId: string(),
	url: string(),
	id: string(),
	js: string().optional(),
	html: string().optional(),
	css: string().optional(),
	placeholderUrl: string().optional(),
	role: roleTypeSchema.optional(),
});

const interactiveBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.InteractiveBlockElement',
	),
	elementId: string(),
	url: string().optional(),
	isMandatory: boolean().optional(),
	scriptUrl: string().optional(),
	alt: string().optional(),
	role: roleTypeSchema.optional(),
	caption: string().optional(),
});

const mapBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.MapBlockElement'),
	elementId: string(),
	embedUrl: string(),
	originalUrl: string(),
	title: string(),
	height: number(),
	width: number(),
	caption: string().optional(),
	role: roleTypeSchema.optional(),
});

const mediaAtomBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.MediaAtomBlockElement'),
	elementId: string(),
	id: string(),
	assets: array(videoAssetsSchema),
	posterImage: array(
		object({
			url: string(),
			width: number(),
		}),
	).optional(),
	title: string().optional(),
	duration: number().optional(),
});

const newsletterSignupBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.NewsletterSignupBlockElement',
	),
	newsletter: newsletterSchema,
	elementId: string().optional(),
});

const interactiveContentsBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.InteractiveContentsBlockElement',
	),
	elementId: string(),
	subheadingLinks: array(subheadingBlockElementSchema),
	endDocumentElementId: string().optional(),
});

const profileAtomBlockElementSchema = object({
	_type: literal(
		'model.dotcomrendering.pageElements.ProfileAtomBlockElement',
	),
	elementId: string(),
	id: string(),
	label: string(),
	title: string(),
	img: string().optional(),
	html: string(),
	credit: string(),
	role: roleTypeSchema.optional(),
});

const qABlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.QABlockElement'),
	elementId: string(),
	id: string(),
	title: string(),
	img: string().optional(),
	html: string(),
	credit: string(),
	role: roleTypeSchema.optional(),
});

const richLinkBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.RichLinkBlockElement'),
	elementId: string(),
	url: string(),
	text: string(),
	prefix: string(),
	role: weightingSchema.optional(),
});

const soundcloudBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.SoundcloudBlockElement'),
	elementId: string(),
	html: string(),
	id: string(),
	isTrack: boolean(),
	isMandatory: boolean(),
	role: roleTypeSchema.optional(),
});

const spotifyBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.SpotifyBlockElement'),
	elementId: string(),
	embedUrl: string().optional(),
	title: string().optional(),
	height: number().optional(),
	width: number().optional(),
	caption: string().optional(),
	role: roleTypeSchema.optional(),
});

const starRatingBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.StarRatingBlockElement'),
	elementId: string(),
	rating: number(),
	size: ratingSizeTypeSchema,
});

const tableBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.TableBlockElement'),
	elementId: string(),
	isMandatory: boolean(),
	html: string(),
	role: roleTypeSchema.optional(),
});

const timelineBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.TimelineBlockElement'),
	elementId: string(),
	id: string(),
	title: string(),
	description: string().optional(),
	events: array(timelineEventSchema),
	role: roleTypeSchema.optional(),
});

const tweetBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.TweetBlockElement'),
	elementId: string(),
	html: string(),
	url: string(),
	id: string(),
	hasMedia: boolean(),
	role: roleTypeSchema.optional(),
});

const videoBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.VideoBlockElement'),
	elementId: string(),
	role: roleTypeSchema.optional(),
});

const videoFacebookBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal(
		'model.dotcomrendering.pageElements.VideoFacebookBlockElement',
	),
	elementId: string(),
	url: string(),
	height: number(),
	width: number(),
	caption: string().optional(),
	embedUrl: string().optional(),
	role: roleTypeSchema.optional(),
});

const videoVimeoBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal('model.dotcomrendering.pageElements.VideoVimeoBlockElement'),
	elementId: string(),
	embedUrl: string().optional(),
	url: string(),
	height: number(),
	width: number(),
	caption: string().optional(),
	credit: string().optional(),
	title: string().optional(),
	originalUrl: string().optional(),
	role: roleTypeSchema.optional(),
});

const videoYoutubeBlockElementSchema = thirdPartyEmbeddedContentSchema.extend({
	_type: literal(
		'model.dotcomrendering.pageElements.VideoYoutubeBlockElement',
	),
	elementId: string(),
	embedUrl: string().optional(),
	url: string(),
	originalUrl: string(),
	height: number(),
	width: number(),
	caption: string().optional(),
	credit: string().optional(),
	title: string().optional(),
	role: roleTypeSchema.optional(),
});

const youtubeBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.YoutubeBlockElement'),
	elementId: string(),
	assetId: string(),
	mediaTitle: string(),
	id: string(),
	channelId: string().optional(),
	duration: number().optional(),
	posterImage: array(
		object({
			url: string(),
			width: number(),
		}),
	).optional(),
	expired: boolean(),
	overrideImage: string().optional(),
	altText: string().optional(),
	role: roleTypeSchema.optional(),
});

const imageSourceSchema = object({
	weighting: weightingSchema,
	srcSet: array(srcSetItemSchema),
});

const campaignFieldTypeSchema = union([
	campaignFieldTextSchema,
	campaignFieldTextAreaSchema,
	campaignFieldFileSchema,
	campaignFieldRadioSchema,
	campaignFieldCheckboxSchema,
	campaignFieldSelectSchema,
]);

const calloutBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.CalloutBlockElement'),
	elementId: string(),
	id: string(),
	calloutsUrl: string(),
	activeFrom: number(),
	displayOnSensitive: boolean(),
	formId: number(),
	title: string(),
	description: string(),
	tagName: string(),
	formFields: array(campaignFieldTypeSchema),
	role: roleTypeSchema.optional(),
});

const imageBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.ImageBlockElement'),
	elementId: string(),
	media: object({
		allImages: array(imageSchema),
	}),
	data: object({
		alt: string().optional(),
		credit: string().optional(),
		caption: string().optional(),
		copyright: string().optional(),
	}),
	imageSources: array(imageSourceSchema),
	displayCredit: boolean().optional(),
	role: roleTypeSchema,
	title: string().optional(),
	starRating: number().optional(),
	isAvatar: boolean().optional(),
});

const multiImageBlockElementSchema = object({
	_type: literal('model.dotcomrendering.pageElements.MultiImageBlockElement'),
	elementId: string(),
	images: array(imageBlockElementSchema),
	caption: string().optional(),
	role: roleTypeSchema.optional(),
});

export const feElementSchema = union([
	audioAtomBlockElementSchema,
	audioBlockElementSchema,
	blockquoteBlockElementSchema,
	captionBlockElementSchema,
	calloutBlockElementSchema,
	chartAtomBlockElementSchema,
	codeBlockElementSchema,
	commentBlockElementSchema,
	contentAtomBlockElementSchema,
	disclaimerBlockElementSchema,
	dividerBlockElementSchema,
	documentBlockElementSchema,
	embedBlockElementSchema,
	explainerAtomBlockElementSchema,
	genericAtomBlockElementSchema,
	guideAtomBlockElementSchema,
	guVideoBlockElementSchema,
	highlightBlockElementSchema,
	imageBlockElementSchema,
	instagramBlockElementSchema,
	interactiveAtomBlockElementSchema,
	interactiveContentsBlockElementSchema,
	interactiveBlockElementSchema,
	itemLinkBlockElementSchema,
	mapBlockElementSchema,
	mediaAtomBlockElementSchema,
	multiImageBlockElementSchema,
	numberedTitleBlockElementSchema,
	newsletterSignupBlockElementSchema,
	profileAtomBlockElementSchema,
	pullquoteBlockElementSchema,
	qABlockElementSchema,
	quizAtomBlockElementSchema,
	richLinkBlockElementSchema,
	soundcloudBlockElementSchema,
	spotifyBlockElementSchema,
	starRatingBlockElementSchema,
	subheadingBlockElementSchema,
	tableBlockElementSchema,
	textBlockElementSchema,
	timelineBlockElementSchema,
	tweetBlockElementSchema,
	videoBlockElementSchema,
	videoFacebookBlockElementSchema,
	videoVimeoBlockElementSchema,
	videoYoutubeBlockElementSchema,
	vineBlockElementSchema,
	youtubeBlockElementSchema,
	witnessTypeBlockElementSchema,
]);
