// Generated by ts-to-zod
import {
	any,
	array,
	boolean,
	enum as enums,
	number,
	object,
	record,
	string,
} from 'zod';

const commercialConfigTypeSchema = object({
	isPaidContent: boolean().optional(),
	pageId: string(),
	webPublicationDate: number().optional(),
	headline: string().optional(),
	author: string().optional(),
	keywords: string().optional(),
	section: string().optional(),
	edition: string().optional(),
	series: string().optional(),
	toneIds: string().optional(),
	contentType: string(),
	ampIframeUrl: string(),
});

const serverSideTestsSchema = record(enums(['control', 'variant']).optional());

export const configTypeSchema = commercialConfigTypeSchema.extend({
	ajaxUrl: string(),
	sentryPublicApiKey: string(),
	sentryHost: string(),
	dcrSentryDsn: string(),
	switches: record(boolean()),
	abTests: serverSideTestsSchema,
	dfpAccountId: string(),
	commercialBundleUrl: string(),
	revisionNumber: string(),
	shortUrlId: string(),
	isDev: boolean().optional(),
	googletagUrl: string(),
	stage: string(),
	frontendAssetsFullURL: string(),
	adUnit: string(),
	isSensitive: boolean(),
	videoDuration: number().optional(),
	edition: string(),
	section: string(),
	sharedAdTargeting: record(any()),
	isPaidContent: boolean().optional(),
	keywordIds: string(),
	showRelatedContent: boolean(),
	shouldHideReaderRevenue: boolean().optional(),
	idApiUrl: string(),
	discussionApiUrl: string(),
	discussionD2Uid: string(),
	discussionApiClientHeader: string(),
	isPhotoEssay: boolean().optional(),
	references: array(record(string())).optional(),
	host: string().optional(),
	idUrl: string().optional(),
	mmaUrl: string().optional(),
	brazeApiKey: string().optional(),
	ipsosTag: string().optional(),
	isLiveBlog: boolean().optional(),
	isLive: boolean().optional(),
	isPreview: boolean().optional(),
});
