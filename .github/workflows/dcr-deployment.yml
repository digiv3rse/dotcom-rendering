name: DCR Deployment
on:
  push:
    paths-ignore:
      - 'apps-rendering/**'

env:
  # We set NODE_ENV=production globally, this ensures we have consistent yarn installs between jobs
  NODE_ENV: production
  built_project_filename: built-project.tar.gz
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Node
        uses: guardian/actions-setup-node@v2.4.1
        with:
          cache: 'yarn'
      - name: Yarn install
        run: yarn --frozen-lockfile
      # Save the output for use in further jobs
      - name: Tar files
        run: touch setup-project.tar.gz && tar --exclude=setup-project.tar.gz -czf setup-project.tar.gz .
      - name: Upload setup project
        uses: actions/upload-artifact@v3
        with:
          name: setup-project-output
          path: setup-project.tar.gz
  lint:
    name: lint
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      # Setup Environment
      - name: Download setup project
        uses: actions/download-artifact@v3
        with:
          name: setup-project-output
      - name: Extract project
        run: tar -xzf setup-project.tar.gz
      - name: Install Node
        uses: guardian/actions-setup-node@v2.4.1
      # Job Steps
      - name: Lint
        run: make lint
        working-directory: dotcom-rendering
      - name: Stylelint
        run: make stylelint
        working-directory: dotcom-rendering
      - name: Prettier check
        run: yarn prettier:check
        working-directory: dotcom-rendering
  build:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      # Setup Environment
      - name: Download setup project
        uses: actions/download-artifact@v3
        with:
          name: setup-project-output
      - name: Extract project
        run: tar -xzf setup-project.tar.gz
      - name: Install Node
        uses: guardian/actions-setup-node@v2.4.1
      # Job Steps
      - name: Generate production build
        run: make build
        working-directory: dotcom-rendering
      - name: Validate Build
        run: make buildCheck
        working-directory: dotcom-rendering
      - name: Tar files
        run: touch ${{env.built_project_filename}} && tar --exclude=${{env.built_project_filename}} -czf ${{env.built_project_filename}} .
      - name: Upload built project
        uses: actions/upload-artifact@v3
        with:
          name: built-project-output
          path: ${{env.built_project_filename}}
  cypress:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3, 4, 5, 6]
    steps:
      # Setup Environment
      - name: Download built project
        uses: actions/download-artifact@v3
        with:
          name: built-project-output
      - name: Extract project
        run: tar -xzf ${{env.built_project_filename}}
      - name: Install Node
        uses: guardian/actions-setup-node@v2.4.1
      # Job Steps
      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          start: make start-ci
          working-directory: dotcom-rendering
          wait-on: 'http://localhost:9000'
          wait-on-timeout: 30
          browser: chrome
          spec: cypress/e2e/parallel-${{ matrix.group }}/*.js

  deploy:
    needs: [build, lint, cypress]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        run: echo "Coming soon..."
